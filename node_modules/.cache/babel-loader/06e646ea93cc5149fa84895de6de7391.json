{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97154\\\\swap\\\\hami\\\\LokiswapUI\\\\src\\\\views\\\\Home\\\\components\\\\CakeStats.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Card, CardBody, Text, Heading } from '@pancakeswap/uikit';\nimport styled from 'styled-components';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance';\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks';\nimport { getCakeAddress } from 'utils/addressHelpers';\nimport { useTranslation } from 'contexts/Localization';\nimport CardValue from './CardValue';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`;\n_c = StyledCakeStats;\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`;\n_c2 = Row;\n\nconst CakeStats = () => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const totalSupply = useTotalSupply();\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()));\n  const totalMinted = totalSupply ? getBalanceNumber(totalSupply) : 0;\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0;\n  const NNPriceBusd = usePriceCakeBusd();\n  const mcap = NNPriceBusd.isNaN() ? 0 : getBalanceNumber(NNPriceBusd.times(cakeSupply).times(1000000000));\n  const farms = useFarms();\n  console.log('log->farms', farms);\n  const rewardPerBlock = farms && farms.data ? farms.data[0].lokipersecond : 0;\n  return /*#__PURE__*/_jsxDEV(StyledCakeStats, {\n    children: /*#__PURE__*/_jsxDEV(CardBody, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        scale: \"xl\",\n        mb: \"24px\",\n        children: t('LOKI Stats')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: t('Market Cap')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardValue, {\n          fontSize: \"14px\",\n          value: mcap,\n          decimals: 2,\n          prefix: \"$\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: t('Total Minted')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), totalSupply && /*#__PURE__*/_jsxDEV(CardValue, {\n          fontSize: \"14px\",\n          value: totalMinted,\n          decimals: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: t('Total Burned')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CardValue, {\n          fontSize: \"14px\",\n          value: burnedBalance,\n          decimals: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: t('Circulating Supply')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), cakeSupply && /*#__PURE__*/_jsxDEV(CardValue, {\n          fontSize: \"14px\",\n          value: cakeSupply,\n          decimals: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 26\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Row, {\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: t('Rewards LOKI/block')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          fontSize: \"14px\",\n          children: rewardPerBlock\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CakeStats, \"a6xU0BUjqX0eLDaI9nVf6dUMMO8=\", false, function () {\n  return [useTranslation, useTotalSupply, useBurnedBalance, usePriceCakeBusd, useFarms];\n});\n\n_c3 = CakeStats;\nexport default CakeStats;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"StyledCakeStats\");\n$RefreshReg$(_c2, \"Row\");\n$RefreshReg$(_c3, \"CakeStats\");","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Home/components/CakeStats.tsx"],"names":["React","Card","CardBody","Text","Heading","styled","getBalanceNumber","useTotalSupply","useBurnedBalance","useFarms","usePriceCakeBusd","getCakeAddress","useTranslation","CardValue","StyledCakeStats","Row","div","CakeStats","t","totalSupply","burnedBalance","totalMinted","cakeSupply","NNPriceBusd","mcap","isNaN","times","farms","console","log","rewardPerBlock","data","lokipersecond"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Card, CardBody, Text, Heading } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const totalMinted = totalSupply ? getBalanceNumber(totalSupply) : 0\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n  const NNPriceBusd = usePriceCakeBusd()\r\n  const mcap = NNPriceBusd.isNaN() ? 0 : getBalanceNumber(NNPriceBusd.times(cakeSupply).times(1000000000))\r\n  const farms = useFarms()\r\n  console.log('log->farms', farms);\r\n  const rewardPerBlock = farms && farms.data ? farms.data[0].lokipersecond : 0\r\n\r\n  \r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('LOKI Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={mcap} decimals={2} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={totalMinted} decimals={0} />}  \r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={burnedBalance} decimals={0} />    \r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}       \r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Rewards LOKI/block')}</Text>\r\n          <Text fontSize=\"14px\">{rewardPerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n"]},"metadata":{},"sourceType":"module"}