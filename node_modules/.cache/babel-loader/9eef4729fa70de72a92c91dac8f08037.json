{"ast":null,"code":"import _slicedToArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from'react';/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */var useDelayedUnmount=function useDelayedUnmount(isMounted,delayTime){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),shouldRender=_useState2[0],setShouldRender=_useState2[1];useEffect(function(){var timeoutId;if(isMounted&&!shouldRender){setShouldRender(true);}else if(!isMounted&&shouldRender){timeoutId=setTimeout(function(){return setShouldRender(false);},delayTime);}return function(){return clearTimeout(timeoutId);};},[isMounted,delayTime,shouldRender]);return shouldRender;};export default useDelayedUnmount;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/hooks/useDelayedUnmount.ts"],"names":["useState","useEffect","useDelayedUnmount","isMounted","delayTime","shouldRender","setShouldRender","timeoutId","setTimeout","clearTimeout"],"mappings":"0JAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACC,SAAD,CAAqBC,SAArB,CAA2C,CACnE,cAAwCJ,QAAQ,CAAC,KAAD,CAAhD,wCAAOK,YAAP,eAAqBC,eAArB,eAEAL,SAAS,CAAC,UAAM,CACd,GAAIM,CAAAA,SAAJ,CACA,GAAIJ,SAAS,EAAI,CAACE,YAAlB,CAAgC,CAC9BC,eAAe,CAAC,IAAD,CAAf,CACD,CAFD,IAEO,IAAI,CAACH,SAAD,EAAcE,YAAlB,CAAgC,CACrCE,SAAS,CAAGC,UAAU,CAAC,iBAAMF,CAAAA,eAAe,CAAC,KAAD,CAArB,EAAD,CAA+BF,SAA/B,CAAtB,CACD,CACD,MAAO,kBAAMK,CAAAA,YAAY,CAACF,SAAD,CAAlB,EAAP,CACD,CARQ,CAQN,CAACJ,SAAD,CAAYC,SAAZ,CAAuBC,YAAvB,CARM,CAAT,CASA,MAAOA,CAAAA,YAAP,CACD,CAbD,CAeA,cAAeH,CAAAA,iBAAf","sourcesContent":["import { useState, useEffect } from 'react'\r\n\r\n/**\r\n * Use this hook when you want to animate something when it appears on the screen (e.g. when some prop set to true)\r\n * but when its not on the screen you want it to be fully unmounted and not just hidden or height 0.\r\n * This is especially useful when you have a table of 100s rows and each row has expandable element that appears on click.\r\n * If you just set the expanding animation while keeping inactive elements mounted all those 100 elements will load the DOM,\r\n * and if they all receive updates via props you're looking at 100 DOM updates for hidden elements.\r\n * This hook \"shows\" element immediately when the isMounted is true\r\n * but keeps element mounted for delayTime to let unmounting animation happen, after which you unmount element completely.\r\n * delayTime should be the same as animation time in most cases.\r\n */\r\nconst useDelayedUnmount = (isMounted: boolean, delayTime: number) => {\r\n  const [shouldRender, setShouldRender] = useState(false)\r\n\r\n  useEffect(() => {\r\n    let timeoutId: ReturnType<typeof setTimeout>\r\n    if (isMounted && !shouldRender) {\r\n      setShouldRender(true)\r\n    } else if (!isMounted && shouldRender) {\r\n      timeoutId = setTimeout(() => setShouldRender(false), delayTime)\r\n    }\r\n    return () => clearTimeout(timeoutId)\r\n  }, [isMounted, delayTime, shouldRender])\r\n  return shouldRender\r\n}\r\n\r\nexport default useDelayedUnmount\r\n"]},"metadata":{},"sourceType":"module"}