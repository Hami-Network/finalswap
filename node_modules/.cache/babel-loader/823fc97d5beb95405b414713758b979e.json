{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _objectSpread from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createAsyncThunk,createSlice}from'@reduxjs/toolkit';import farmsConfig from'config/constants/farms';import isArchivedPid from'utils/farmHelpers';import priceHelperLpsConfig from'config/constants/priceHelperLps';import fetchFarms from'./fetchFarms';import fetchFarmsPrices from'./fetchFarmsPrices';import{fetchFarmUserEarnings,fetchFarmUserAllowances,fetchFarmUserTokenBalances,fetchFarmUserStakedBalances}from'./fetchFarmUser';var noAccountFarmConfig=farmsConfig.map(function(farm){return _objectSpread(_objectSpread({},farm),{},{userData:{allowance:'0',tokenBalance:'0',stakedBalance:'0',earnings:'0'}});});var initialState={data:noAccountFarmConfig,loadArchivedFarmsData:false,userDataLoaded:false};export var nonArchivedFarms=farmsConfig.filter(function(_ref){var pid=_ref.pid;return!isArchivedPid(pid);});// Async thunks\nexport var fetchFarmsPublicDataAsync=createAsyncThunk('farms/fetchFarmsPublicDataAsync',/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(pids){var farmsToFetch,farmsWithPriceHelpers,farms,farmsWithPrices,farmsWithoutHelperLps;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:farmsToFetch=farmsConfig.filter(function(farmConfig){return pids.includes(farmConfig.pid);});// Add price helper farms\nfarmsWithPriceHelpers=farmsToFetch.concat(priceHelperLpsConfig);_context.next=4;return fetchFarms(farmsWithPriceHelpers);case 4:farms=_context.sent;_context.next=7;return fetchFarmsPrices(farms);case 7:farmsWithPrices=_context.sent;// Filter out price helper LP config farms\nfarmsWithoutHelperLps=farmsWithPrices.filter(function(farm){return farm.pid||farm.pid===0;});return _context.abrupt(\"return\",farmsWithoutHelperLps);case 10:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref2.apply(this,arguments);};}());export var fetchFarmUserDataAsync=createAsyncThunk('farms/fetchFarmUserDataAsync',/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref3){var account,pids,farmsToFetch,userFarmAllowances,userFarmTokenBalances,userStakedBalances,userFarmEarnings;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:account=_ref3.account,pids=_ref3.pids;farmsToFetch=farmsConfig.filter(function(farmConfig){return pids.includes(farmConfig.pid);});_context2.next=4;return fetchFarmUserAllowances(account,farmsToFetch);case 4:userFarmAllowances=_context2.sent;_context2.next=7;return fetchFarmUserTokenBalances(account,farmsToFetch);case 7:userFarmTokenBalances=_context2.sent;_context2.next=10;return fetchFarmUserStakedBalances(account,farmsToFetch);case 10:userStakedBalances=_context2.sent;_context2.next=13;return fetchFarmUserEarnings(account,farmsToFetch);case 13:userFarmEarnings=_context2.sent;return _context2.abrupt(\"return\",userFarmAllowances.map(function(farmAllowance,index){return{pid:farmsToFetch[index].pid,allowance:userFarmAllowances[index],tokenBalance:userFarmTokenBalances[index],stakedBalance:userStakedBalances[index],earnings:userFarmEarnings[index],isabletoharvest:true};}));case 15:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref4.apply(this,arguments);};}());export var farmsSlice=createSlice({name:'Farms',initialState:initialState,reducers:{setLoadArchivedFarmsData:function setLoadArchivedFarmsData(state,action){var loadArchivedFarmsData=action.payload;state.loadArchivedFarmsData=loadArchivedFarmsData;}},extraReducers:function extraReducers(builder){// Update farms with live data\nbuilder.addCase(fetchFarmsPublicDataAsync.fulfilled,function(state,action){state.data=state.data.map(function(farm){var liveFarmData=action.payload.find(function(farmData){return farmData.pid===farm.pid;});return _objectSpread(_objectSpread({},farm),liveFarmData);});});// Update farms with user data\nbuilder.addCase(fetchFarmUserDataAsync.fulfilled,function(state,action){action.payload.forEach(function(userDataEl){var pid=userDataEl.pid;var index=state.data.findIndex(function(farm){return farm.pid===pid;});state.data[index]=_objectSpread(_objectSpread({},state.data[index]),{},{userData:userDataEl});});state.userDataLoaded=true;});}});// Actions\nvar setLoadArchivedFarmsData=farmsSlice.actions.setLoadArchivedFarmsData;export{setLoadArchivedFarmsData};export default farmsSlice.reducer;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/farms/index.ts"],"names":["createAsyncThunk","createSlice","farmsConfig","isArchivedPid","priceHelperLpsConfig","fetchFarms","fetchFarmsPrices","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","noAccountFarmConfig","map","farm","userData","allowance","tokenBalance","stakedBalance","earnings","initialState","data","loadArchivedFarmsData","userDataLoaded","nonArchivedFarms","filter","pid","fetchFarmsPublicDataAsync","pids","farmsToFetch","farmConfig","includes","farmsWithPriceHelpers","concat","farms","farmsWithPrices","farmsWithoutHelperLps","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","index","isabletoharvest","farmsSlice","name","reducers","setLoadArchivedFarmsData","state","action","payload","extraReducers","builder","addCase","fulfilled","liveFarmData","find","farmData","forEach","userDataEl","findIndex","actions","reducer"],"mappings":"0cAAA,OAASA,gBAAT,CAA2BC,WAA3B,KAA8C,kBAA9C,CACA,MAAOC,CAAAA,WAAP,KAAwB,wBAAxB,CACA,MAAOC,CAAAA,aAAP,KAA0B,mBAA1B,CACA,MAAOC,CAAAA,oBAAP,KAAiC,iCAAjC,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,oBAA7B,CACA,OACEC,qBADF,CAEEC,uBAFF,CAGEC,0BAHF,CAIEC,2BAJF,KAKO,iBALP,CAQA,GAAMC,CAAAA,mBAAmB,CAAGT,WAAW,CAACU,GAAZ,CAAgB,SAACC,IAAD,wCACvCA,IADuC,MAE1CC,QAAQ,CAAE,CACRC,SAAS,CAAE,GADH,CAERC,YAAY,CAAE,GAFN,CAGRC,aAAa,CAAE,GAHP,CAIRC,QAAQ,CAAE,GAJF,CAFgC,IAAhB,CAA5B,CAUA,GAAMC,CAAAA,YAAwB,CAAG,CAAEC,IAAI,CAAET,mBAAR,CAA6BU,qBAAqB,CAAE,KAApD,CAA2DC,cAAc,CAAE,KAA3E,CAAjC,CAEA,MAAO,IAAMC,CAAAA,gBAAgB,CAAGrB,WAAW,CAACsB,MAAZ,CAAmB,kBAAGC,CAAAA,GAAH,MAAGA,GAAH,OAAa,CAACtB,aAAa,CAACsB,GAAD,CAA3B,EAAnB,CAAzB,CAEP;AACA,MAAO,IAAMC,CAAAA,yBAAyB,CAAG1B,gBAAgB,CACvD,iCADuD,2FAEvD,iBAAO2B,IAAP,qMACQC,YADR,CACuB1B,WAAW,CAACsB,MAAZ,CAAmB,SAACK,UAAD,QAAgBF,CAAAA,IAAI,CAACG,QAAL,CAAcD,UAAU,CAACJ,GAAzB,CAAhB,EAAnB,CADvB,CAGE;AACMM,qBAJR,CAIgCH,YAAY,CAACI,MAAb,CAAoB5B,oBAApB,CAJhC,uBAMsBC,CAAAA,UAAU,CAAC0B,qBAAD,CANhC,QAMQE,KANR,qCAOgC3B,CAAAA,gBAAgB,CAAC2B,KAAD,CAPhD,QAOQC,eAPR,eASE;AACMC,qBAVR,CAUgCD,eAAe,CAACV,MAAhB,CAAuB,SAACX,IAAD,CAAgB,CACnE,MAAOA,CAAAA,IAAI,CAACY,GAAL,EAAYZ,IAAI,CAACY,GAAL,GAAa,CAAhC,CACD,CAF6B,CAVhC,iCAcSU,qBAdT,yDAFuD,gEAAlD,CA4BP,MAAO,IAAMC,CAAAA,sBAAsB,CAAGpC,gBAAgB,CACpD,8BADoD,2FAEpD,wPAASqC,OAAT,OAASA,OAAT,CAAkBV,IAAlB,OAAkBA,IAAlB,CACQC,YADR,CACuB1B,WAAW,CAACsB,MAAZ,CAAmB,SAACK,UAAD,QAAgBF,CAAAA,IAAI,CAACG,QAAL,CAAcD,UAAU,CAACJ,GAAzB,CAAhB,EAAnB,CADvB,wBAEmCjB,CAAAA,uBAAuB,CAAC6B,OAAD,CAAUT,YAAV,CAF1D,QAEQU,kBAFR,uCAGsC7B,CAAAA,0BAA0B,CAAC4B,OAAD,CAAUT,YAAV,CAHhE,QAGQW,qBAHR,wCAImC7B,CAAAA,2BAA2B,CAAC2B,OAAD,CAAUT,YAAV,CAJ9D,SAIQY,kBAJR,wCAKiCjC,CAAAA,qBAAqB,CAAC8B,OAAD,CAAUT,YAAV,CALtD,SAKQa,gBALR,iDAMSH,kBAAkB,CAAC1B,GAAnB,CAAuB,SAAC8B,aAAD,CAAgBC,KAAhB,CAA0B,CACtD,MAAO,CACLlB,GAAG,CAAEG,YAAY,CAACe,KAAD,CAAZ,CAAoBlB,GADpB,CAELV,SAAS,CAAEuB,kBAAkB,CAACK,KAAD,CAFxB,CAGL3B,YAAY,CAAEuB,qBAAqB,CAACI,KAAD,CAH9B,CAIL1B,aAAa,CAAEuB,kBAAkB,CAACG,KAAD,CAJ5B,CAKLzB,QAAQ,CAAEuB,gBAAgB,CAACE,KAAD,CALrB,CAMLC,eAAe,CAAE,IANZ,CAAP,CAQD,CATM,CANT,2DAFoD,iEAA/C,CAqBP,MAAO,IAAMC,CAAAA,UAAU,CAAG5C,WAAW,CAAC,CACpC6C,IAAI,CAAE,OAD8B,CAEpC3B,YAAY,CAAZA,YAFoC,CAGpC4B,QAAQ,CAAE,CACRC,wBAAwB,CAAE,kCAACC,KAAD,CAAQC,MAAR,CAAmB,CAC3C,GAAM7B,CAAAA,qBAAqB,CAAG6B,MAAM,CAACC,OAArC,CACAF,KAAK,CAAC5B,qBAAN,CAA8BA,qBAA9B,CACD,CAJO,CAH0B,CASpC+B,aAAa,CAAE,uBAACC,OAAD,CAAa,CAC1B;AACAA,OAAO,CAACC,OAAR,CAAgB5B,yBAAyB,CAAC6B,SAA1C,CAAqD,SAACN,KAAD,CAAQC,MAAR,CAAmB,CACtED,KAAK,CAAC7B,IAAN,CAAa6B,KAAK,CAAC7B,IAAN,CAAWR,GAAX,CAAe,SAACC,IAAD,CAAU,CACpC,GAAM2C,CAAAA,YAAY,CAAGN,MAAM,CAACC,OAAP,CAAeM,IAAf,CAAoB,SAACC,QAAD,QAAcA,CAAAA,QAAQ,CAACjC,GAAT,GAAiBZ,IAAI,CAACY,GAApC,EAApB,CAArB,CACA,sCAAYZ,IAAZ,EAAqB2C,YAArB,EACD,CAHY,CAAb,CAID,CALD,EAOA;AACAH,OAAO,CAACC,OAAR,CAAgBlB,sBAAsB,CAACmB,SAAvC,CAAkD,SAACN,KAAD,CAAQC,MAAR,CAAmB,CACnEA,MAAM,CAACC,OAAP,CAAeQ,OAAf,CAAuB,SAACC,UAAD,CAAgB,CACrC,GAAQnC,CAAAA,GAAR,CAAgBmC,UAAhB,CAAQnC,GAAR,CACA,GAAMkB,CAAAA,KAAK,CAAGM,KAAK,CAAC7B,IAAN,CAAWyC,SAAX,CAAqB,SAAChD,IAAD,QAAUA,CAAAA,IAAI,CAACY,GAAL,GAAaA,GAAvB,EAArB,CAAd,CACAwB,KAAK,CAAC7B,IAAN,CAAWuB,KAAX,iCAAyBM,KAAK,CAAC7B,IAAN,CAAWuB,KAAX,CAAzB,MAA4C7B,QAAQ,CAAE8C,UAAtD,GACD,CAJD,EAKAX,KAAK,CAAC3B,cAAN,CAAuB,IAAvB,CACD,CAPD,EAQD,CA3BmC,CAAD,CAA9B,CA8BP;AACO,GAAQ0B,CAAAA,wBAAR,CAAqCH,UAAU,CAACiB,OAAhD,CAAQd,wBAAR,C,iCAEP,cAAeH,CAAAA,UAAU,CAACkB,OAA1B","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport priceHelperLpsConfig from 'config/constants/priceHelperLps'\r\nimport fetchFarms from './fetchFarms'\r\nimport fetchFarmsPrices from './fetchFarmsPrices'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst noAccountFarmConfig = farmsConfig.map((farm) => ({\r\n  ...farm,\r\n  userData: {\r\n    allowance: '0',\r\n    tokenBalance: '0',\r\n    stakedBalance: '0',\r\n    earnings: '0',\r\n  },\r\n}))\r\n\r\nconst initialState: FarmsState = { data: noAccountFarmConfig, loadArchivedFarmsData: false, userDataLoaded: false }\r\n\r\nexport const nonArchivedFarms = farmsConfig.filter(({ pid }) => !isArchivedPid(pid))\r\n\r\n// Async thunks\r\nexport const fetchFarmsPublicDataAsync = createAsyncThunk<Farm[], number[]>(\r\n  'farms/fetchFarmsPublicDataAsync',\r\n  async (pids) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n\r\n    // Add price helper farms\r\n    const farmsWithPriceHelpers = farmsToFetch.concat(priceHelperLpsConfig)\r\n\r\n    const farms = await fetchFarms(farmsWithPriceHelpers)\r\n    const farmsWithPrices = await fetchFarmsPrices(farms)\r\n\r\n    // Filter out price helper LP config farms\r\n    const farmsWithoutHelperLps = farmsWithPrices.filter((farm: Farm) => {\r\n      return farm.pid || farm.pid === 0\r\n    })\r\n\r\n    return farmsWithoutHelperLps\r\n  },\r\n)\r\n\r\ninterface FarmUserDataResponse {\r\n  pid: number\r\n  allowance: string\r\n  tokenBalance: string\r\n  stakedBalance: string\r\n  earnings: string\r\n}\r\n\r\nexport const fetchFarmUserDataAsync = createAsyncThunk<FarmUserDataResponse[], { account: string; pids: number[] }>(\r\n  'farms/fetchFarmUserDataAsync',\r\n  async ({ account, pids }) => {\r\n    const farmsToFetch = farmsConfig.filter((farmConfig) => pids.includes(farmConfig.pid))\r\n    const userFarmAllowances = await fetchFarmUserAllowances(account, farmsToFetch)\r\n    const userFarmTokenBalances = await fetchFarmUserTokenBalances(account, farmsToFetch)\r\n    const userStakedBalances = await fetchFarmUserStakedBalances(account, farmsToFetch)\r\n    const userFarmEarnings = await fetchFarmUserEarnings(account, farmsToFetch)\r\n    return userFarmAllowances.map((farmAllowance, index) => {\r\n      return {\r\n        pid: farmsToFetch[index].pid,\r\n        allowance: userFarmAllowances[index],\r\n        tokenBalance: userFarmTokenBalances[index],\r\n        stakedBalance: userStakedBalances[index],\r\n        earnings: userFarmEarnings[index],\r\n        isabletoharvest: true,\r\n      }\r\n    })\r\n  },\r\n)\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setLoadArchivedFarmsData: (state, action) => {\r\n      const loadArchivedFarmsData = action.payload\r\n      state.loadArchivedFarmsData = loadArchivedFarmsData\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    // Update farms with live data\r\n    builder.addCase(fetchFarmsPublicDataAsync.fulfilled, (state, action) => {\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = action.payload.find((farmData) => farmData.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    })\r\n\r\n    // Update farms with user data\r\n    builder.addCase(fetchFarmUserDataAsync.fulfilled, (state, action) => {\r\n      action.payload.forEach((userDataEl) => {\r\n        const { pid } = userDataEl\r\n        const index = state.data.findIndex((farm) => farm.pid === pid)\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n      state.userDataLoaded = true\r\n    })\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setLoadArchivedFarmsData } = farmsSlice.actions\r\n\r\nexport default farmsSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}