{"ast":null,"code":"import _slicedToArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import BigNumber from'bignumber.js';import{ethers}from'ethers';import{formatUnits}from'ethers/lib/utils';import{getLanguageCodeFromLS}from'contexts/Localization/helpers';import{BIG_TEN}from'./bigNumber';/**\r\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\r\n */export var getDecimalAmount=function getDecimalAmount(amount){var decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:18;return new BigNumber(amount).times(BIG_TEN.pow(decimals));};export var getBalanceAmount=function getBalanceAmount(amount){var decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:18;return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals));};/**\r\n * This function is not really necessary but is used throughout the site.\r\n */export var getBalanceNumber=function getBalanceNumber(balance){var decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:18;return getBalanceAmount(balance,decimals).toNumber();};export var getFullDisplayBalance=function getFullDisplayBalance(balance){var decimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:18;var displayDecimals=arguments.length>2?arguments[2]:undefined;return getBalanceAmount(balance,decimals).toFixed(displayDecimals);};export var formatNumber=function formatNumber(number){var minPrecision=arguments.length>1&&arguments[1]!==undefined?arguments[1]:2;var maxPrecision=arguments.length>2&&arguments[2]!==undefined?arguments[2]:2;var options={minimumFractionDigits:minPrecision,maximumFractionDigits:maxPrecision};return number.toLocaleString(undefined,options);};/**\r\n * Method to format the display of wei given an ethers.BigNumber object\r\n * Note: does NOT round\r\n */export var formatBigNumber=function formatBigNumber(number){var displayDecimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:18;var decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:18;var remainder=number.mod(ethers.BigNumber.from(10).pow(decimals-displayDecimals));return formatUnits(number.sub(remainder),decimals);};/**\r\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\r\n * Note: rounds\r\n */export var formatBigNumberToFixed=function formatBigNumberToFixed(number){var displayDecimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:18;var decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:18;var formattedString=formatUnits(number,decimals);return(+formattedString).toFixed(displayDecimals);};/**\r\n * Formats a FixedNumber like BigNumber\r\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\r\n */export var formatFixedNumber=function formatFixedNumber(number){var displayDecimals=arguments.length>1&&arguments[1]!==undefined?arguments[1]:18;var decimals=arguments.length>2&&arguments[2]!==undefined?arguments[2]:18;// Remove decimal\nvar _number$toString$spli=number.toString().split('.'),_number$toString$spli2=_slicedToArray(_number$toString$spli,1),leftSide=_number$toString$spli2[0];return formatBigNumber(ethers.BigNumber.from(leftSide),displayDecimals,decimals);};export var formatLocalisedCompactNumber=function formatLocalisedCompactNumber(number){var codeFromStorage=getLanguageCodeFromLS();return new Intl.NumberFormat(codeFromStorage,{notation:'compact',compactDisplay:'long',maximumSignificantDigits:2}).format(number);};export default formatLocalisedCompactNumber;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/utils/formatBalance.ts"],"names":["BigNumber","ethers","formatUnits","getLanguageCodeFromLS","BIG_TEN","getDecimalAmount","amount","decimals","times","pow","getBalanceAmount","dividedBy","getBalanceNumber","balance","toNumber","getFullDisplayBalance","displayDecimals","toFixed","formatNumber","number","minPrecision","maxPrecision","options","minimumFractionDigits","maximumFractionDigits","toLocaleString","undefined","formatBigNumber","remainder","mod","from","sub","formatBigNumberToFixed","formattedString","formatFixedNumber","toString","split","leftSide","formatLocalisedCompactNumber","codeFromStorage","Intl","NumberFormat","notation","compactDisplay","maximumSignificantDigits","format"],"mappings":"0JAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAASC,WAAT,KAA4B,kBAA5B,CACA,OAASC,qBAAT,KAAsC,+BAAtC,CACA,OAASC,OAAT,KAAwB,aAAxB,CAEA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,MAAD,CAAsC,IAAlBC,CAAAA,QAAkB,2DAAP,EAAO,CACpE,MAAO,IAAIP,CAAAA,SAAJ,CAAcM,MAAd,EAAsBE,KAAtB,CAA4BJ,OAAO,CAACK,GAAR,CAAYF,QAAZ,CAA5B,CAAP,CACD,CAFM,CAIP,MAAO,IAAMG,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACJ,MAAD,CAAsC,IAAlBC,CAAAA,QAAkB,2DAAP,EAAO,CACpE,MAAO,IAAIP,CAAAA,SAAJ,CAAcM,MAAd,EAAsBK,SAAtB,CAAgCP,OAAO,CAACK,GAAR,CAAYF,QAAZ,CAAhC,CAAP,CACD,CAFM,CAIP;AACA;AACA,GACA,MAAO,IAAMK,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,OAAD,CAAuC,IAAlBN,CAAAA,QAAkB,2DAAP,EAAO,CACrE,MAAOG,CAAAA,gBAAgB,CAACG,OAAD,CAAUN,QAAV,CAAhB,CAAoCO,QAApC,EAAP,CACD,CAFM,CAIP,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,CAACF,OAAD,CAAiE,IAA5CN,CAAAA,QAA4C,2DAAjC,EAAiC,IAA7BS,CAAAA,eAA6B,2CACpG,MAAON,CAAAA,gBAAgB,CAACG,OAAD,CAAUN,QAAV,CAAhB,CAAoCU,OAApC,CAA4CD,eAA5C,CAAP,CACD,CAFM,CAIP,MAAO,IAAME,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,MAAD,CAAwD,IAAvCC,CAAAA,YAAuC,2DAAxB,CAAwB,IAArBC,CAAAA,YAAqB,2DAAN,CAAM,CAClF,GAAMC,CAAAA,OAAO,CAAG,CACdC,qBAAqB,CAAEH,YADT,CAEdI,qBAAqB,CAAEH,YAFT,CAAhB,CAIA,MAAOF,CAAAA,MAAM,CAACM,cAAP,CAAsBC,SAAtB,CAAiCJ,OAAjC,CAAP,CACD,CANM,CAQP;AACA;AACA;AACA,GACA,MAAO,IAAMK,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACR,MAAD,CAAmE,IAAxCH,CAAAA,eAAwC,2DAAtB,EAAsB,IAAlBT,CAAAA,QAAkB,2DAAP,EAAO,CAChG,GAAMqB,CAAAA,SAAS,CAAGT,MAAM,CAACU,GAAP,CAAW5B,MAAM,CAACD,SAAP,CAAiB8B,IAAjB,CAAsB,EAAtB,EAA0BrB,GAA1B,CAA8BF,QAAQ,CAAGS,eAAzC,CAAX,CAAlB,CACA,MAAOd,CAAAA,WAAW,CAACiB,MAAM,CAACY,GAAP,CAAWH,SAAX,CAAD,CAAwBrB,QAAxB,CAAlB,CACD,CAHM,CAKP;AACA;AACA;AACA,GACA,MAAO,IAAMyB,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,CAACb,MAAD,CAAmE,IAAxCH,CAAAA,eAAwC,2DAAtB,EAAsB,IAAlBT,CAAAA,QAAkB,2DAAP,EAAO,CACvG,GAAM0B,CAAAA,eAAe,CAAG/B,WAAW,CAACiB,MAAD,CAASZ,QAAT,CAAnC,CACA,MAAO,CAAC,CAAC0B,eAAF,EAAmBhB,OAAnB,CAA2BD,eAA3B,CAAP,CACD,CAHM,CAKP;AACA;AACA;AACA,GACA,MAAO,IAAMkB,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACf,MAAD,CAAqE,IAAxCH,CAAAA,eAAwC,2DAAtB,EAAsB,IAAlBT,CAAAA,QAAkB,2DAAP,EAAO,CACpG;AACA,0BAAmBY,MAAM,CAACgB,QAAP,GAAkBC,KAAlB,CAAwB,GAAxB,CAAnB,gEAAOC,QAAP,2BACA,MAAOV,CAAAA,eAAe,CAAC1B,MAAM,CAACD,SAAP,CAAiB8B,IAAjB,CAAsBO,QAAtB,CAAD,CAAkCrB,eAAlC,CAAmDT,QAAnD,CAAtB,CACD,CAJM,CAMP,MAAO,IAAM+B,CAAAA,4BAA4B,CAAG,QAA/BA,CAAAA,4BAA+B,CAACnB,MAAD,CAA4B,CACtE,GAAMoB,CAAAA,eAAe,CAAGpC,qBAAqB,EAA7C,CACA,MAAO,IAAIqC,CAAAA,IAAI,CAACC,YAAT,CAAsBF,eAAtB,CAAuC,CAC5CG,QAAQ,CAAE,SADkC,CAE5CC,cAAc,CAAE,MAF4B,CAG5CC,wBAAwB,CAAE,CAHkB,CAAvC,EAIJC,MAJI,CAIG1B,MAJH,CAAP,CAKD,CAPM,CASP,cAAemB,CAAAA,4BAAf","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { formatUnits } from 'ethers/lib/utils'\r\nimport { getLanguageCodeFromLS } from 'contexts/Localization/helpers'\r\nimport { BIG_TEN } from './bigNumber'\r\n\r\n/**\r\n * Take a formatted amount, e.g. 15 BNB and convert it to full decimal value, e.g. 15000000000000000\r\n */\r\nexport const getDecimalAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).times(BIG_TEN.pow(decimals))\r\n}\r\n\r\nexport const getBalanceAmount = (amount: BigNumber, decimals = 18) => {\r\n  return new BigNumber(amount).dividedBy(BIG_TEN.pow(decimals))\r\n}\r\n\r\n/**\r\n * This function is not really necessary but is used throughout the site.\r\n */\r\nexport const getBalanceNumber = (balance: BigNumber, decimals = 18) => {\r\n  return getBalanceAmount(balance, decimals).toNumber()\r\n}\r\n\r\nexport const getFullDisplayBalance = (balance: BigNumber, decimals = 18, displayDecimals?: number) => {\r\n  return getBalanceAmount(balance, decimals).toFixed(displayDecimals)\r\n}\r\n\r\nexport const formatNumber = (number: number, minPrecision = 2, maxPrecision = 2) => {\r\n  const options = {\r\n    minimumFractionDigits: minPrecision,\r\n    maximumFractionDigits: maxPrecision,\r\n  }\r\n  return number.toLocaleString(undefined, options)\r\n}\r\n\r\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object\r\n * Note: does NOT round\r\n */\r\nexport const formatBigNumber = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\r\n  const remainder = number.mod(ethers.BigNumber.from(10).pow(decimals - displayDecimals))\r\n  return formatUnits(number.sub(remainder), decimals)\r\n}\r\n\r\n/**\r\n * Method to format the display of wei given an ethers.BigNumber object with toFixed\r\n * Note: rounds\r\n */\r\nexport const formatBigNumberToFixed = (number: ethers.BigNumber, displayDecimals = 18, decimals = 18) => {\r\n  const formattedString = formatUnits(number, decimals)\r\n  return (+formattedString).toFixed(displayDecimals)\r\n}\r\n\r\n/**\r\n * Formats a FixedNumber like BigNumber\r\n * i.e. Formats 9763410526137450427.1196 into 9.763 (3 display decimals)\r\n */\r\nexport const formatFixedNumber = (number: ethers.FixedNumber, displayDecimals = 18, decimals = 18) => {\r\n  // Remove decimal\r\n  const [leftSide] = number.toString().split('.')\r\n  return formatBigNumber(ethers.BigNumber.from(leftSide), displayDecimals, decimals)\r\n}\r\n\r\nexport const formatLocalisedCompactNumber = (number: number): string => {\r\n  const codeFromStorage = getLanguageCodeFromLS()\r\n  return new Intl.NumberFormat(codeFromStorage, {\r\n    notation: 'compact',\r\n    compactDisplay: 'long',\r\n    maximumSignificantDigits: 2,\r\n  }).format(number)\r\n}\r\n\r\nexport default formatLocalisedCompactNumber\r\n"]},"metadata":{},"sourceType":"module"}