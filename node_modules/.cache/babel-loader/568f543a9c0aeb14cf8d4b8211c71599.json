{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import Cookies from'js-cookie';import{getProfileContract}from'utils/contractHelpers';import{getNftByTokenId}from'utils/collectibles';import{getTeam}from'state/teams/helpers';import{transformProfileResponse}from'./helpers';var profileContract=getProfileContract();var profileApi=process.env.REACT_APP_API_PROFILE;var getUsername=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(address){var response,_yield$response$json,_yield$response$json$,username;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return fetch(\"\".concat(profileApi,\"/api/users/\").concat(address));case 3:response=_context.sent;if(response.ok){_context.next=6;break;}return _context.abrupt(\"return\",'');case 6:_context.next=8;return response.json();case 8:_yield$response$json=_context.sent;_yield$response$json$=_yield$response$json.username;username=_yield$response$json$===void 0?'':_yield$response$json$;return _context.abrupt(\"return\",username);case 14:_context.prev=14;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",'');case 17:case\"end\":return _context.stop();}}},_callee,null,[[0,14]]);}));return function getUsername(_x){return _ref.apply(this,arguments);};}();var getProfile=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(address){var hasRegistered,profileResponse,_transformProfileResp,userId,points,teamId,tokenId,nftAddress,isActive,team,username,nft,_nft,profile;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return profileContract.hasRegistered(address);case 3:hasRegistered=_context2.sent;if(hasRegistered){_context2.next=6;break;}return _context2.abrupt(\"return\",{hasRegistered:hasRegistered,profile:null});case 6:_context2.next=8;return profileContract.getUserProfile(address);case 8:profileResponse=_context2.sent;_transformProfileResp=transformProfileResponse(profileResponse),userId=_transformProfileResp.userId,points=_transformProfileResp.points,teamId=_transformProfileResp.teamId,tokenId=_transformProfileResp.tokenId,nftAddress=_transformProfileResp.nftAddress,isActive=_transformProfileResp.isActive;_context2.next=12;return getTeam(teamId);case 12:team=_context2.sent;_context2.next=15;return getUsername(address);case 15:username=_context2.sent;if(!isActive){_context2.next=21;break;}_context2.next=19;return getNftByTokenId(nftAddress,tokenId);case 19:nft=_context2.sent;// Save the preview image in a cookie so it can be used on the exchange\nCookies.set(\"profile_\".concat(address),{username:username,avatar:\"https://pancakeswap.finance/images/nfts/\".concat((_nft=nft)===null||_nft===void 0?void 0:_nft.images.sm)},{domain:'pancakeswap.finance',secure:true,expires:30});case 21:profile={userId:userId,points:points,teamId:teamId,tokenId:tokenId,username:username,nftAddress:nftAddress,isActive:isActive,nft:nft,team:team};return _context2.abrupt(\"return\",{hasRegistered:hasRegistered,profile:profile});case 25:_context2.prev=25;_context2.t0=_context2[\"catch\"](0);return _context2.abrupt(\"return\",null);case 28:case\"end\":return _context2.stop();}}},_callee2,null,[[0,25]]);}));return function getProfile(_x2){return _ref2.apply(this,arguments);};}();export default getProfile;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/profile/getProfile.ts"],"names":["Cookies","getProfileContract","getNftByTokenId","getTeam","transformProfileResponse","profileContract","profileApi","process","env","REACT_APP_API_PROFILE","getUsername","address","fetch","response","ok","json","username","getProfile","hasRegistered","profile","getUserProfile","profileResponse","userId","points","teamId","tokenId","nftAddress","isActive","team","nft","set","avatar","images","sm","domain","secure","expires"],"mappings":"iTAAA,MAAOA,CAAAA,OAAP,KAAoB,WAApB,CACA,OAASC,kBAAT,KAAmC,uBAAnC,CAEA,OAASC,eAAT,KAAgC,oBAAhC,CAEA,OAASC,OAAT,KAAwB,qBAAxB,CACA,OAASC,wBAAT,KAAyC,WAAzC,CAEA,GAAMC,CAAAA,eAAe,CAAGJ,kBAAkB,EAA1C,CACA,GAAMK,CAAAA,UAAU,CAAGC,OAAO,CAACC,GAAR,CAAYC,qBAA/B,CAOA,GAAMC,CAAAA,WAAW,0FAAG,iBAAOC,OAAP,yNAEOC,CAAAA,KAAK,WAAIN,UAAJ,uBAA4BK,OAA5B,EAFZ,QAEVE,QAFU,kBAIXA,QAAQ,CAACC,EAJE,yDAKP,EALO,+BAQgBD,CAAAA,QAAQ,CAACE,IAAT,EARhB,sFAQRC,QARQ,CAQRA,QARQ,gCAQG,EARH,uDAUTA,QAVS,4FAYT,EAZS,uEAAH,kBAAXN,CAAAA,WAAW,4CAAjB,CAgBA,GAAMO,CAAAA,UAAU,2FAAG,kBAAON,OAAP,sSAEcN,CAAAA,eAAe,CAACa,aAAhB,CAA8BP,OAA9B,CAFd,QAETO,aAFS,mBAIVA,aAJU,2DAKN,CAAEA,aAAa,CAAbA,aAAF,CAAiBC,OAAO,CAAE,IAA1B,CALM,gCAQed,CAAAA,eAAe,CAACe,cAAhB,CAA+BT,OAA/B,CARf,QAQTU,eARS,sCASmDjB,wBAAwB,CAACiB,eAAD,CAT3E,CASPC,MATO,uBASPA,MATO,CASCC,MATD,uBASCA,MATD,CASSC,MATT,uBASSA,MATT,CASiBC,OATjB,uBASiBA,OATjB,CAS0BC,UAT1B,uBAS0BA,UAT1B,CASsCC,QATtC,uBASsCA,QATtC,yBAUIxB,CAAAA,OAAO,CAACqB,MAAD,CAVX,SAUTI,IAVS,wCAWQlB,CAAAA,WAAW,CAACC,OAAD,CAXnB,SAWTK,QAXS,oBAgBXW,QAhBW,mDAiBDzB,CAAAA,eAAe,CAACwB,UAAD,CAAaD,OAAb,CAjBd,SAiBbI,GAjBa,gBAmBb;AACA7B,OAAO,CAAC8B,GAAR,mBACanB,OADb,EAEE,CACEK,QAAQ,CAARA,QADF,CAEEe,MAAM,yDAA6CF,GAA7C,+BAA6C,KAAKG,MAAL,CAAYC,EAAzD,CAFR,CAFF,CAME,CAAEC,MAAM,CAAE,qBAAV,CAAiCC,MAAM,CAAE,IAAzC,CAA+CC,OAAO,CAAE,EAAxD,CANF,EApBa,QA8BTjB,OA9BS,CA8BC,CACdG,MAAM,CAANA,MADc,CAEdC,MAAM,CAANA,MAFc,CAGdC,MAAM,CAANA,MAHc,CAIdC,OAAO,CAAPA,OAJc,CAKdT,QAAQ,CAARA,QALc,CAMdU,UAAU,CAAVA,UANc,CAOdC,QAAQ,CAARA,QAPc,CAQdE,GAAG,CAAHA,GARc,CASdD,IAAI,CAAJA,IATc,CA9BD,kCA0CR,CAAEV,aAAa,CAAbA,aAAF,CAAiBC,OAAO,CAAPA,OAAjB,CA1CQ,gGA4CR,IA5CQ,yEAAH,kBAAVF,CAAAA,UAAU,8CAAhB,CAgDA,cAAeA,CAAAA,UAAf","sourcesContent":["import Cookies from 'js-cookie'\r\nimport { getProfileContract } from 'utils/contractHelpers'\r\nimport { Nft } from 'config/constants/types'\r\nimport { getNftByTokenId } from 'utils/collectibles'\r\nimport { Profile } from 'state/types'\r\nimport { getTeam } from 'state/teams/helpers'\r\nimport { transformProfileResponse } from './helpers'\r\n\r\nconst profileContract = getProfileContract()\r\nconst profileApi = process.env.REACT_APP_API_PROFILE\r\n\r\nexport interface GetProfileResponse {\r\n  hasRegistered: boolean\r\n  profile?: Profile\r\n}\r\n\r\nconst getUsername = async (address: string): Promise<string> => {\r\n  try {\r\n    const response = await fetch(`${profileApi}/api/users/${address}`)\r\n\r\n    if (!response.ok) {\r\n      return ''\r\n    }\r\n\r\n    const { username = '' } = await response.json()\r\n\r\n    return username\r\n  } catch (error) {\r\n    return ''\r\n  }\r\n}\r\n\r\nconst getProfile = async (address: string): Promise<GetProfileResponse> => {\r\n  try {\r\n    const hasRegistered = (await profileContract.hasRegistered(address)) as boolean\r\n\r\n    if (!hasRegistered) {\r\n      return { hasRegistered, profile: null }\r\n    }\r\n\r\n    const profileResponse = await profileContract.getUserProfile(address)\r\n    const { userId, points, teamId, tokenId, nftAddress, isActive } = transformProfileResponse(profileResponse)\r\n    const team = await getTeam(teamId)\r\n    const username = await getUsername(address)\r\n\r\n    // If the profile is not active the tokenId returns 0, which is still a valid token id\r\n    // so only fetch the nft data if active\r\n    let nft: Nft\r\n    if (isActive) {\r\n      nft = await getNftByTokenId(nftAddress, tokenId)\r\n\r\n      // Save the preview image in a cookie so it can be used on the exchange\r\n      Cookies.set(\r\n        `profile_${address}`,\r\n        {\r\n          username,\r\n          avatar: `https://pancakeswap.finance/images/nfts/${nft?.images.sm}`,\r\n        },\r\n        { domain: 'pancakeswap.finance', secure: true, expires: 30 },\r\n      )\r\n    }\r\n\r\n    const profile = {\r\n      userId,\r\n      points,\r\n      teamId,\r\n      tokenId,\r\n      username,\r\n      nftAddress,\r\n      isActive,\r\n      nft,\r\n      team,\r\n    } as Profile\r\n\r\n    return { hasRegistered, profile }\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\nexport default getProfile\r\n"]},"metadata":{},"sourceType":"module"}