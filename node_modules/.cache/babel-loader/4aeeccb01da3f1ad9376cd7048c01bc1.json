{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _objectSpread from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import{BIG_ONE,BIG_ZERO}from'utils/bigNumber';import{filterFarmsByQuoteToken}from'utils/farmsPriceHelpers';var getFarmFromTokenSymbol=function getFarmFromTokenSymbol(farms,tokenSymbol,preferredQuoteTokens){var farmsWithTokenSymbol=farms.filter(function(farm){return farm.token.symbol===tokenSymbol;});var filteredFarm=filterFarmsByQuoteToken(farmsWithTokenSymbol,preferredQuoteTokens);return filteredFarm;};var getFarmBaseTokenPrice=function getFarmBaseTokenPrice(farm,quoteTokenFarm,bnbPriceBusd){var hasTokenPriceVsQuote=Boolean(farm.tokenPriceVsQuote);if(farm.quoteToken.symbol==='BUSD'){return hasTokenPriceVsQuote?new BigNumber(farm.tokenPriceVsQuote):BIG_ZERO;}if(farm.quoteToken.symbol==='USDT'){return hasTokenPriceVsQuote?new BigNumber(farm.tokenPriceVsQuote):BIG_ZERO;}if(farm.quoteToken.symbol==='wBNB'){return hasTokenPriceVsQuote?bnbPriceBusd.times(farm.tokenPriceVsQuote):BIG_ZERO;}// We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\nif(!quoteTokenFarm){return BIG_ZERO;}// Possible alternative farm quoteTokens:\n// UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\n// If the farm's quote token isn't BUSD or wBNB, we then use the quote token, of the original farm's quote token\n// i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\n// from the BNB - pBTC price, we can calculate the PNT - BUSD price\nif(quoteTokenFarm.quoteToken.symbol==='wBNB'){var quoteTokenInBusd=bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote);return hasTokenPriceVsQuote&&quoteTokenInBusd?new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd):BIG_ZERO;}if(quoteTokenFarm.quoteToken.symbol==='BUSD'){var _quoteTokenInBusd=quoteTokenFarm.tokenPriceVsQuote;return hasTokenPriceVsQuote&&_quoteTokenInBusd?new BigNumber(farm.tokenPriceVsQuote).times(_quoteTokenInBusd):BIG_ZERO;}// if (quoteTokenFarm.quoteToken.symbol === 'USDT') {\n//   const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\n//   return hasTokenPriceVsQuote && quoteTokenInBusd\n//     ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\n//     : BIG_ZERO\n// }\n// Catch in case token does not have immediate or once-removed BUSD/wBNB quoteToken\nreturn BIG_ZERO;};var getFarmQuoteTokenPrice=function getFarmQuoteTokenPrice(farm,quoteTokenFarm,bnbPriceBusd){if(farm.quoteToken.symbol==='BUSD'||farm.quoteToken.symbol==='USDT'||farm.quoteToken.symbol==='USDC'){return BIG_ONE;}if(farm.quoteToken.symbol==='wBNB'){return bnbPriceBusd;}if(!quoteTokenFarm){return BIG_ZERO;}if(quoteTokenFarm.quoteToken.symbol==='wBNB'){return quoteTokenFarm.tokenPriceVsQuote?bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote):BIG_ZERO;}if(quoteTokenFarm.quoteToken.symbol==='BUSD'){return quoteTokenFarm.tokenPriceVsQuote?new BigNumber(quoteTokenFarm.tokenPriceVsQuote):BIG_ZERO;}// if (quoteTokenFarm.quoteToken.symbol === 'USDT') {\n//   return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\n// }\nreturn BIG_ZERO;};var fetchFarmsPrices=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(farms){var bnbBusdFarm,bnbPriceBusd,farmsWithPrices;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:bnbBusdFarm=farms.find(function(farm){return farm.pid===3;});/* BNB-BUSD pool pid */bnbPriceBusd=bnbBusdFarm.tokenPriceVsQuote?BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote):BIG_ZERO;farmsWithPrices=farms.map(function(farm){var quoteTokenFarm=getFarmFromTokenSymbol(farms,farm.quoteToken.symbol);var baseTokenPrice=getFarmBaseTokenPrice(farm,quoteTokenFarm,bnbPriceBusd);var quoteTokenPrice=getFarmQuoteTokenPrice(farm,quoteTokenFarm,bnbPriceBusd);var token=_objectSpread(_objectSpread({},farm.token),{},{busdPrice:baseTokenPrice.toJSON()});var quoteToken=_objectSpread(_objectSpread({},farm.quoteToken),{},{busdPrice:quoteTokenPrice.toJSON()});return _objectSpread(_objectSpread({},farm),{},{token:token,quoteToken:quoteToken});});return _context.abrupt(\"return\",farmsWithPrices);case 4:case\"end\":return _context.stop();}}},_callee);}));return function fetchFarmsPrices(_x){return _ref.apply(this,arguments);};}();export default fetchFarmsPrices;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/farms/fetchFarmsPrices.ts"],"names":["BigNumber","BIG_ONE","BIG_ZERO","filterFarmsByQuoteToken","getFarmFromTokenSymbol","farms","tokenSymbol","preferredQuoteTokens","farmsWithTokenSymbol","filter","farm","token","symbol","filteredFarm","getFarmBaseTokenPrice","quoteTokenFarm","bnbPriceBusd","hasTokenPriceVsQuote","Boolean","tokenPriceVsQuote","quoteToken","times","quoteTokenInBusd","getFarmQuoteTokenPrice","fetchFarmsPrices","bnbBusdFarm","find","pid","div","farmsWithPrices","map","baseTokenPrice","quoteTokenPrice","busdPrice","toJSON"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { BIG_ONE, BIG_ZERO } from 'utils/bigNumber'\r\nimport { filterFarmsByQuoteToken } from 'utils/farmsPriceHelpers'\r\nimport { Farm } from 'state/types'\r\n\r\nconst getFarmFromTokenSymbol = (farms: Farm[], tokenSymbol: string, preferredQuoteTokens?: string[]): Farm => {\r\n  const farmsWithTokenSymbol = farms.filter((farm) => farm.token.symbol === tokenSymbol)\r\n  const filteredFarm = filterFarmsByQuoteToken(farmsWithTokenSymbol, preferredQuoteTokens)\r\n  return filteredFarm\r\n}\r\n\r\nconst getFarmBaseTokenPrice = (farm: Farm, quoteTokenFarm: Farm, bnbPriceBusd: BigNumber): BigNumber => {\r\n  const hasTokenPriceVsQuote = Boolean(farm.tokenPriceVsQuote)\r\n\r\n  if (farm.quoteToken.symbol === 'BUSD') {\r\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === 'USDT') {\r\n    return hasTokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === 'wBNB') {\r\n    return hasTokenPriceVsQuote ? bnbPriceBusd.times(farm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  // We can only calculate profits without a quoteTokenFarm for BUSD/BNB farms\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  // Possible alternative farm quoteTokens:\r\n  // UST (i.e. MIR-UST), pBTC (i.e. PNT-pBTC), BTCB (i.e. bBADGER-BTCB), ETH (i.e. SUSHI-ETH)\r\n  // If the farm's quote token isn't BUSD or wBNB, we then use the quote token, of the original farm's quote token\r\n  // i.e. for farm PNT - pBTC we use the pBTC farm's quote token - BNB, (pBTC - BNB)\r\n  // from the BNB - pBTC price, we can calculate the PNT - BUSD price\r\n  if (quoteTokenFarm.quoteToken.symbol === 'wBNB') {\r\n    const quoteTokenInBusd = bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote)\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\r\n    const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\r\n    return hasTokenPriceVsQuote && quoteTokenInBusd\r\n      ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n      : BIG_ZERO\r\n  }\r\n\r\n  // if (quoteTokenFarm.quoteToken.symbol === 'USDT') {\r\n  //   const quoteTokenInBusd = quoteTokenFarm.tokenPriceVsQuote\r\n  //   return hasTokenPriceVsQuote && quoteTokenInBusd\r\n  //     ? new BigNumber(farm.tokenPriceVsQuote).times(quoteTokenInBusd)\r\n  //     : BIG_ZERO\r\n  // }\r\n\r\n  // Catch in case token does not have immediate or once-removed BUSD/wBNB quoteToken\r\n  return BIG_ZERO\r\n}\r\n\r\nconst getFarmQuoteTokenPrice = (farm: Farm, quoteTokenFarm: Farm, bnbPriceBusd: BigNumber): BigNumber => {\r\n  if (farm.quoteToken.symbol === 'BUSD' || farm.quoteToken.symbol === 'USDT' || farm.quoteToken.symbol === 'USDC') {\r\n    return BIG_ONE\r\n  }\r\n\r\n  if (farm.quoteToken.symbol === 'wBNB') {\r\n    return bnbPriceBusd\r\n  }\r\n\r\n  if (!quoteTokenFarm) {\r\n    return BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'wBNB') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? bnbPriceBusd.times(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  if (quoteTokenFarm.quoteToken.symbol === 'BUSD') {\r\n    return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  }\r\n\r\n  // if (quoteTokenFarm.quoteToken.symbol === 'USDT') {\r\n  //   return quoteTokenFarm.tokenPriceVsQuote ? new BigNumber(quoteTokenFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  // }\r\n\r\n  return BIG_ZERO\r\n}\r\n\r\nconst fetchFarmsPrices = async (farms) => {\r\n  const bnbBusdFarm = farms.find((farm: Farm) => farm.pid === 3) /* BNB-BUSD pool pid */\r\n  const bnbPriceBusd = bnbBusdFarm.tokenPriceVsQuote ? BIG_ONE.div(bnbBusdFarm.tokenPriceVsQuote) : BIG_ZERO\r\n  const farmsWithPrices = farms.map((farm) => {\r\n    const quoteTokenFarm = getFarmFromTokenSymbol(farms, farm.quoteToken.symbol)\r\n    const baseTokenPrice = getFarmBaseTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n    const quoteTokenPrice = getFarmQuoteTokenPrice(farm, quoteTokenFarm, bnbPriceBusd)\r\n    const token = { ...farm.token, busdPrice: baseTokenPrice.toJSON() }\r\n    const quoteToken = { ...farm.quoteToken, busdPrice: quoteTokenPrice.toJSON() }\r\n    return { ...farm, token, quoteToken }\r\n  })\r\n\r\n  return farmsWithPrices\r\n}\r\n\r\nexport default fetchFarmsPrices\r\n"]},"metadata":{},"sourceType":"module"}