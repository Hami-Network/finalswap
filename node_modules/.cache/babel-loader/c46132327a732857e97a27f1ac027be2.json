{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Button,Heading,Skeleton,Text}from'@pancakeswap/uikit';import BigNumber from'bignumber.js';import{useWeb3React}from'@web3-react/core';import Balance from'components/Balance';import{BIG_ZERO}from'utils/bigNumber';import{getBalanceAmount}from'utils/formatBalance';import{useAppDispatch}from'state';import{fetchFarmUserDataAsync}from'state/farms';import{usePriceCakeBusd}from'state/farms/hooks';import useToast from'hooks/useToast';import{useTranslation}from'contexts/Localization';import useHarvestFarm from'../../../hooks/useHarvestFarm';import{ActionContainer,ActionTitles,ActionContent}from'./styles';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var HarvestAction=function HarvestAction(_ref){var pid=_ref.pid,userData=_ref.userData,userDataReady=_ref.userDataReady,canharvest=_ref.canharvest;var _useToast=useToast(),toastSuccess=_useToast.toastSuccess,toastError=_useToast.toastError;var earningsBigNumber=new BigNumber(userData.earnings);var isabletoharvest=true;var cakePrice=usePriceCakeBusd();var earnings=BIG_ZERO;var earningsBusd=0;var displayBalance=userDataReady?earnings.toLocaleString():/*#__PURE__*/_jsx(Skeleton,{width:60});// If user didn't connect wallet default balance will be 0\nif(!earningsBigNumber.isZero()){earnings=getBalanceAmount(earningsBigNumber);earningsBusd=earnings.multipliedBy(cakePrice).toNumber();displayBalance=earnings.toFixed(3,BigNumber.ROUND_DOWN);}var _useState=useState(false),_useState2=_slicedToArray(_useState,2),pendingTx=_useState2[0],setPendingTx=_useState2[1];var _useHarvestFarm=useHarvestFarm(pid),onReward=_useHarvestFarm.onReward;var _useTranslation=useTranslation(),t=_useTranslation.t;var dispatch=useAppDispatch();var _useWeb3React=useWeb3React(),account=_useWeb3React.account;return/*#__PURE__*/_jsxs(ActionContainer,{children:[/*#__PURE__*/_jsxs(ActionTitles,{children:[/*#__PURE__*/_jsx(Text,{bold:true,textTransform:\"uppercase\",color:\"secondary\",fontSize:\"12px\",pr:\"4px\",children:\"LOKI\"}),/*#__PURE__*/_jsx(Text,{bold:true,textTransform:\"uppercase\",color:\"textSubtle\",fontSize:\"12px\",children:t('Earned')})]}),/*#__PURE__*/_jsxs(ActionContent,{children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Heading,{children:displayBalance}),earningsBusd>0&&/*#__PURE__*/_jsx(Balance,{fontSize:\"12px\",color:\"textSubtle\",decimals:2,value:earningsBusd,unit:\" USD\",prefix:\"~\"})]}),/*#__PURE__*/_jsx(Button,{disabled:earnings.eq(0)||pendingTx||!userDataReady,onClick:/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(isabletoharvest){_context.next=5;break;}toastError(t('Error'),t('Frequency Harvest. , Cannot Harvest until Lockup ends!'));console.error('Frequency Harvest');_context.next=20;break;case 5:setPendingTx(true);_context.prev=6;_context.next=9;return onReward();case 9:toastSuccess(\"\".concat(t('Harvested'),\"!\"),t('Your %symbol% earnings have been sent to your wallet!',{symbol:'LOKI'}));_context.next=16;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](6);toastError(t('Error'),t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));console.error(_context.t0);case 16:_context.prev=16;setPendingTx(false);return _context.finish(16);case 19:dispatch(fetchFarmUserDataAsync({account:account,pids:[pid]}));case 20:case\"end\":return _context.stop();}}},_callee,null,[[6,12,16,19]]);})),ml:\"4px\",children:t('Harvest')})]})]});};export default HarvestAction;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Farms/components/FarmTable/Actions/HarvestAction.tsx"],"names":["React","useState","Button","Heading","Skeleton","Text","BigNumber","useWeb3React","Balance","BIG_ZERO","getBalanceAmount","useAppDispatch","fetchFarmUserDataAsync","usePriceCakeBusd","useToast","useTranslation","useHarvestFarm","ActionContainer","ActionTitles","ActionContent","HarvestAction","pid","userData","userDataReady","canharvest","toastSuccess","toastError","earningsBigNumber","earnings","isabletoharvest","cakePrice","earningsBusd","displayBalance","toLocaleString","isZero","multipliedBy","toNumber","toFixed","ROUND_DOWN","pendingTx","setPendingTx","onReward","t","dispatch","account","eq","console","error","symbol","pids"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\r\nimport Balance from 'components/Balance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useHarvestFarm from '../../../hooks/useHarvestFarm'\r\n\r\nimport { ActionContainer, ActionTitles, ActionContent } from './styles'\r\n\r\ninterface HarvestActionProps extends FarmWithStakedValue {\r\n  userDataReady: boolean\r\n}\r\n\r\nconst HarvestAction: React.FunctionComponent<HarvestActionProps> = ({ pid, userData, userDataReady, canharvest }) => {\r\n  const { toastSuccess, toastError } = useToast()\r\n  const earningsBigNumber = new BigNumber(userData.earnings)\r\n  const isabletoharvest = true\r\n  const cakePrice = usePriceCakeBusd()\r\n  let earnings = BIG_ZERO\r\n  let earningsBusd = 0\r\n  let displayBalance = userDataReady ? earnings.toLocaleString() : <Skeleton width={60} />\r\n  // If user didn't connect wallet default balance will be 0\r\n  if (!earningsBigNumber.isZero()) {\r\n    earnings = getBalanceAmount(earningsBigNumber)\r\n    earningsBusd = earnings.multipliedBy(cakePrice).toNumber()\r\n    displayBalance = earnings.toFixed(3, BigNumber.ROUND_DOWN)\r\n  }\r\n\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  return (\r\n    <ActionContainer>\r\n      <ActionTitles>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          LOKI\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </ActionTitles>\r\n      <ActionContent>\r\n        <div>\r\n          <Heading>{displayBalance}</Heading>\r\n          {earningsBusd > 0 && (\r\n            <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n          )}\r\n        </div>\r\n        <Button\r\n           \r\n          disabled={earnings.eq(0) || pendingTx || !userDataReady}\r\n          onClick={async () => {\r\n            if(!isabletoharvest){\r\n              toastError(\r\n                t('Error'),\r\n                t('Frequency Harvest. , Cannot Harvest until Lockup ends!'),\r\n              )\r\n              console.error('Frequency Harvest')\r\n            } else {\r\n              setPendingTx(true)\r\n              try {\r\n                await onReward()\r\n                toastSuccess(\r\n                  `${t('Harvested')}!`,\r\n                  t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'LOKI' }),\r\n                )\r\n              } catch (e) {\r\n                toastError(\r\n                  t('Error'),\r\n                  t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n                )\r\n                console.error(e)\r\n              } finally {\r\n                setPendingTx(false)\r\n              }\r\n              dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n            }\r\n          }}\r\n          ml=\"4px\"\r\n        >\r\n          {t('Harvest')}\r\n        </Button>\r\n      </ActionContent>\r\n    </ActionContainer>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n"]},"metadata":{},"sourceType":"module"}