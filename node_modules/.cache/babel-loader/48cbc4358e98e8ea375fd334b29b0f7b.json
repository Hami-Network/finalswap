{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _asyncToGenerator from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";/* eslint-disable import/prefer-default-export */import BigNumber from'bignumber.js';import pools from'config/constants/pools';import sousChefV2 from'config/abi/sousChefV2.json';import multicall from'../multicall';import{simpleRpcProvider}from'../providers';import{getAddress}from'../addressHelpers';/**\r\n * Returns the total number of pools that were active at a given block\r\n */export var getActivePools=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(block){var eligiblePools,blockNumber,startBlockCalls,endBlockCalls,startBlocks,endBlocks;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:eligiblePools=pools.filter(function(pool){return pool.sousId!==0;}).filter(function(pool){return pool.isFinished===false||pool.isFinished===undefined;});_context.t0=block;if(_context.t0){_context.next=6;break;}_context.next=5;return simpleRpcProvider.getBlockNumber();case 5:_context.t0=_context.sent;case 6:blockNumber=_context.t0;startBlockCalls=eligiblePools.map(function(_ref2){var contractAddress=_ref2.contractAddress;return{address:getAddress(contractAddress),name:'startBlock'};});endBlockCalls=eligiblePools.map(function(_ref3){var contractAddress=_ref3.contractAddress;return{address:getAddress(contractAddress),name:'bonusEndBlock'};});_context.next=11;return multicall(sousChefV2,startBlockCalls);case 11:startBlocks=_context.sent;_context.next=14;return multicall(sousChefV2,endBlockCalls);case 14:endBlocks=_context.sent;return _context.abrupt(\"return\",eligiblePools.reduce(function(accum,poolCheck,index){var startBlock=startBlocks[index]?new BigNumber(startBlocks[index]):null;var endBlock=endBlocks[index]?new BigNumber(endBlocks[index]):null;if(!startBlock||!endBlock){return accum;}if(startBlock.gte(blockNumber)||endBlock.lte(blockNumber)){return accum;}return[].concat(_toConsumableArray(accum),[poolCheck]);},[]));case 16:case\"end\":return _context.stop();}}},_callee);}));return function getActivePools(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/utils/calls/pools.ts"],"names":["BigNumber","pools","sousChefV2","multicall","simpleRpcProvider","getAddress","getActivePools","block","eligiblePools","filter","pool","sousId","isFinished","undefined","getBlockNumber","blockNumber","startBlockCalls","map","contractAddress","address","name","endBlockCalls","startBlocks","endBlocks","reduce","accum","poolCheck","index","startBlock","endBlock","gte","lte"],"mappings":"mdAAA,iDACA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,MAAOC,CAAAA,KAAP,KAAkB,wBAAlB,CACA,MAAOC,CAAAA,UAAP,KAAuB,4BAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,iBAAT,KAAkC,cAAlC,CACA,OAASC,UAAT,KAA2B,mBAA3B,CAEA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,cAAc,0FAAG,iBAAOC,KAAP,oMACtBC,aADsB,CACNP,KAAK,CACxBQ,MADmB,CACZ,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACC,MAAL,GAAgB,CAA1B,EADY,EAEnBF,MAFmB,CAEZ,SAACC,IAAD,QAAUA,CAAAA,IAAI,CAACE,UAAL,GAAoB,KAApB,EAA6BF,IAAI,CAACE,UAAL,GAAoBC,SAA3D,EAFY,CADM,aAIRN,KAJQ,8DAIQH,CAAAA,iBAAiB,CAACU,cAAlB,EAJR,yCAItBC,WAJsB,aAKtBC,eALsB,CAKJR,aAAa,CAACS,GAAd,CAAkB,mBAAGC,CAAAA,eAAH,OAAGA,eAAH,OAA0B,CAClEC,OAAO,CAAEd,UAAU,CAACa,eAAD,CAD+C,CAElEE,IAAI,CAAE,YAF4D,CAA1B,EAAlB,CALI,CAStBC,aATsB,CASNb,aAAa,CAACS,GAAd,CAAkB,mBAAGC,CAAAA,eAAH,OAAGA,eAAH,OAA0B,CAChEC,OAAO,CAAEd,UAAU,CAACa,eAAD,CAD6C,CAEhEE,IAAI,CAAE,eAF0D,CAA1B,EAAlB,CATM,wBAaFjB,CAAAA,SAAS,CAACD,UAAD,CAAac,eAAb,CAbP,SAatBM,WAbsB,sCAcJnB,CAAAA,SAAS,CAACD,UAAD,CAAamB,aAAb,CAdL,SActBE,SAdsB,+CAgBrBf,aAAa,CAACgB,MAAd,CAAqB,SAACC,KAAD,CAAQC,SAAR,CAAmBC,KAAnB,CAA6B,CACvD,GAAMC,CAAAA,UAAU,CAAGN,WAAW,CAACK,KAAD,CAAX,CAAqB,GAAI3B,CAAAA,SAAJ,CAAcsB,WAAW,CAACK,KAAD,CAAzB,CAArB,CAAyD,IAA5E,CACA,GAAME,CAAAA,QAAQ,CAAGN,SAAS,CAACI,KAAD,CAAT,CAAmB,GAAI3B,CAAAA,SAAJ,CAAcuB,SAAS,CAACI,KAAD,CAAvB,CAAnB,CAAqD,IAAtE,CAEA,GAAI,CAACC,UAAD,EAAe,CAACC,QAApB,CAA8B,CAC5B,MAAOJ,CAAAA,KAAP,CACD,CAED,GAAIG,UAAU,CAACE,GAAX,CAAef,WAAf,GAA+Bc,QAAQ,CAACE,GAAT,CAAahB,WAAb,CAAnC,CAA8D,CAC5D,MAAOU,CAAAA,KAAP,CACD,CAED,mCAAWA,KAAX,GAAkBC,SAAlB,GACD,CAbM,CAaJ,EAbI,CAhBqB,yDAAH,kBAAdpB,CAAAA,cAAc,4CAApB","sourcesContent":["/* eslint-disable import/prefer-default-export */\r\nimport BigNumber from 'bignumber.js'\r\nimport pools from 'config/constants/pools'\r\nimport sousChefV2 from 'config/abi/sousChefV2.json'\r\nimport multicall from '../multicall'\r\nimport { simpleRpcProvider } from '../providers'\r\nimport { getAddress } from '../addressHelpers'\r\n\r\n/**\r\n * Returns the total number of pools that were active at a given block\r\n */\r\nexport const getActivePools = async (block?: number) => {\r\n  const eligiblePools = pools\r\n    .filter((pool) => pool.sousId !== 0)\r\n    .filter((pool) => pool.isFinished === false || pool.isFinished === undefined)\r\n  const blockNumber = block || (await simpleRpcProvider.getBlockNumber())\r\n  const startBlockCalls = eligiblePools.map(({ contractAddress }) => ({\r\n    address: getAddress(contractAddress),\r\n    name: 'startBlock',\r\n  }))\r\n  const endBlockCalls = eligiblePools.map(({ contractAddress }) => ({\r\n    address: getAddress(contractAddress),\r\n    name: 'bonusEndBlock',\r\n  }))\r\n  const startBlocks = await multicall(sousChefV2, startBlockCalls)\r\n  const endBlocks = await multicall(sousChefV2, endBlockCalls)\r\n\r\n  return eligiblePools.reduce((accum, poolCheck, index) => {\r\n    const startBlock = startBlocks[index] ? new BigNumber(startBlocks[index]) : null\r\n    const endBlock = endBlocks[index] ? new BigNumber(endBlocks[index]) : null\r\n\r\n    if (!startBlock || !endBlock) {\r\n      return accum\r\n    }\r\n\r\n    if (startBlock.gte(blockNumber) || endBlock.lte(blockNumber)) {\r\n      return accum\r\n    }\r\n\r\n    return [...accum, poolCheck]\r\n  }, [])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}