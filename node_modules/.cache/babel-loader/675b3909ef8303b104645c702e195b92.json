{"ast":null,"code":"import React,{useCallback,useMemo}from'react';import{currencyEquals}from'@pancakeswap/sdk';import{useTranslation}from'contexts/Localization';import TransactionConfirmationModal,{ConfirmationModalContent,TransactionErrorContent}from'components/TransactionConfirmationModal';import SwapModalFooter from'./SwapModalFooter';import SwapModalHeader from'./SwapModalHeader';/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */import{jsx as _jsx}from\"react/jsx-runtime\";function tradeMeaningfullyDiffers(tradeA,tradeB){return tradeA.tradeType!==tradeB.tradeType||!currencyEquals(tradeA.inputAmount.currency,tradeB.inputAmount.currency)||!tradeA.inputAmount.equalTo(tradeB.inputAmount)||!currencyEquals(tradeA.outputAmount.currency,tradeB.outputAmount.currency)||!tradeA.outputAmount.equalTo(tradeB.outputAmount);}var ConfirmSwapModal=function ConfirmSwapModal(_ref){var _trade$inputAmount$to,_trade$inputAmount,_trade$inputAmount$cu,_trade$inputAmount2,_trade$inputAmount2$c,_trade$outputAmount$t,_trade$outputAmount,_trade$outputAmount$c,_trade$outputAmount2,_trade$outputAmount2$;var trade=_ref.trade,originalTrade=_ref.originalTrade,onAcceptChanges=_ref.onAcceptChanges,allowedSlippage=_ref.allowedSlippage,onConfirm=_ref.onConfirm,onDismiss=_ref.onDismiss,customOnDismiss=_ref.customOnDismiss,recipient=_ref.recipient,swapErrorMessage=_ref.swapErrorMessage,attemptingTxn=_ref.attemptingTxn,txHash=_ref.txHash;var showAcceptChanges=useMemo(function(){return Boolean(trade&&originalTrade&&tradeMeaningfullyDiffers(trade,originalTrade));},[originalTrade,trade]);var _useTranslation=useTranslation(),t=_useTranslation.t;var modalHeader=useCallback(function(){return trade?/*#__PURE__*/_jsx(SwapModalHeader,{trade:trade,allowedSlippage:allowedSlippage,recipient:recipient,showAcceptChanges:showAcceptChanges,onAcceptChanges:onAcceptChanges}):null;},[allowedSlippage,onAcceptChanges,recipient,showAcceptChanges,trade]);var modalBottom=useCallback(function(){return trade?/*#__PURE__*/_jsx(SwapModalFooter,{onConfirm:onConfirm,trade:trade,disabledConfirm:showAcceptChanges,swapErrorMessage:swapErrorMessage,allowedSlippage:allowedSlippage}):null;},[allowedSlippage,onConfirm,showAcceptChanges,swapErrorMessage,trade]);// text to show while loading\nvar pendingText=t('Swapping %amountA% %symbolA% for %amountB% %symbolB%',{amountA:(_trade$inputAmount$to=trade===null||trade===void 0?void 0:(_trade$inputAmount=trade.inputAmount)===null||_trade$inputAmount===void 0?void 0:_trade$inputAmount.toSignificant(6))!==null&&_trade$inputAmount$to!==void 0?_trade$inputAmount$to:'',symbolA:(_trade$inputAmount$cu=trade===null||trade===void 0?void 0:(_trade$inputAmount2=trade.inputAmount)===null||_trade$inputAmount2===void 0?void 0:(_trade$inputAmount2$c=_trade$inputAmount2.currency)===null||_trade$inputAmount2$c===void 0?void 0:_trade$inputAmount2$c.symbol)!==null&&_trade$inputAmount$cu!==void 0?_trade$inputAmount$cu:'',amountB:(_trade$outputAmount$t=trade===null||trade===void 0?void 0:(_trade$outputAmount=trade.outputAmount)===null||_trade$outputAmount===void 0?void 0:_trade$outputAmount.toSignificant(6))!==null&&_trade$outputAmount$t!==void 0?_trade$outputAmount$t:'',symbolB:(_trade$outputAmount$c=trade===null||trade===void 0?void 0:(_trade$outputAmount2=trade.outputAmount)===null||_trade$outputAmount2===void 0?void 0:(_trade$outputAmount2$=_trade$outputAmount2.currency)===null||_trade$outputAmount2$===void 0?void 0:_trade$outputAmount2$.symbol)!==null&&_trade$outputAmount$c!==void 0?_trade$outputAmount$c:''});var confirmationContent=useCallback(function(){return swapErrorMessage?/*#__PURE__*/_jsx(TransactionErrorContent,{onDismiss:onDismiss,message:swapErrorMessage}):/*#__PURE__*/_jsx(ConfirmationModalContent,{topContent:modalHeader,bottomContent:modalBottom});},[onDismiss,modalBottom,modalHeader,swapErrorMessage]);return/*#__PURE__*/_jsx(TransactionConfirmationModal,{title:t('Confirm Swap'),onDismiss:onDismiss,customOnDismiss:customOnDismiss,attemptingTxn:attemptingTxn,hash:txHash,content:confirmationContent,pendingText:pendingText,currencyToAdd:trade===null||trade===void 0?void 0:trade.outputAmount.currency});};export default ConfirmSwapModal;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Swap/components/ConfirmSwapModal.tsx"],"names":["React","useCallback","useMemo","currencyEquals","useTranslation","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalFooter","SwapModalHeader","tradeMeaningfullyDiffers","tradeA","tradeB","tradeType","inputAmount","currency","equalTo","outputAmount","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","customOnDismiss","recipient","swapErrorMessage","attemptingTxn","txHash","showAcceptChanges","Boolean","t","modalHeader","modalBottom","pendingText","amountA","toSignificant","symbolA","symbol","amountB","symbolB","confirmationContent"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo } from 'react'\r\nimport { currencyEquals, Trade } from '@pancakeswap/sdk'\r\nimport { InjectedModalProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TransactionConfirmationModal, {\r\n  ConfirmationModalContent,\r\n  TransactionErrorContent,\r\n} from 'components/TransactionConfirmationModal'\r\nimport SwapModalFooter from './SwapModalFooter'\r\nimport SwapModalHeader from './SwapModalHeader'\r\n\r\n/**\r\n * Returns true if the trade requires a confirmation of details before we can submit it\r\n * @param tradeA trade A\r\n * @param tradeB trade B\r\n */\r\nfunction tradeMeaningfullyDiffers(tradeA: Trade, tradeB: Trade): boolean {\r\n  return (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\r\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\r\n    !currencyEquals(tradeA.outputAmount.currency, tradeB.outputAmount.currency) ||\r\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\r\n  )\r\n}\r\ninterface ConfirmSwapModalProps {\r\n  trade?: Trade\r\n  originalTrade?: Trade\r\n  attemptingTxn: boolean\r\n  txHash?: string\r\n  recipient: string | null\r\n  allowedSlippage: number\r\n  onAcceptChanges: () => void\r\n  onConfirm: () => void\r\n  swapErrorMessage?: string\r\n  customOnDismiss?: () => void\r\n}\r\n\r\nconst ConfirmSwapModal: React.FC<InjectedModalProps & ConfirmSwapModalProps> = ({\r\n  trade,\r\n  originalTrade,\r\n  onAcceptChanges,\r\n  allowedSlippage,\r\n  onConfirm,\r\n  onDismiss,\r\n  customOnDismiss,\r\n  recipient,\r\n  swapErrorMessage,\r\n  attemptingTxn,\r\n  txHash,\r\n}) => {\r\n  const showAcceptChanges = useMemo(\r\n    () => Boolean(trade && originalTrade && tradeMeaningfullyDiffers(trade, originalTrade)),\r\n    [originalTrade, trade],\r\n  )\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const modalHeader = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalHeader\r\n        trade={trade}\r\n        allowedSlippage={allowedSlippage}\r\n        recipient={recipient}\r\n        showAcceptChanges={showAcceptChanges}\r\n        onAcceptChanges={onAcceptChanges}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\r\n\r\n  const modalBottom = useCallback(() => {\r\n    return trade ? (\r\n      <SwapModalFooter\r\n        onConfirm={onConfirm}\r\n        trade={trade}\r\n        disabledConfirm={showAcceptChanges}\r\n        swapErrorMessage={swapErrorMessage}\r\n        allowedSlippage={allowedSlippage}\r\n      />\r\n    ) : null\r\n  }, [allowedSlippage, onConfirm, showAcceptChanges, swapErrorMessage, trade])\r\n\r\n  // text to show while loading\r\n  const pendingText = t('Swapping %amountA% %symbolA% for %amountB% %symbolB%', {\r\n    amountA: trade?.inputAmount?.toSignificant(6) ?? '',\r\n    symbolA: trade?.inputAmount?.currency?.symbol ?? '',\r\n    amountB: trade?.outputAmount?.toSignificant(6) ?? '',\r\n    symbolB: trade?.outputAmount?.currency?.symbol ?? '',\r\n  })\r\n\r\n  const confirmationContent = useCallback(\r\n    () =>\r\n      swapErrorMessage ? (\r\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\r\n      ) : (\r\n        <ConfirmationModalContent topContent={modalHeader} bottomContent={modalBottom} />\r\n      ),\r\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage],\r\n  )\r\n\r\n  return (\r\n    <TransactionConfirmationModal\r\n      title={t('Confirm Swap')}\r\n      onDismiss={onDismiss}\r\n      customOnDismiss={customOnDismiss}\r\n      attemptingTxn={attemptingTxn}\r\n      hash={txHash}\r\n      content={confirmationContent}\r\n      pendingText={pendingText}\r\n      currencyToAdd={trade?.outputAmount.currency}\r\n    />\r\n  )\r\n}\r\n\r\nexport default ConfirmSwapModal\r\n"]},"metadata":{},"sourceType":"module"}