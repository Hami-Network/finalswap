{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useGasPrice } from 'state/user/hooks';\nimport { get } from 'lodash';\n/**\r\n * Perform a contract call with a gas price returned from useGasPrice\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the method called\r\n * @param methodArgs An array of arguments to pass to the method\r\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\n\nexport function useCallWithGasPrice() {\n  _s();\n\n  const gasPrice = useGasPrice();\n  const callWithGasPrice = useCallback(async (contract, methodName, methodArgs = [], overrides = null) => {\n    const contractMethod = get(contract, methodName);\n    const hasManualGasPriceOverride = overrides === null || overrides === void 0 ? void 0 : overrides.gasPrice;\n    const tx = await contractMethod(...methodArgs, hasManualGasPriceOverride ? { ...overrides\n    } : { ...overrides,\n      gasPrice\n    });\n    return tx;\n  }, [gasPrice]);\n  return {\n    callWithGasPrice\n  };\n}\n\n_s(useCallWithGasPrice, \"bQmpZYzInD9JRE8XZL4gkLQBD6Q=\", false, function () {\n  return [useGasPrice];\n});","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/hooks/useCallWithGasPrice.ts"],"names":["useCallback","useGasPrice","get","useCallWithGasPrice","gasPrice","callWithGasPrice","contract","methodName","methodArgs","overrides","contractMethod","hasManualGasPriceOverride","tx"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,OAA5B;AAEA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,GAAT,QAAoB,QAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,mBAAT,GAA+B;AAAA;;AACpC,QAAMC,QAAQ,GAAGH,WAAW,EAA5B;AAEA,QAAMI,gBAAgB,GAAGL,WAAW,CAClC,OACEM,QADF,EAEEC,UAFF,EAGEC,UAAiB,GAAG,EAHtB,EAIEC,SAAwB,GAAG,IAJ7B,KAKoD;AAClD,UAAMC,cAAc,GAAGR,GAAG,CAACI,QAAD,EAAWC,UAAX,CAA1B;AACA,UAAMI,yBAAyB,GAAGF,SAAH,aAAGA,SAAH,uBAAGA,SAAS,CAAEL,QAA7C;AAEA,UAAMQ,EAAE,GAAG,MAAMF,cAAc,CAC7B,GAAGF,UAD0B,EAE7BG,yBAAyB,GAAG,EAAE,GAAGF;AAAL,KAAH,GAAsB,EAAE,GAAGA,SAAL;AAAgBL,MAAAA;AAAhB,KAFlB,CAA/B;AAKA,WAAOQ,EAAP;AACD,GAhBiC,EAiBlC,CAACR,QAAD,CAjBkC,CAApC;AAoBA,SAAO;AAAEC,IAAAA;AAAF,GAAP;AACD;;GAxBeF,mB;UACGF,W","sourcesContent":["import { useCallback } from 'react'\r\nimport ethers, { Contract, CallOverrides } from 'ethers'\r\nimport { useGasPrice } from 'state/user/hooks'\r\nimport { get } from 'lodash'\r\n\r\n/**\r\n * Perform a contract call with a gas price returned from useGasPrice\r\n * @param contract Used to perform the call\r\n * @param methodName The name of the method called\r\n * @param methodArgs An array of arguments to pass to the method\r\n * @param overrides An overrides object to pass to the method. gasPrice passed in here will take priority over the price returned by useGasPrice\r\n * @returns https://docs.ethers.io/v5/api/providers/types/#providers-TransactionReceipt\r\n */\r\nexport function useCallWithGasPrice() {\r\n  const gasPrice = useGasPrice()\r\n\r\n  const callWithGasPrice = useCallback(\r\n    async (\r\n      contract: Contract,\r\n      methodName: string,\r\n      methodArgs: any[] = [],\r\n      overrides: CallOverrides = null,\r\n    ): Promise<ethers.providers.TransactionResponse> => {\r\n      const contractMethod = get(contract, methodName)\r\n      const hasManualGasPriceOverride = overrides?.gasPrice\r\n\r\n      const tx = await contractMethod(\r\n        ...methodArgs,\r\n        hasManualGasPriceOverride ? { ...overrides } : { ...overrides, gasPrice },\r\n      )\r\n\r\n      return tx\r\n    },\r\n    [gasPrice],\r\n  )\r\n\r\n  return { callWithGasPrice }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}