{"ast":null,"code":"import React,{useEffect,useMemo}from'react';import{useDispatch,useSelector}from'react-redux';import{Text,Flex,Link}from'@pancakeswap/uikit';import useActiveWeb3React from'hooks/useActiveWeb3React';import{getBscScanLink}from'utils';import useToast from'hooks/useToast';import{useBlockNumber}from'../application/hooks';import{checkedTransaction,finalizeTransaction}from'./actions';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function shouldCheck(lastBlockNumber,tx){if(tx.receipt)return false;if(!tx.lastCheckedBlockNumber)return true;var blocksSinceCheck=lastBlockNumber-tx.lastCheckedBlockNumber;if(blocksSinceCheck<1)return false;var minutesPending=(new Date().getTime()-tx.addedTime)/1000/60;if(minutesPending>60){// every 10 blocks if pending for longer than an hour\nreturn blocksSinceCheck>9;}if(minutesPending>5){// every 3 blocks if pending more than 5 minutes\nreturn blocksSinceCheck>2;}// otherwise every block\nreturn true;}export default function Updater(){var _useActiveWeb3React=useActiveWeb3React(),library=_useActiveWeb3React.library,chainId=_useActiveWeb3React.chainId;var lastBlockNumber=useBlockNumber();var dispatch=useDispatch();var state=useSelector(function(s){return s.transactions;});var transactions=useMemo(function(){var _state$chainId;return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};},[chainId,state]);var _useToast=useToast(),toastError=_useToast.toastError,toastSuccess=_useToast.toastSuccess;useEffect(function(){if(!chainId||!library||!lastBlockNumber)return;Object.keys(transactions).filter(function(hash){return shouldCheck(lastBlockNumber,transactions[hash]);}).forEach(function(hash){library.getTransactionReceipt(hash).then(function(receipt){if(receipt){var _transactions$hash$su,_transactions$hash;dispatch(finalizeTransaction({chainId:chainId,hash:hash,receipt:{blockHash:receipt.blockHash,blockNumber:receipt.blockNumber,contractAddress:receipt.contractAddress,from:receipt.from,status:receipt.status,to:receipt.to,transactionHash:receipt.transactionHash,transactionIndex:receipt.transactionIndex}}));var toast=receipt.status===1?toastSuccess:toastError;toast('Transaction receipt',/*#__PURE__*/_jsxs(Flex,{flexDirection:\"column\",children:[/*#__PURE__*/_jsx(Text,{children:(_transactions$hash$su=(_transactions$hash=transactions[hash])===null||_transactions$hash===void 0?void 0:_transactions$hash.summary)!==null&&_transactions$hash$su!==void 0?_transactions$hash$su:\"Hash: \".concat(hash.slice(0,8),\"...\").concat(hash.slice(58,65))}),chainId&&/*#__PURE__*/_jsx(Link,{external:true,href:getBscScanLink(hash,'transaction',chainId),children:\"View on BscScan\"})]}));}else{dispatch(checkedTransaction({chainId:chainId,hash:hash,blockNumber:lastBlockNumber}));}}).catch(function(error){console.error(\"failed to check transaction hash: \".concat(hash),error);});});},[chainId,library,transactions,lastBlockNumber,dispatch,toastSuccess,toastError]);return null;}","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/transactions/updater.tsx"],"names":["React","useEffect","useMemo","useDispatch","useSelector","Text","Flex","Link","useActiveWeb3React","getBscScanLink","useToast","useBlockNumber","checkedTransaction","finalizeTransaction","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","Updater","library","chainId","dispatch","state","s","transactions","toastError","toastSuccess","Object","keys","filter","hash","forEach","getTransactionReceipt","then","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","toast","summary","slice","catch","error","console"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Text, Flex, Link } from '@pancakeswap/uikit'\r\nimport useActiveWeb3React from 'hooks/useActiveWeb3React'\r\nimport { getBscScanLink } from 'utils'\r\nimport useToast from 'hooks/useToast'\r\nimport { useBlockNumber } from '../application/hooks'\r\nimport { AppDispatch, AppState } from '../index'\r\nimport { checkedTransaction, finalizeTransaction } from './actions'\r\n\r\nexport function shouldCheck(\r\n  lastBlockNumber: number,\r\n  tx: { addedTime: number; receipt?: any; lastCheckedBlockNumber?: number },\r\n): boolean {\r\n  if (tx.receipt) return false\r\n  if (!tx.lastCheckedBlockNumber) return true\r\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\r\n  if (blocksSinceCheck < 1) return false\r\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\r\n  if (minutesPending > 60) {\r\n    // every 10 blocks if pending for longer than an hour\r\n    return blocksSinceCheck > 9\r\n  }\r\n  if (minutesPending > 5) {\r\n    // every 3 blocks if pending more than 5 minutes\r\n    return blocksSinceCheck > 2\r\n  }\r\n  // otherwise every block\r\n  return true\r\n}\r\n\r\nexport default function Updater(): null {\r\n  const { library, chainId } = useActiveWeb3React()\r\n\r\n  const lastBlockNumber = useBlockNumber()\r\n\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const state = useSelector<AppState, AppState['transactions']>((s) => s.transactions)\r\n\r\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\r\n\r\n  const { toastError, toastSuccess } = useToast()\r\n\r\n  useEffect(() => {\r\n    if (!chainId || !library || !lastBlockNumber) return\r\n\r\n    Object.keys(transactions)\r\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\r\n      .forEach((hash) => {\r\n        library\r\n          .getTransactionReceipt(hash)\r\n          .then((receipt) => {\r\n            if (receipt) {\r\n              dispatch(\r\n                finalizeTransaction({\r\n                  chainId,\r\n                  hash,\r\n                  receipt: {\r\n                    blockHash: receipt.blockHash,\r\n                    blockNumber: receipt.blockNumber,\r\n                    contractAddress: receipt.contractAddress,\r\n                    from: receipt.from,\r\n                    status: receipt.status,\r\n                    to: receipt.to,\r\n                    transactionHash: receipt.transactionHash,\r\n                    transactionIndex: receipt.transactionIndex,\r\n                  },\r\n                }),\r\n              )\r\n\r\n              const toast = receipt.status === 1 ? toastSuccess : toastError\r\n              toast(\r\n                'Transaction receipt',\r\n                <Flex flexDirection=\"column\">\r\n                  <Text>{transactions[hash]?.summary ?? `Hash: ${hash.slice(0, 8)}...${hash.slice(58, 65)}`}</Text>\r\n                  {chainId && (\r\n                    <Link external href={getBscScanLink(hash, 'transaction', chainId)}>\r\n                      View on BscScan\r\n                    </Link>\r\n                  )}\r\n                </Flex>,\r\n              )\r\n            } else {\r\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }))\r\n            }\r\n          })\r\n          .catch((error) => {\r\n            console.error(`failed to check transaction hash: ${hash}`, error)\r\n          })\r\n      })\r\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, toastSuccess, toastError])\r\n\r\n  return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}