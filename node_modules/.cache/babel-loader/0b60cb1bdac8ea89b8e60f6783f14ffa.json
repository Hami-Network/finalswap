{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97154\\\\swap\\\\hami\\\\LokiswapUI\\\\src\\\\views\\\\Farms\\\\components\\\\FarmCard\\\\ApyButton.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit';\nimport RoiCalculatorModal from 'components/RoiCalculatorModal';\nimport { useTranslation } from 'contexts/Localization';\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ApyLabelContainer = styled(Flex)`\n  cursor: pointer;\n\n  &:hover {\n    opacity: 0.5;\n  }\n`;\n_c = ApyLabelContainer;\n\nconst ApyButton = ({\n  variant,\n  pid,\n  lpLabel,\n  lpSymbol,\n  cakePrice,\n  apr,\n  multiplier,\n  displayApr,\n  addLiquidityUrl,\n  isTokenOnly\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const lpPrice = useLpTokenPrice(lpSymbol, isTokenOnly);\n  const {\n    tokenBalance,\n    stakedBalance\n  } = useFarmUser(pid);\n  const [onPresentApyModal] = useModal( /*#__PURE__*/_jsxDEV(RoiCalculatorModal, {\n    linkLabel: t('Get %symbol%', {\n      symbol: lpLabel\n    }),\n    stakingTokenBalance: stakedBalance.plus(tokenBalance),\n    stakingTokenSymbol: lpSymbol,\n    stakingTokenPrice: lpPrice.toNumber(),\n    earningTokenPrice: cakePrice.toNumber(),\n    apr: apr,\n    multiplier: multiplier,\n    displayApr: displayApr,\n    linkHref: addLiquidityUrl,\n    isFarm: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this));\n\n  const handleClickButton = event => {\n    event.stopPropagation();\n    onPresentApyModal();\n  };\n\n  return /*#__PURE__*/_jsxDEV(ApyLabelContainer, {\n    alignItems: \"center\",\n    onClick: handleClickButton,\n    children: [displayApr, \"%\", variant === 'text-and-button' && /*#__PURE__*/_jsxDEV(IconButton, {\n      variant: \"text\",\n      scale: \"sm\",\n      ml: \"4px\",\n      children: /*#__PURE__*/_jsxDEV(CalculateIcon, {\n        width: \"18px\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ApyButton, \"ITf7fwKr2lXSnIi+qeLnn1hFTnA=\", false, function () {\n  return [useTranslation, useLpTokenPrice, useFarmUser, useModal];\n});\n\n_c2 = ApyButton;\nexport default ApyButton;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ApyLabelContainer\");\n$RefreshReg$(_c2, \"ApyButton\");","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Farms/components/FarmCard/ApyButton.tsx"],"names":["React","styled","Flex","IconButton","useModal","CalculateIcon","RoiCalculatorModal","useTranslation","useFarmUser","useLpTokenPrice","ApyLabelContainer","ApyButton","variant","pid","lpLabel","lpSymbol","cakePrice","apr","multiplier","displayApr","addLiquidityUrl","isTokenOnly","t","lpPrice","tokenBalance","stakedBalance","onPresentApyModal","symbol","plus","toNumber","handleClickButton","event","stopPropagation"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,QAA3B,EAAqCC,aAArC,QAA0D,oBAA1D;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,mBAA7C;;AAEA,MAAMC,iBAAiB,GAAGT,MAAM,CAACC,IAAD,CAAO;AACvC;AACA;AACA;AACA;AACA;AACA,CANA;KAAMQ,iB;;AAqBN,MAAMC,SAAmC,GAAG,CAAC;AAC3CC,EAAAA,OAD2C;AAE3CC,EAAAA,GAF2C;AAG3CC,EAAAA,OAH2C;AAI3CC,EAAAA,QAJ2C;AAK3CC,EAAAA,SAL2C;AAM3CC,EAAAA,GAN2C;AAO3CC,EAAAA,UAP2C;AAQ3CC,EAAAA,UAR2C;AAS3CC,EAAAA,eAT2C;AAU3CC,EAAAA;AAV2C,CAAD,KAWtC;AAAA;;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAQf,cAAc,EAA5B;AACA,QAAMgB,OAAO,GAAGd,eAAe,CAACM,QAAD,EAAWM,WAAX,CAA/B;AACA,QAAM;AAAEG,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAkCjB,WAAW,CAACK,GAAD,CAAnD;AACA,QAAM,CAACa,iBAAD,IAAsBtB,QAAQ,eAClC,QAAC,kBAAD;AACE,IAAA,SAAS,EAAEkB,CAAC,CAAC,cAAD,EAAiB;AAAEK,MAAAA,MAAM,EAAEb;AAAV,KAAjB,CADd;AAEE,IAAA,mBAAmB,EAAEW,aAAa,CAACG,IAAd,CAAmBJ,YAAnB,CAFvB;AAGE,IAAA,kBAAkB,EAAET,QAHtB;AAIE,IAAA,iBAAiB,EAAEQ,OAAO,CAACM,QAAR,EAJrB;AAKE,IAAA,iBAAiB,EAAEb,SAAS,CAACa,QAAV,EALrB;AAME,IAAA,GAAG,EAAEZ,GANP;AAOE,IAAA,UAAU,EAAEC,UAPd;AAQE,IAAA,UAAU,EAAEC,UARd;AASE,IAAA,QAAQ,EAAEC,eATZ;AAUE,IAAA,MAAM;AAVR;AAAA;AAAA;AAAA;AAAA,UADkC,CAApC;;AAeA,QAAMU,iBAAiB,GAAIC,KAAD,IAAiB;AACzCA,IAAAA,KAAK,CAACC,eAAN;AACAN,IAAAA,iBAAiB;AAClB,GAHD;;AAKA,sBACE,QAAC,iBAAD;AAAmB,IAAA,UAAU,EAAC,QAA9B;AAAuC,IAAA,OAAO,EAAEI,iBAAhD;AAAA,eACGX,UADH,OAEGP,OAAO,KAAK,iBAAZ,iBACC,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,MAApB;AAA2B,MAAA,KAAK,EAAC,IAAjC;AAAsC,MAAA,EAAE,EAAC,KAAzC;AAAA,6BACE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAC;AAArB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CA7CD;;GAAMD,S;UAYUJ,c,EACEE,e,EACwBD,W,EACZJ,Q;;;MAfxBO,S;AA+CN,eAAeA,SAAf","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, IconButton, useModal, CalculateIcon } from '@pancakeswap/uikit'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useFarmUser, useLpTokenPrice } from 'state/farms/hooks'\r\n\r\nconst ApyLabelContainer = styled(Flex)`\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    opacity: 0.5;\r\n  }\r\n`\r\n\r\nexport interface ApyButtonProps {\r\n  variant: 'text' | 'text-and-button'\r\n  pid: number\r\n  lpSymbol: string\r\n  lpLabel?: string\r\n  multiplier: string\r\n  cakePrice?: BigNumber\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  isTokenOnly?: boolean\r\n}\r\n\r\nconst ApyButton: React.FC<ApyButtonProps> = ({\r\n  variant,\r\n  pid,\r\n  lpLabel,\r\n  lpSymbol,\r\n  cakePrice,\r\n  apr,\r\n  multiplier,\r\n  displayApr,\r\n  addLiquidityUrl,\r\n  isTokenOnly,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const lpPrice = useLpTokenPrice(lpSymbol, isTokenOnly)\r\n  const { tokenBalance, stakedBalance } = useFarmUser(pid)\r\n  const [onPresentApyModal] = useModal(\r\n    <RoiCalculatorModal\r\n      linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n      stakingTokenBalance={stakedBalance.plus(tokenBalance)}\r\n      stakingTokenSymbol={lpSymbol}\r\n      stakingTokenPrice={lpPrice.toNumber()}\r\n      earningTokenPrice={cakePrice.toNumber()}\r\n      apr={apr}\r\n      multiplier={multiplier}\r\n      displayApr={displayApr}\r\n      linkHref={addLiquidityUrl}\r\n      isFarm\r\n    />,\r\n  )\r\n\r\n  const handleClickButton = (event): void => {\r\n    event.stopPropagation()\r\n    onPresentApyModal()\r\n  }\r\n\r\n  return (\r\n    <ApyLabelContainer alignItems=\"center\" onClick={handleClickButton}>\r\n      {displayApr}%\r\n      {variant === 'text-and-button' && (\r\n        <IconButton variant=\"text\" scale=\"sm\" ml=\"4px\">\r\n          <CalculateIcon width=\"18px\" />\r\n        </IconButton>\r\n      )}\r\n    </ApyLabelContainer>\r\n  )\r\n}\r\n\r\nexport default ApyButton\r\n"]},"metadata":{},"sourceType":"module"}