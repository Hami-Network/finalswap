{"ast":null,"code":"import _toConsumableArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createReducer}from'@reduxjs/toolkit';import{getVersionUpgrade,VersionUpgrade}from'@uniswap/token-lists';// eslint-disable-next-line import/no-unresolved\nimport{DEFAULT_ACTIVE_LIST_URLS,UNSUPPORTED_LIST_URLS,DEFAULT_LIST_OF_LISTS}from'../../config/constants/lists';import{updateVersion}from'../global/actions';import{acceptListUpdate,addList,fetchTokenList,removeList,enableList,disableList}from'./actions';var NEW_LIST_STATE={error:null,current:null,loadingRequestId:null,pendingUpdate:null};var initialState={lastInitializedDefaultListOfLists:DEFAULT_LIST_OF_LISTS,byUrl:_objectSpread({},DEFAULT_LIST_OF_LISTS.concat.apply(DEFAULT_LIST_OF_LISTS,_toConsumableArray(UNSUPPORTED_LIST_URLS)).reduce(function(memo,listUrl){memo[listUrl]=NEW_LIST_STATE;return memo;},{})),activeListUrls:DEFAULT_ACTIVE_LIST_URLS};export default createReducer(initialState,function(builder){return builder.addCase(fetchTokenList.pending,function(state,_ref){var _ref$payload=_ref.payload,requestId=_ref$payload.requestId,url=_ref$payload.url;state.byUrl[url]=_objectSpread(_objectSpread({current:null,pendingUpdate:null},state.byUrl[url]),{},{loadingRequestId:requestId,error:null});}).addCase(fetchTokenList.fulfilled,function(state,_ref2){var _state$byUrl$url,_state$byUrl$url2;var _ref2$payload=_ref2.payload,requestId=_ref2$payload.requestId,tokenList=_ref2$payload.tokenList,url=_ref2$payload.url;var current=(_state$byUrl$url=state.byUrl[url])===null||_state$byUrl$url===void 0?void 0:_state$byUrl$url.current;var loadingRequestId=(_state$byUrl$url2=state.byUrl[url])===null||_state$byUrl$url2===void 0?void 0:_state$byUrl$url2.loadingRequestId;// no-op if update does nothing\nif(current){var upgradeType=getVersionUpgrade(current.version,tokenList.version);if(upgradeType===VersionUpgrade.NONE)return;if(loadingRequestId===null||loadingRequestId===requestId){state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:null,error:null,current:current,pendingUpdate:tokenList});}}else{// activate if on default active\nif(DEFAULT_ACTIVE_LIST_URLS.includes(url)){var _state$activeListUrls;(_state$activeListUrls=state.activeListUrls)===null||_state$activeListUrls===void 0?void 0:_state$activeListUrls.push(url);}state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:null,error:null,current:tokenList,pendingUpdate:null});}}).addCase(fetchTokenList.rejected,function(state,_ref3){var _state$byUrl$url3;var _ref3$payload=_ref3.payload,url=_ref3$payload.url,requestId=_ref3$payload.requestId,errorMessage=_ref3$payload.errorMessage;if(((_state$byUrl$url3=state.byUrl[url])===null||_state$byUrl$url3===void 0?void 0:_state$byUrl$url3.loadingRequestId)!==requestId){// no-op since it's not the latest request\nreturn;}state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{loadingRequestId:null,error:errorMessage,current:null,pendingUpdate:null});}).addCase(addList,function(state,_ref4){var url=_ref4.payload;if(!state.byUrl[url]){state.byUrl[url]=NEW_LIST_STATE;}}).addCase(removeList,function(state,_ref5){var url=_ref5.payload;if(state.byUrl[url]){delete state.byUrl[url];}// remove list from active urls if needed\nif(state.activeListUrls&&state.activeListUrls.includes(url)){state.activeListUrls=state.activeListUrls.filter(function(u){return u!==url;});}}).addCase(enableList,function(state,_ref6){var url=_ref6.payload;if(!state.byUrl[url]){state.byUrl[url]=NEW_LIST_STATE;}if(state.activeListUrls&&!state.activeListUrls.includes(url)){state.activeListUrls.push(url);}if(!state.activeListUrls){state.activeListUrls=[url];}}).addCase(disableList,function(state,_ref7){var url=_ref7.payload;if(state.activeListUrls&&state.activeListUrls.includes(url)){state.activeListUrls=state.activeListUrls.filter(function(u){return u!==url;});}}).addCase(acceptListUpdate,function(state,_ref8){var _state$byUrl$url4;var url=_ref8.payload;if(!((_state$byUrl$url4=state.byUrl[url])===null||_state$byUrl$url4===void 0?void 0:_state$byUrl$url4.pendingUpdate)){throw new Error('accept list update called without pending update');}state.byUrl[url]=_objectSpread(_objectSpread({},state.byUrl[url]),{},{pendingUpdate:null,current:state.byUrl[url].pendingUpdate});}).addCase(updateVersion,function(state){// state loaded from localStorage, but new lists have never been initialized\nif(!state.lastInitializedDefaultListOfLists){state.byUrl=initialState.byUrl;state.activeListUrls=initialState.activeListUrls;}else if(state.lastInitializedDefaultListOfLists){var lastInitializedSet=state.lastInitializedDefaultListOfLists.reduce(function(s,l){return s.add(l);},new Set());var newListOfListsSet=DEFAULT_LIST_OF_LISTS.reduce(function(s,l){return s.add(l);},new Set());DEFAULT_LIST_OF_LISTS.forEach(function(listUrl){if(!lastInitializedSet.has(listUrl)){state.byUrl[listUrl]=NEW_LIST_STATE;}});state.lastInitializedDefaultListOfLists.forEach(function(listUrl){if(!newListOfListsSet.has(listUrl)){delete state.byUrl[listUrl];}});}state.lastInitializedDefaultListOfLists=DEFAULT_LIST_OF_LISTS;// if no active lists, activate defaults\nif(!state.activeListUrls){state.activeListUrls=DEFAULT_ACTIVE_LIST_URLS;// for each list on default list, initialize if needed\nDEFAULT_ACTIVE_LIST_URLS.map(function(listUrl){if(!state.byUrl[listUrl]){state.byUrl[listUrl]=NEW_LIST_STATE;}return true;});}});});","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/lists/reducer.ts"],"names":["createReducer","getVersionUpgrade","VersionUpgrade","DEFAULT_ACTIVE_LIST_URLS","UNSUPPORTED_LIST_URLS","DEFAULT_LIST_OF_LISTS","updateVersion","acceptListUpdate","addList","fetchTokenList","removeList","enableList","disableList","NEW_LIST_STATE","error","current","loadingRequestId","pendingUpdate","initialState","lastInitializedDefaultListOfLists","byUrl","concat","reduce","memo","listUrl","activeListUrls","builder","addCase","pending","state","payload","requestId","url","fulfilled","tokenList","upgradeType","version","NONE","includes","push","rejected","errorMessage","filter","u","Error","lastInitializedSet","s","l","add","Set","newListOfListsSet","forEach","has","map"],"mappings":"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","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\r\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\r\n// eslint-disable-next-line import/no-unresolved\r\nimport { TokenList } from '@uniswap/token-lists/dist/types'\r\nimport { DEFAULT_ACTIVE_LIST_URLS, UNSUPPORTED_LIST_URLS, DEFAULT_LIST_OF_LISTS } from '../../config/constants/lists'\r\n\r\nimport { updateVersion } from '../global/actions'\r\nimport { acceptListUpdate, addList, fetchTokenList, removeList, enableList, disableList } from './actions'\r\n\r\nexport interface ListsState {\r\n  readonly byUrl: {\r\n    readonly [url: string]: {\r\n      readonly current: TokenList | null\r\n      readonly pendingUpdate: TokenList | null\r\n      readonly loadingRequestId: string | null\r\n      readonly error: string | null\r\n    }\r\n  }\r\n  // this contains the default list of lists from the last time the updateVersion was called, i.e. the app was reloaded\r\n  readonly lastInitializedDefaultListOfLists?: string[]\r\n\r\n  // currently active lists\r\n  readonly activeListUrls: string[] | undefined\r\n}\r\n\r\ntype ListState = ListsState['byUrl'][string]\r\n\r\nconst NEW_LIST_STATE: ListState = {\r\n  error: null,\r\n  current: null,\r\n  loadingRequestId: null,\r\n  pendingUpdate: null,\r\n}\r\n\r\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] extends ReadonlyArray<infer U> ? U[] : T[P] }\r\n\r\nconst initialState: ListsState = {\r\n  lastInitializedDefaultListOfLists: DEFAULT_LIST_OF_LISTS,\r\n  byUrl: {\r\n    ...DEFAULT_LIST_OF_LISTS.concat(...UNSUPPORTED_LIST_URLS).reduce<Mutable<ListsState['byUrl']>>((memo, listUrl) => {\r\n      memo[listUrl] = NEW_LIST_STATE\r\n      return memo\r\n    }, {}),\r\n  },\r\n  activeListUrls: DEFAULT_ACTIVE_LIST_URLS,\r\n}\r\n\r\nexport default createReducer(initialState, (builder) =>\r\n  builder\r\n    .addCase(fetchTokenList.pending, (state, { payload: { requestId, url } }) => {\r\n      state.byUrl[url] = {\r\n        current: null,\r\n        pendingUpdate: null,\r\n        ...state.byUrl[url],\r\n        loadingRequestId: requestId,\r\n        error: null,\r\n      }\r\n    })\r\n    .addCase(fetchTokenList.fulfilled, (state, { payload: { requestId, tokenList, url } }) => {\r\n      const current = state.byUrl[url]?.current\r\n      const loadingRequestId = state.byUrl[url]?.loadingRequestId\r\n\r\n      // no-op if update does nothing\r\n      if (current) {\r\n        const upgradeType = getVersionUpgrade(current.version, tokenList.version)\r\n\r\n        if (upgradeType === VersionUpgrade.NONE) return\r\n        if (loadingRequestId === null || loadingRequestId === requestId) {\r\n          state.byUrl[url] = {\r\n            ...state.byUrl[url],\r\n            loadingRequestId: null,\r\n            error: null,\r\n            current,\r\n            pendingUpdate: tokenList,\r\n          }\r\n        }\r\n      } else {\r\n        // activate if on default active\r\n        if (DEFAULT_ACTIVE_LIST_URLS.includes(url)) {\r\n          state.activeListUrls?.push(url)\r\n        }\r\n\r\n        state.byUrl[url] = {\r\n          ...state.byUrl[url],\r\n          loadingRequestId: null,\r\n          error: null,\r\n          current: tokenList,\r\n          pendingUpdate: null,\r\n        }\r\n      }\r\n    })\r\n    .addCase(fetchTokenList.rejected, (state, { payload: { url, requestId, errorMessage } }) => {\r\n      if (state.byUrl[url]?.loadingRequestId !== requestId) {\r\n        // no-op since it's not the latest request\r\n        return\r\n      }\r\n\r\n      state.byUrl[url] = {\r\n        ...state.byUrl[url],\r\n        loadingRequestId: null,\r\n        error: errorMessage,\r\n        current: null,\r\n        pendingUpdate: null,\r\n      }\r\n    })\r\n    .addCase(addList, (state, { payload: url }) => {\r\n      if (!state.byUrl[url]) {\r\n        state.byUrl[url] = NEW_LIST_STATE\r\n      }\r\n    })\r\n    .addCase(removeList, (state, { payload: url }) => {\r\n      if (state.byUrl[url]) {\r\n        delete state.byUrl[url]\r\n      }\r\n      // remove list from active urls if needed\r\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\r\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\r\n      }\r\n    })\r\n    .addCase(enableList, (state, { payload: url }) => {\r\n      if (!state.byUrl[url]) {\r\n        state.byUrl[url] = NEW_LIST_STATE\r\n      }\r\n\r\n      if (state.activeListUrls && !state.activeListUrls.includes(url)) {\r\n        state.activeListUrls.push(url)\r\n      }\r\n\r\n      if (!state.activeListUrls) {\r\n        state.activeListUrls = [url]\r\n      }\r\n    })\r\n    .addCase(disableList, (state, { payload: url }) => {\r\n      if (state.activeListUrls && state.activeListUrls.includes(url)) {\r\n        state.activeListUrls = state.activeListUrls.filter((u) => u !== url)\r\n      }\r\n    })\r\n    .addCase(acceptListUpdate, (state, { payload: url }) => {\r\n      if (!state.byUrl[url]?.pendingUpdate) {\r\n        throw new Error('accept list update called without pending update')\r\n      }\r\n      state.byUrl[url] = {\r\n        ...state.byUrl[url],\r\n        pendingUpdate: null,\r\n        current: state.byUrl[url].pendingUpdate,\r\n      }\r\n    })\r\n    .addCase(updateVersion, (state) => {\r\n      // state loaded from localStorage, but new lists have never been initialized\r\n      if (!state.lastInitializedDefaultListOfLists) {\r\n        state.byUrl = initialState.byUrl\r\n        state.activeListUrls = initialState.activeListUrls\r\n      } else if (state.lastInitializedDefaultListOfLists) {\r\n        const lastInitializedSet = state.lastInitializedDefaultListOfLists.reduce<Set<string>>(\r\n          (s, l) => s.add(l),\r\n          new Set(),\r\n        )\r\n        const newListOfListsSet = DEFAULT_LIST_OF_LISTS.reduce<Set<string>>((s, l) => s.add(l), new Set())\r\n\r\n        DEFAULT_LIST_OF_LISTS.forEach((listUrl) => {\r\n          if (!lastInitializedSet.has(listUrl)) {\r\n            state.byUrl[listUrl] = NEW_LIST_STATE\r\n          }\r\n        })\r\n\r\n        state.lastInitializedDefaultListOfLists.forEach((listUrl) => {\r\n          if (!newListOfListsSet.has(listUrl)) {\r\n            delete state.byUrl[listUrl]\r\n          }\r\n        })\r\n      }\r\n\r\n      state.lastInitializedDefaultListOfLists = DEFAULT_LIST_OF_LISTS\r\n\r\n      // if no active lists, activate defaults\r\n      if (!state.activeListUrls) {\r\n        state.activeListUrls = DEFAULT_ACTIVE_LIST_URLS\r\n\r\n        // for each list on default list, initialize if needed\r\n        DEFAULT_ACTIVE_LIST_URLS.map((listUrl: string) => {\r\n          if (!state.byUrl[listUrl]) {\r\n            state.byUrl[listUrl] = NEW_LIST_STATE\r\n          }\r\n          return true\r\n        })\r\n      }\r\n    }),\r\n)\r\n"]},"metadata":{},"sourceType":"module"}