{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97154\\\\swap\\\\hami\\\\LokiswapUI\\\\src\\\\components\\\\Menu\\\\GlobalSettings\\\\ExpertModal.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Text, Flex, Message, Modal, Checkbox } from '@pancakeswap/uikit';\nimport { useExpertModeManager } from 'state/user/hooks';\nimport { useTranslation } from 'contexts/Localization';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ExpertModal = ({\n  setShowConfirmExpertModal,\n  setRememberExpertModeAcknowledgement\n}) => {\n  _s();\n\n  const [, toggleExpertMode] = useExpertModeManager();\n  const [isRememberChecked, setIsRememberChecked] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: t('Expert Mode'),\n    onBack: () => setShowConfirmExpertModal(false),\n    onDismiss: () => setShowConfirmExpertModal(false),\n    headerBackground: \"gradients.cardHeader\",\n    style: {\n      maxWidth: '360px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Message, {\n      variant: \"warning\",\n      mb: \"24px\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: t(\"Expert mode turns off the 'Confirm' transaction prompt, and allows high slippage trades that often result in bad rates and lost funds.\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Text, {\n      mb: \"24px\",\n      children: t('Only use this mode if you know what you’re doing.')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      alignItems: \"center\",\n      mb: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n        name: \"confirmed\",\n        type: \"checkbox\",\n        checked: isRememberChecked,\n        onChange: () => setIsRememberChecked(!isRememberChecked),\n        scale: \"sm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        ml: \"10px\",\n        color: \"textSubtle\",\n        style: {\n          userSelect: 'none'\n        },\n        children: t('Don’t show this again')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      mb: \"8px\",\n      id: \"confirm-expert-mode\",\n      onClick: () => {\n        // eslint-disable-next-line no-alert\n        if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\n          toggleExpertMode();\n          setShowConfirmExpertModal(false);\n\n          if (isRememberChecked) {\n            setRememberExpertModeAcknowledgement(true);\n          }\n        }\n      },\n      children: t('Turn On Expert Mode')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"secondary\",\n      onClick: () => {\n        setShowConfirmExpertModal(false);\n      },\n      children: t('Cancel')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ExpertModal, \"g6o4+DhegRmr0xVUhQ4KLDYhLeQ=\", false, function () {\n  return [useExpertModeManager, useTranslation];\n});\n\n_c = ExpertModal;\nexport default ExpertModal;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExpertModal\");","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/components/Menu/GlobalSettings/ExpertModal.tsx"],"names":["React","useState","Button","Text","Flex","Message","Modal","Checkbox","useExpertModeManager","useTranslation","ExpertModal","setShowConfirmExpertModal","setRememberExpertModeAcknowledgement","toggleExpertMode","isRememberChecked","setIsRememberChecked","t","maxWidth","userSelect","window","prompt"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, Text, Flex, Message, Modal, InjectedModalProps, Checkbox } from '@pancakeswap/uikit'\r\nimport { useExpertModeManager } from 'state/user/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\ninterface ExpertModalProps extends InjectedModalProps {\r\n  setShowConfirmExpertModal: (boolean) => void\r\n  setRememberExpertModeAcknowledgement: (boolean) => void\r\n}\r\n\r\nconst ExpertModal: React.FC<ExpertModalProps> = ({\r\n  setShowConfirmExpertModal,\r\n  setRememberExpertModeAcknowledgement,\r\n}) => {\r\n  const [, toggleExpertMode] = useExpertModeManager()\r\n  const [isRememberChecked, setIsRememberChecked] = useState(false)\r\n\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Modal\r\n      title={t('Expert Mode')}\r\n      onBack={() => setShowConfirmExpertModal(false)}\r\n      onDismiss={() => setShowConfirmExpertModal(false)}\r\n      headerBackground=\"gradients.cardHeader\"\r\n      style={{ maxWidth: '360px' }}\r\n    >\r\n      <Message variant=\"warning\" mb=\"24px\">\r\n        <Text>\r\n          {t(\r\n            \"Expert mode turns off the 'Confirm' transaction prompt, and allows high slippage trades that often result in bad rates and lost funds.\",\r\n          )}\r\n        </Text>\r\n      </Message>\r\n      <Text mb=\"24px\">{t('Only use this mode if you know what you’re doing.')}</Text>\r\n      <Flex alignItems=\"center\" mb=\"24px\">\r\n        <Checkbox\r\n          name=\"confirmed\"\r\n          type=\"checkbox\"\r\n          checked={isRememberChecked}\r\n          onChange={() => setIsRememberChecked(!isRememberChecked)}\r\n          scale=\"sm\"\r\n        />\r\n        <Text ml=\"10px\" color=\"textSubtle\" style={{ userSelect: 'none' }}>\r\n          {t('Don’t show this again')}\r\n        </Text>\r\n      </Flex>\r\n      <Button\r\n        mb=\"8px\"\r\n        id=\"confirm-expert-mode\"\r\n        onClick={() => {\r\n          // eslint-disable-next-line no-alert\r\n          if (window.prompt(`Please type the word \"confirm\" to enable expert mode.`) === 'confirm') {\r\n            toggleExpertMode()\r\n            setShowConfirmExpertModal(false)\r\n            if (isRememberChecked) {\r\n              setRememberExpertModeAcknowledgement(true)\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {t('Turn On Expert Mode')}\r\n      </Button>\r\n      <Button\r\n        variant=\"secondary\"\r\n        onClick={() => {\r\n          setShowConfirmExpertModal(false)\r\n        }}\r\n      >\r\n        {t('Cancel')}\r\n      </Button>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default ExpertModal\r\n"]},"metadata":{},"sourceType":"module"}