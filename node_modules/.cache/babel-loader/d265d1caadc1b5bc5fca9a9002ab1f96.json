{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import BigNumber from'bignumber.js';import masterchefABI from'config/abi/masterchef.json';import erc20 from'config/abi/erc20.json';import{getAddress,getMasterChefAddress}from'utils/addressHelpers';import{BIG_TEN,BIG_ZERO}from'utils/bigNumber';import multicall from'utils/multicall';var fetchFarm=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(farm){var _info$allocPoint,_info$depositFeeBP;var pid,lpAddresses,token,quoteToken,isTokenOnly,lpAddress,calls,_yield$multicall,_yield$multicall2,tokenBalanceLP,quoteTokenBalanceLP,lpTokenBalanceMC,singleTokenBalanceMC,lpTotalSupply,tokenDecimals,quoteTokenDecimals,lpTokenRatio,tokenAmountTotal,quoteTokenAmountTotal,tokenAmountMc,quoteTokenAmountMc,lpTotalInQuoteToken,_ref2,_ref3,info,totalAllocPoint,lokiPerSecond,startBlockHarvest,allocPoint,depositfee1,poolWeight,LokiPerSecond,canharvest;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:pid=farm.pid,lpAddresses=farm.lpAddresses,token=farm.token,quoteToken=farm.quoteToken,isTokenOnly=farm.isTokenOnly;lpAddress=getAddress(lpAddresses);calls=[// Balance of token in the LP contract\n{address:getAddress(token.address),name:'balanceOf',params:[lpAddress]},// Balance of quote token on LP contract\n{address:getAddress(quoteToken.address),name:'balanceOf',params:[lpAddress]},// Balance of LP tokens in the master chef contract\n{address:lpAddress,name:'balanceOf',params:[getMasterChefAddress()]},// Balance of Single token in the master chef contract\n{address:getAddress(token.address),name:'balanceOf',params:[getMasterChefAddress()]},// Total supply of LP tokens\n{address:lpAddress,name:'totalSupply'},// Token decimals\n{address:getAddress(token.address),name:'decimals'},// Quote token decimals\n{address:getAddress(quoteToken.address),name:'decimals'}];_context.next=5;return multicall(erc20,calls);case 5:_yield$multicall=_context.sent;_yield$multicall2=_slicedToArray(_yield$multicall,7);tokenBalanceLP=_yield$multicall2[0];quoteTokenBalanceLP=_yield$multicall2[1];lpTokenBalanceMC=_yield$multicall2[2];singleTokenBalanceMC=_yield$multicall2[3];lpTotalSupply=_yield$multicall2[4];tokenDecimals=_yield$multicall2[5];quoteTokenDecimals=_yield$multicall2[6];// Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\nlpTokenRatio=new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply));// Raw amount of token in the LP, including those not staked\ntokenAmountTotal=new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals));quoteTokenAmountTotal=new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals));// Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\ntokenAmountMc=tokenAmountTotal.times(lpTokenRatio);quoteTokenAmountMc=quoteTokenAmountTotal.times(lpTokenRatio);// Total staked in LP, in quote token value\nlpTotalInQuoteToken=isTokenOnly?new BigNumber(singleTokenBalanceMC).div(BIG_TEN.pow(tokenDecimals)):quoteTokenAmountMc.times(new BigNumber(2));// Only make masterchef calls if farm has pid\nif(!(pid||pid===0)){_context.next=26;break;}_context.next=23;return multicall(masterchefABI,[{address:getMasterChefAddress(),name:'poolInfo',params:[pid]},{address:getMasterChefAddress(),name:'totalAllocPoint'},{address:getMasterChefAddress(),name:'lokiPerSecond'}// Start Block Number when harvest start\n// {\n//   address: getMasterChefAddress(),\n//   name: 'startBlockHarvest',\n// },\n]);case 23:_context.t0=_context.sent;_context.next=27;break;case 26:_context.t0=[null,null];case 27:_ref2=_context.t0;_ref3=_slicedToArray(_ref2,4);info=_ref3[0];totalAllocPoint=_ref3[1];lokiPerSecond=_ref3[2];startBlockHarvest=_ref3[3];allocPoint=info?new BigNumber((_info$allocPoint=info.allocPoint)===null||_info$allocPoint===void 0?void 0:_info$allocPoint._hex):BIG_ZERO;depositfee1=info?new BigNumber((_info$depositFeeBP=info.depositFeeBP)===null||_info$depositFeeBP===void 0?void 0:_info$depositFeeBP._hex):BIG_ZERO;poolWeight=totalAllocPoint?allocPoint.div(new BigNumber(totalAllocPoint)):BIG_ZERO;LokiPerSecond=lokiPerSecond?new BigNumber(lokiPerSecond).div(BIG_TEN.pow(18)):BIG_ZERO;// const blockNumber = await simpleRpcProvider.getBlockNumber()\ncanharvest=true;return _context.abrupt(\"return\",{tokenAmountMc:tokenAmountMc.toJSON(),quoteTokenAmountMc:quoteTokenAmountMc.toJSON(),tokenAmountTotal:tokenAmountTotal.toJSON(),quoteTokenAmountTotal:quoteTokenAmountTotal.toJSON(),lpTotalSupply:new BigNumber(lpTotalSupply).toJSON(),lpTotalInQuoteToken:lpTotalInQuoteToken.toJSON(),tokenPriceVsQuote:quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),poolWeight:poolWeight.toJSON(),multiplier:\"\".concat(allocPoint.div(100).toString(),\"X\"),depositfee:\"\".concat(depositfee1.div(100).toString(),\"%\"),lokipersecond:LokiPerSecond.toJSON(),canharvest:canharvest});case 39:case\"end\":return _context.stop();}}},_callee);}));return function fetchFarm(_x){return _ref.apply(this,arguments);};}();export default fetchFarm;// export const getCountdownparams = async () => {\n//   const masterChefAddress = getMasterChefAddress()\n//   const calls = [\n//     // Current Harvest Fee\n//     {\n//       address: masterChefAddress,\n//       name: 'harvestFee',\n//     },\n//     // Harvest Fee Reduction Rate\n//     {\n//       address: masterChefAddress,\n//       name: 'harvestFeeReductionRate',\n//     },\n//     // Harvest Period\n//     {\n//       address: masterChefAddress,\n//       name: 'harvestTime',\n//     },\n//     // Initial Harvest Fee\n//     {\n//       address: masterChefAddress,\n//       name: 'initialHarvestFee',\n//     },\n//     // Locked Period\n//     {\n//       address: masterChefAddress,\n//       name: 'lockedTime',\n//     },\n//     // Start Block Number when harvest start\n//     {\n//       address: masterChefAddress,\n//       name: 'startBlockHarvest',\n//     },\n//   ]\n//   const [harvestFee, harvestFeeReductionRate, harvestTime, initialHarvestFee, lockedTime, startBlockHarvest] =\n//   await multicall(masterchefABI, calls)\n//   const blockNumber = await simpleRpcProvider.getBlockNumber()\n//   const isharvestnow = harvestTime && blockNumber ? startBlockHarvest < blockNumber : false\n//   const remainingtime = isharvestnow ? (new BigNumber(startBlockHarvest)).plus(new BigNumber(harvestTime)).minus(new BigNumber(blockNumber)).times(3) : (new BigNumber(startBlockHarvest)).minus(new BigNumber(blockNumber)).times(3)\n//   return {\n//     harvestFee: new BigNumber(harvestFee).div(100).toJSON(),\n//     harvestFeeReductionRate: new BigNumber (harvestFeeReductionRate).toJSON(),\n//     harvestTime: new BigNumber (harvestTime).toJSON(),\n//     lockedTime: new BigNumber (lockedTime).toJSON(),\n//     initialHarvestFee: new BigNumber (initialHarvestFee).toJSON(),\n//     startBlockHarvest: new BigNumber (startBlockHarvest).toJSON(),\n//     currentblocknumber: blockNumber ? new BigNumber (blockNumber).toJSON() : '0',\n//     isharvestnow,\n//     remainingtime: Number(remainingtime.toJSON()) +  Date.now() / 1000\n//   }\n// }","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/farms/fetchPublicFarmData.ts"],"names":["BigNumber","masterchefABI","erc20","getAddress","getMasterChefAddress","BIG_TEN","BIG_ZERO","multicall","fetchFarm","farm","pid","lpAddresses","token","quoteToken","isTokenOnly","lpAddress","calls","address","name","params","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","singleTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","tokenAmountTotal","pow","quoteTokenAmountTotal","tokenAmountMc","times","quoteTokenAmountMc","lpTotalInQuoteToken","info","totalAllocPoint","lokiPerSecond","startBlockHarvest","allocPoint","_hex","depositfee1","depositFeeBP","poolWeight","LokiPerSecond","canharvest","toJSON","tokenPriceVsQuote","multiplier","toString","depositfee","lokipersecond"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\r\nimport multicall from 'utils/multicall'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { Farm, SerializedBigNumber } from '../types'\r\n\r\ntype PublicFarmData = {\r\n  tokenAmountMc: SerializedBigNumber\r\n  quoteTokenAmountMc: SerializedBigNumber\r\n  tokenAmountTotal: SerializedBigNumber\r\n  quoteTokenAmountTotal: SerializedBigNumber\r\n  lpTotalInQuoteToken: SerializedBigNumber\r\n  lpTotalSupply: SerializedBigNumber\r\n  tokenPriceVsQuote: SerializedBigNumber\r\n  poolWeight: SerializedBigNumber\r\n  multiplier: string\r\n  depositfee: string\r\n  lokipersecond: SerializedBigNumber\r\n  canharvest: boolean\r\n}\r\n\r\nconst fetchFarm = async (farm: Farm): Promise<PublicFarmData> => {\r\n  const { pid, lpAddresses, token, quoteToken, isTokenOnly } = farm\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const calls = [\r\n    // Balance of token in the LP contract\r\n    {\r\n      address: getAddress(token.address),\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of quote token on LP contract\r\n    {\r\n      address: getAddress(quoteToken.address),\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of LP tokens in the master chef contract\r\n    {\r\n      address: lpAddress,\r\n      name: 'balanceOf',\r\n      params: [getMasterChefAddress()],\r\n    },\r\n    // Balance of Single token in the master chef contract\r\n    {\r\n      address: getAddress(token.address),\r\n      name: 'balanceOf',\r\n      params: [getMasterChefAddress()],\r\n    },\r\n    // Total supply of LP tokens\r\n    {\r\n      address: lpAddress,\r\n      name: 'totalSupply',\r\n    },\r\n    // Token decimals\r\n    {\r\n      address: getAddress(token.address),\r\n      name: 'decimals',\r\n    },\r\n    // Quote token decimals\r\n    {\r\n      address: getAddress(quoteToken.address),\r\n      name: 'decimals',\r\n    },\r\n  ]\r\n\r\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, singleTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\r\n    await multicall(erc20, calls)\r\n\r\n  \r\n    // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\r\n    const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n    // Raw amount of token in the LP, including those not staked\r\n    const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\r\n    const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\r\n\r\n    // Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\r\n    const tokenAmountMc = tokenAmountTotal.times(lpTokenRatio)\r\n    const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\r\n\r\n    // Total staked in LP, in quote token value\r\n    const lpTotalInQuoteToken = isTokenOnly ?  new BigNumber(singleTokenBalanceMC).div(BIG_TEN.pow(tokenDecimals)): quoteTokenAmountMc.times(new BigNumber(2))\r\n\r\n  // Only make masterchef calls if farm has pid\r\n  const [info, totalAllocPoint, lokiPerSecond, startBlockHarvest] =\r\n    pid || pid === 0\r\n      ? await multicall(masterchefABI, [\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'poolInfo',\r\n            params: [pid],\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'totalAllocPoint',\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'lokiPerSecond',\r\n          },\r\n          // Start Block Number when harvest start\r\n          // {\r\n          //   address: getMasterChefAddress(),\r\n          //   name: 'startBlockHarvest',\r\n          // },\r\n        ])\r\n      : [null, null]\r\n\r\n  const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\r\n  const depositfee1 = info ? new BigNumber(info.depositFeeBP?._hex) : BIG_ZERO\r\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO\r\n  const LokiPerSecond = lokiPerSecond? new BigNumber(lokiPerSecond).div(BIG_TEN.pow(18)) : BIG_ZERO\r\n  // const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n  const canharvest = true\r\n  return {\r\n    tokenAmountMc: tokenAmountMc.toJSON(),\r\n    quoteTokenAmountMc: quoteTokenAmountMc.toJSON(),\r\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\r\n    quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\r\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\r\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\r\n    poolWeight: poolWeight.toJSON(),\r\n    multiplier: `${allocPoint.div(100).toString()}X`,\r\n    depositfee: `${depositfee1.div(100).toString()}%`,\r\n    lokipersecond: LokiPerSecond.toJSON(),\r\n    canharvest\r\n  }\r\n}\r\n\r\nexport default fetchFarm\r\n\r\n// export const getCountdownparams = async () => {\r\n//   const masterChefAddress = getMasterChefAddress()\r\n//   const calls = [\r\n//     // Current Harvest Fee\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'harvestFee',\r\n//     },\r\n//     // Harvest Fee Reduction Rate\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'harvestFeeReductionRate',\r\n//     },\r\n//     // Harvest Period\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'harvestTime',\r\n//     },\r\n//     // Initial Harvest Fee\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'initialHarvestFee',\r\n//     },\r\n//     // Locked Period\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'lockedTime',\r\n//     },\r\n//     // Start Block Number when harvest start\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'startBlockHarvest',\r\n//     },\r\n//   ]\r\n\r\n//   const [harvestFee, harvestFeeReductionRate, harvestTime, initialHarvestFee, lockedTime, startBlockHarvest] =\r\n//   await multicall(masterchefABI, calls)\r\n//   const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n//   const isharvestnow = harvestTime && blockNumber ? startBlockHarvest < blockNumber : false\r\n//   const remainingtime = isharvestnow ? (new BigNumber(startBlockHarvest)).plus(new BigNumber(harvestTime)).minus(new BigNumber(blockNumber)).times(3) : (new BigNumber(startBlockHarvest)).minus(new BigNumber(blockNumber)).times(3)\r\n//   return {\r\n//     harvestFee: new BigNumber(harvestFee).div(100).toJSON(),\r\n//     harvestFeeReductionRate: new BigNumber (harvestFeeReductionRate).toJSON(),\r\n//     harvestTime: new BigNumber (harvestTime).toJSON(),\r\n//     lockedTime: new BigNumber (lockedTime).toJSON(),\r\n//     initialHarvestFee: new BigNumber (initialHarvestFee).toJSON(),\r\n//     startBlockHarvest: new BigNumber (startBlockHarvest).toJSON(),\r\n//     currentblocknumber: blockNumber ? new BigNumber (blockNumber).toJSON() : '0',\r\n//     isharvestnow,\r\n//     remainingtime: Number(remainingtime.toJSON()) +  Date.now() / 1000\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}