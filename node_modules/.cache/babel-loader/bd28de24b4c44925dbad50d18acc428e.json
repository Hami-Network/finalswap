{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject,_templateObject2;import React from'react';import{Card,CardBody,Text,Heading}from'@pancakeswap/uikit';import styled from'styled-components';import{getBalanceNumber}from'utils/formatBalance';import{useTotalSupply,useBurnedBalance}from'hooks/useTokenBalance';import{useFarms,usePriceCakeBusd}from'state/farms/hooks';import{getCakeAddress}from'utils/addressHelpers';import{useTranslation}from'contexts/Localization';import CardValue from'./CardValue';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var StyledCakeStats=styled(Card)(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  margin-left: auto;\\n  margin-right: auto;\\n\"])));var Row=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  align-items: center;\\n  display: flex;\\n  font-size: 14px;\\n  justify-content: space-between;\\n  margin-bottom: 8px;\\n\"])));var CakeStats=function CakeStats(){var _useTranslation=useTranslation(),t=_useTranslation.t;var totalSupply=useTotalSupply();var burnedBalance=getBalanceNumber(useBurnedBalance(getCakeAddress()));var totalMinted=totalSupply?getBalanceNumber(totalSupply):0;var cakeSupply=totalSupply?getBalanceNumber(totalSupply)-burnedBalance:0;var NNPriceBusd=usePriceCakeBusd();var mcap=NNPriceBusd.isNaN()?0:getBalanceNumber(NNPriceBusd.times(cakeSupply).times(1000000000));var farms=useFarms();console.log('log->farms',farms);var rewardPerBlock=farms&&farms.data?farms.data[0].lokipersecond:0;return/*#__PURE__*/_jsx(StyledCakeStats,{children:/*#__PURE__*/_jsxs(CardBody,{children:[/*#__PURE__*/_jsx(Heading,{scale:\"xl\",mb:\"24px\",children:t('LOKI Stats')}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:t('Market Cap')}),/*#__PURE__*/_jsx(CardValue,{fontSize:\"14px\",value:mcap,decimals:2,prefix:\"$\"})]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:t('Total Minted')}),totalSupply&&/*#__PURE__*/_jsx(CardValue,{fontSize:\"14px\",value:totalMinted,decimals:0})]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:t('Total Burned')}),/*#__PURE__*/_jsx(CardValue,{fontSize:\"14px\",value:burnedBalance,decimals:0})]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:t('Circulating Supply')}),cakeSupply&&/*#__PURE__*/_jsx(CardValue,{fontSize:\"14px\",value:cakeSupply,decimals:0})]}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:t('Rewards LOKI/block')}),/*#__PURE__*/_jsx(Text,{fontSize:\"14px\",children:rewardPerBlock})]})]})});};export default CakeStats;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Home/components/CakeStats.tsx"],"names":["React","Card","CardBody","Text","Heading","styled","getBalanceNumber","useTotalSupply","useBurnedBalance","useFarms","usePriceCakeBusd","getCakeAddress","useTranslation","CardValue","StyledCakeStats","Row","div","CakeStats","t","totalSupply","burnedBalance","totalMinted","cakeSupply","NNPriceBusd","mcap","isNaN","times","farms","console","log","rewardPerBlock","data","lokipersecond"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Card, CardBody, Text, Heading } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const totalMinted = totalSupply ? getBalanceNumber(totalSupply) : 0\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n  const NNPriceBusd = usePriceCakeBusd()\r\n  const mcap = NNPriceBusd.isNaN() ? 0 : getBalanceNumber(NNPriceBusd.times(cakeSupply).times(1000000000))\r\n  const farms = useFarms()\r\n  console.log('log->farms', farms);\r\n  const rewardPerBlock = farms && farms.data ? farms.data[0].lokipersecond : 0\r\n\r\n  \r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('LOKI Stats')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" value={mcap} decimals={2} prefix=\"$\" />\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total Minted')}</Text>\r\n          {totalSupply && <CardValue fontSize=\"14px\" value={totalMinted} decimals={0} />}  \r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Total Burned')}</Text>\r\n          <CardValue fontSize=\"14px\" value={burnedBalance} decimals={0} />    \r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Circulating Supply')}</Text>\r\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}       \r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('Rewards LOKI/block')}</Text>\r\n          <Text fontSize=\"14px\">{rewardPerBlock}</Text>\r\n        </Row>\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n"]},"metadata":{},"sourceType":"module"}