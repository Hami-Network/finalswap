{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97154\\\\swap\\\\hami\\\\LokiswapUI\\\\src\\\\components\\\\Menu\\\\GlobalSettings\\\\TransactionSettings.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Text, Button, Input, Flex, Box } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useUserSlippageTolerance, useUserTransactionTTL } from 'state/user/hooks';\nimport QuestionHelper from '../../QuestionHelper';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar SlippageError;\n\n(function (SlippageError) {\n  SlippageError[\"InvalidInput\"] = \"InvalidInput\";\n  SlippageError[\"RiskyLow\"] = \"RiskyLow\";\n  SlippageError[\"RiskyHigh\"] = \"RiskyHigh\";\n})(SlippageError || (SlippageError = {}));\n\nvar DeadlineError;\n\n(function (DeadlineError) {\n  DeadlineError[\"InvalidInput\"] = \"InvalidInput\";\n})(DeadlineError || (DeadlineError = {}));\n\nconst SlippageTabs = () => {\n  _s();\n\n  const [userSlippageTolerance, setUserSlippageTolerance] = useUserSlippageTolerance();\n  const [ttl, setTtl] = useUserTransactionTTL();\n  const [slippageInput, setSlippageInput] = useState('');\n  const [deadlineInput, setDeadlineInput] = useState('');\n  const {\n    t\n  } = useTranslation();\n  const slippageInputIsValid = slippageInput === '' || (userSlippageTolerance / 100).toFixed(2) === Number.parseFloat(slippageInput).toFixed(2);\n  const deadlineInputIsValid = deadlineInput === '' || (ttl / 60).toString() === deadlineInput;\n  let slippageError;\n\n  if (slippageInput !== '' && !slippageInputIsValid) {\n    slippageError = SlippageError.InvalidInput;\n  } else if (slippageInputIsValid && userSlippageTolerance < 50) {\n    slippageError = SlippageError.RiskyLow;\n  } else if (slippageInputIsValid && userSlippageTolerance > 500) {\n    slippageError = SlippageError.RiskyHigh;\n  } else {\n    slippageError = undefined;\n  }\n\n  let deadlineError;\n\n  if (deadlineInput !== '' && !deadlineInputIsValid) {\n    deadlineError = DeadlineError.InvalidInput;\n  } else {\n    deadlineError = undefined;\n  }\n\n  const parseCustomSlippage = value => {\n    setSlippageInput(value);\n\n    try {\n      const valueAsIntFromRoundedFloat = Number.parseInt((Number.parseFloat(value) * 100).toString());\n\n      if (!Number.isNaN(valueAsIntFromRoundedFloat) && valueAsIntFromRoundedFloat < 5000) {\n        setUserSlippageTolerance(valueAsIntFromRoundedFloat);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const parseCustomDeadline = value => {\n    setDeadlineInput(value);\n\n    try {\n      const valueAsInt = Number.parseInt(value) * 60;\n\n      if (!Number.isNaN(valueAsInt) && valueAsInt > 0) {\n        setTtl(valueAsInt);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      mb: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        mb: \"12px\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: t('Slippage Tolerance')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: t('Setting a high slippage tolerance can help transactions succeed, but you may not get such a good price. Use with caution.'),\n          placement: \"top-start\",\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        flexWrap: \"wrap\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          mt: \"4px\",\n          mr: \"4px\",\n          scale: \"sm\",\n          onClick: () => {\n            setSlippageInput('');\n            setUserSlippageTolerance(10);\n          },\n          variant: userSlippageTolerance === 10 ? 'primary' : 'tertiary',\n          children: \"0.1%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mt: \"4px\",\n          mr: \"4px\",\n          scale: \"sm\",\n          onClick: () => {\n            setSlippageInput('');\n            setUserSlippageTolerance(50);\n          },\n          variant: userSlippageTolerance === 50 ? 'primary' : 'tertiary',\n          children: \"0.5%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          mr: \"4px\",\n          mt: \"4px\",\n          scale: \"sm\",\n          onClick: () => {\n            setSlippageInput('');\n            setUserSlippageTolerance(100);\n          },\n          variant: userSlippageTolerance === 100 ? 'primary' : 'tertiary',\n          children: \"1.0%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Flex, {\n          alignItems: \"center\",\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            width: \"76px\",\n            mt: \"4px\",\n            children: /*#__PURE__*/_jsxDEV(Input, {\n              scale: \"sm\",\n              placeholder: (userSlippageTolerance / 100).toFixed(2),\n              value: slippageInput,\n              onBlur: () => {\n                parseCustomSlippage((userSlippageTolerance / 100).toFixed(2));\n              },\n              onChange: e => parseCustomSlippage(e.target.value),\n              isWarning: !slippageInputIsValid,\n              isSuccess: ![10, 50, 100].includes(userSlippageTolerance)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 128,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Text, {\n            color: \"primary\",\n            bold: true,\n            ml: \"2px\",\n            children: \"%\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), !!slippageError && /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"14px\",\n        color: slippageError === SlippageError.InvalidInput ? 'red' : '#F3841E',\n        mt: \"8px\",\n        children: slippageError === SlippageError.InvalidInput ? t('Enter a valid slippage percentage') : slippageError === SlippageError.RiskyLow ? t('Your transaction may fail') : t('Your transaction may be frontrun')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      justifyContent: \"space-between\",\n      alignItems: \"center\",\n      mb: \"24px\",\n      children: [/*#__PURE__*/_jsxDEV(Flex, {\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Text, {\n          children: t('Tx deadline (mins)')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(QuestionHelper, {\n          text: t('Your transaction will revert if it is left confirming for longer than this time.'),\n          placement: \"top-start\",\n          ml: \"4px\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          width: \"52px\",\n          mt: \"4px\",\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            scale: \"sm\",\n            color: deadlineError ? 'red' : undefined,\n            onBlur: () => {\n              parseCustomDeadline((ttl / 60).toString());\n            },\n            placeholder: (ttl / 60).toString(),\n            value: deadlineInput,\n            onChange: e => parseCustomDeadline(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SlippageTabs, \"OCLnPMrRbm4dXYwsCyzd3T+GKKE=\", false, function () {\n  return [useUserSlippageTolerance, useUserTransactionTTL, useTranslation];\n});\n\n_c = SlippageTabs;\nexport default SlippageTabs;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlippageTabs\");","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/components/Menu/GlobalSettings/TransactionSettings.tsx"],"names":["React","useState","Text","Button","Input","Flex","Box","useTranslation","useUserSlippageTolerance","useUserTransactionTTL","QuestionHelper","SlippageError","DeadlineError","SlippageTabs","userSlippageTolerance","setUserSlippageTolerance","ttl","setTtl","slippageInput","setSlippageInput","deadlineInput","setDeadlineInput","t","slippageInputIsValid","toFixed","Number","parseFloat","deadlineInputIsValid","toString","slippageError","InvalidInput","RiskyLow","RiskyHigh","undefined","deadlineError","parseCustomSlippage","value","valueAsIntFromRoundedFloat","parseInt","isNaN","error","console","parseCustomDeadline","valueAsInt","e","target","includes"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport { Text, Button, Input, Flex, Box } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useUserSlippageTolerance, useUserTransactionTTL } from 'state/user/hooks'\r\nimport QuestionHelper from '../../QuestionHelper'\r\n\r\nenum SlippageError {\r\n  InvalidInput = 'InvalidInput',\r\n  RiskyLow = 'RiskyLow',\r\n  RiskyHigh = 'RiskyHigh',\r\n}\r\n\r\nenum DeadlineError {\r\n  InvalidInput = 'InvalidInput',\r\n}\r\n\r\nconst SlippageTabs = () => {\r\n  const [userSlippageTolerance, setUserSlippageTolerance] = useUserSlippageTolerance()\r\n  const [ttl, setTtl] = useUserTransactionTTL()\r\n  const [slippageInput, setSlippageInput] = useState('')\r\n  const [deadlineInput, setDeadlineInput] = useState('')\r\n\r\n  const { t } = useTranslation()\r\n\r\n  const slippageInputIsValid =\r\n    slippageInput === '' || (userSlippageTolerance / 100).toFixed(2) === Number.parseFloat(slippageInput).toFixed(2)\r\n  const deadlineInputIsValid = deadlineInput === '' || (ttl / 60).toString() === deadlineInput\r\n\r\n  let slippageError: SlippageError | undefined\r\n  if (slippageInput !== '' && !slippageInputIsValid) {\r\n    slippageError = SlippageError.InvalidInput\r\n  } else if (slippageInputIsValid && userSlippageTolerance < 50) {\r\n    slippageError = SlippageError.RiskyLow\r\n  } else if (slippageInputIsValid && userSlippageTolerance > 500) {\r\n    slippageError = SlippageError.RiskyHigh\r\n  } else {\r\n    slippageError = undefined\r\n  }\r\n\r\n  let deadlineError: DeadlineError | undefined\r\n  if (deadlineInput !== '' && !deadlineInputIsValid) {\r\n    deadlineError = DeadlineError.InvalidInput\r\n  } else {\r\n    deadlineError = undefined\r\n  }\r\n\r\n  const parseCustomSlippage = (value: string) => {\r\n    setSlippageInput(value)\r\n\r\n    try {\r\n      const valueAsIntFromRoundedFloat = Number.parseInt((Number.parseFloat(value) * 100).toString())\r\n      if (!Number.isNaN(valueAsIntFromRoundedFloat) && valueAsIntFromRoundedFloat < 5000) {\r\n        setUserSlippageTolerance(valueAsIntFromRoundedFloat)\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  const parseCustomDeadline = (value: string) => {\r\n    setDeadlineInput(value)\r\n\r\n    try {\r\n      const valueAsInt: number = Number.parseInt(value) * 60\r\n      if (!Number.isNaN(valueAsInt) && valueAsInt > 0) {\r\n        setTtl(valueAsInt)\r\n      }\r\n    } catch (error) {\r\n      console.error(error)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Flex flexDirection=\"column\">\r\n      <Flex flexDirection=\"column\" mb=\"24px\">\r\n        <Flex mb=\"12px\">\r\n          <Text>{t('Slippage Tolerance')}</Text>\r\n          <QuestionHelper\r\n            text={t(\r\n              'Setting a high slippage tolerance can help transactions succeed, but you may not get such a good price. Use with caution.',\r\n            )}\r\n            placement=\"top-start\"\r\n            ml=\"4px\"\r\n          />\r\n        </Flex>\r\n        <Flex flexWrap=\"wrap\">\r\n          <Button\r\n             \r\n            mt=\"4px\"\r\n            mr=\"4px\"\r\n            scale=\"sm\"\r\n            onClick={() => {\r\n              setSlippageInput('')\r\n              setUserSlippageTolerance(10)\r\n            }}\r\n            variant={userSlippageTolerance === 10 ? 'primary' : 'tertiary'}\r\n          >\r\n            0.1%\r\n          </Button>\r\n          <Button\r\n             \r\n            mt=\"4px\"\r\n            mr=\"4px\"\r\n            scale=\"sm\"\r\n            onClick={() => {\r\n              setSlippageInput('')\r\n              setUserSlippageTolerance(50)\r\n            }}\r\n            variant={userSlippageTolerance === 50 ? 'primary' : 'tertiary'}\r\n          >\r\n            0.5%\r\n          </Button>\r\n          <Button\r\n             \r\n            mr=\"4px\"\r\n            mt=\"4px\"\r\n            scale=\"sm\"\r\n            onClick={() => {\r\n              setSlippageInput('')\r\n              setUserSlippageTolerance(100)\r\n            }}\r\n            variant={userSlippageTolerance === 100 ? 'primary' : 'tertiary'}\r\n          >\r\n            1.0%\r\n          </Button>\r\n          <Flex alignItems=\"center\">\r\n            <Box width=\"76px\" mt=\"4px\">\r\n              <Input\r\n                scale=\"sm\"\r\n                placeholder={(userSlippageTolerance / 100).toFixed(2)}\r\n                value={slippageInput}\r\n                onBlur={() => {\r\n                  parseCustomSlippage((userSlippageTolerance / 100).toFixed(2))\r\n                }}\r\n                onChange={(e) => parseCustomSlippage(e.target.value)}\r\n                isWarning={!slippageInputIsValid}\r\n                isSuccess={![10, 50, 100].includes(userSlippageTolerance)}\r\n              />\r\n            </Box>\r\n            <Text color=\"primary\" bold ml=\"2px\">\r\n              %\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        {!!slippageError && (\r\n          <Text fontSize=\"14px\" color={slippageError === SlippageError.InvalidInput ? 'red' : '#F3841E'} mt=\"8px\">\r\n            {slippageError === SlippageError.InvalidInput\r\n              ? t('Enter a valid slippage percentage')\r\n              : slippageError === SlippageError.RiskyLow\r\n              ? t('Your transaction may fail')\r\n              : t('Your transaction may be frontrun')}\r\n          </Text>\r\n        )}\r\n      </Flex>\r\n      <Flex justifyContent=\"space-between\" alignItems=\"center\" mb=\"24px\">\r\n        <Flex alignItems=\"center\">\r\n          <Text>{t('Tx deadline (mins)')}</Text>\r\n          <QuestionHelper\r\n            text={t('Your transaction will revert if it is left confirming for longer than this time.')}\r\n            placement=\"top-start\"\r\n            ml=\"4px\"\r\n          />\r\n        </Flex>\r\n        <Flex>\r\n          <Box width=\"52px\" mt=\"4px\">\r\n            <Input\r\n              scale=\"sm\"\r\n              color={deadlineError ? 'red' : undefined}\r\n              onBlur={() => {\r\n                parseCustomDeadline((ttl / 60).toString())\r\n              }}\r\n              placeholder={(ttl / 60).toString()}\r\n              value={deadlineInput}\r\n              onChange={(e) => parseCustomDeadline(e.target.value)}\r\n            />\r\n          </Box>\r\n        </Flex>\r\n      </Flex>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default SlippageTabs\r\n"]},"metadata":{},"sourceType":"module"}