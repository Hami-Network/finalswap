{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _toConsumableArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import ifosList from'config/constants/ifo';import{campaignMap}from'config/constants/campaigns';import{multicallv2}from'utils/multicall';import{getPointCenterIfoAddress}from'utils/addressHelpers';import pointCenterIfoABI from'config/abi/pointCenterIfo.json';export var getAchievementTitle=function getAchievementTitle(campaign){switch(campaign.type){case'ifo':return{key:'IFO Shopper: %title%',data:{title:campaign.title}};default:return campaign.title;}};export var getAchievementDescription=function getAchievementDescription(campaign){switch(campaign.type){case'ifo':return{key:'Committed more than $5 worth of LP in the %title% IFO',data:{title:campaign.title}};default:return campaign.description;}};/**\r\n * Checks if a wallet is eligible to claim points from valid IFO's\r\n */export var getClaimableIfoData=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var ifoCampaigns,claimStatusCalls,claimStatuses,claimableIfoData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:ifoCampaigns=ifosList.filter(function(ifoItem){return ifoItem.campaignId!==undefined;});// Returns the claim status of every IFO with a campaign ID\nclaimStatusCalls=ifoCampaigns.map(function(_ref2){var address=_ref2.address;return{address:getPointCenterIfoAddress(),name:'checkClaimStatus',params:[account,address]};});_context.next=4;return multicallv2(pointCenterIfoABI,claimStatusCalls,{requireSuccess:false});case 4:claimStatuses=_context.sent;_context.next=7;return multicallv2(pointCenterIfoABI,claimStatuses.reduce(function(accum,claimStatusArr,index){if(claimStatusArr===null){return accum;}var _claimStatusArr=_slicedToArray(claimStatusArr,1),claimStatus=_claimStatusArr[0];if(claimStatus===true){return[].concat(_toConsumableArray(accum),[{address:getPointCenterIfoAddress(),name:'ifos',params:[index]}]);}return accum;},[]));case 7:claimableIfoData=_context.sent;return _context.abrupt(\"return\",claimableIfoData.reduce(function(accum,claimableIfoDataItem){if(!campaignMap.has(claimableIfoDataItem.campaignId)){return accum;}var campaignMeta=campaignMap.get(claimableIfoDataItem.campaignId);var _ifoCampaigns$find=ifoCampaigns.find(function(ifoCampaign){return ifoCampaign.campaignId===claimableIfoDataItem.campaignId;}),address=_ifoCampaigns$find.address;return[].concat(_toConsumableArray(accum),[{address:address,id:claimableIfoDataItem.campaignId,type:'ifo',title:getAchievementTitle(campaignMeta),description:getAchievementDescription(campaignMeta),badge:campaignMeta.badge,points:claimableIfoDataItem.numberPoints.toNumber()}]);},[]));case 9:case\"end\":return _context.stop();}}},_callee);}));return function getClaimableIfoData(_x){return _ref.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/utils/achievements.ts"],"names":["ifosList","campaignMap","multicallv2","getPointCenterIfoAddress","pointCenterIfoABI","getAchievementTitle","campaign","type","key","data","title","getAchievementDescription","description","getClaimableIfoData","account","ifoCampaigns","filter","ifoItem","campaignId","undefined","claimStatusCalls","map","address","name","params","requireSuccess","claimStatuses","reduce","accum","claimStatusArr","index","claimStatus","claimableIfoData","claimableIfoDataItem","has","campaignMeta","get","find","ifoCampaign","id","badge","points","numberPoints","toNumber"],"mappings":"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","sourcesContent":["import { ethers } from 'ethers'\r\nimport { Campaign } from 'config/constants/types'\r\nimport ifosList from 'config/constants/ifo'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { Achievement, TranslatableText } from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport { getPointCenterIfoAddress } from 'utils/addressHelpers'\r\nimport pointCenterIfoABI from 'config/abi/pointCenterIfo.json'\r\n\r\ninterface IfoMapResponse {\r\n  thresholdToClaim: string\r\n  campaignId: string\r\n  numberPoints: ethers.BigNumber\r\n}\r\n\r\nexport const getAchievementTitle = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'IFO Shopper: %title%',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.title\r\n  }\r\n}\r\n\r\nexport const getAchievementDescription = (campaign: Campaign): TranslatableText => {\r\n  switch (campaign.type) {\r\n    case 'ifo':\r\n      return {\r\n        key: 'Committed more than $5 worth of LP in the %title% IFO',\r\n        data: {\r\n          title: campaign.title as string,\r\n        },\r\n      }\r\n    default:\r\n      return campaign.description\r\n  }\r\n}\r\n\r\n/**\r\n * Checks if a wallet is eligible to claim points from valid IFO's\r\n */\r\nexport const getClaimableIfoData = async (account: string): Promise<Achievement[]> => {\r\n  const ifoCampaigns = ifosList.filter((ifoItem) => ifoItem.campaignId !== undefined)\r\n\r\n  // Returns the claim status of every IFO with a campaign ID\r\n  const claimStatusCalls = ifoCampaigns.map(({ address }) => {\r\n    return {\r\n      address: getPointCenterIfoAddress(),\r\n      name: 'checkClaimStatus',\r\n      params: [account, address],\r\n    }\r\n  })\r\n\r\n  const claimStatuses = (await multicallv2(pointCenterIfoABI, claimStatusCalls, { requireSuccess: false })) as\r\n    | [boolean][]\r\n    | null\r\n\r\n  // Get IFO data for all IFO's that are eligible to claim\r\n  const claimableIfoData = (await multicallv2(\r\n    pointCenterIfoABI,\r\n    claimStatuses.reduce((accum, claimStatusArr, index) => {\r\n      if (claimStatusArr === null) {\r\n        return accum\r\n      }\r\n\r\n      const [claimStatus] = claimStatusArr\r\n\r\n      if (claimStatus === true) {\r\n        return [...accum, { address: getPointCenterIfoAddress(), name: 'ifos', params: [index] }]\r\n      }\r\n\r\n      return accum\r\n    }, []),\r\n  )) as IfoMapResponse[]\r\n\r\n  // Transform response to an Achievement\r\n  return claimableIfoData.reduce((accum, claimableIfoDataItem) => {\r\n    if (!campaignMap.has(claimableIfoDataItem.campaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(claimableIfoDataItem.campaignId)\r\n    const { address } = ifoCampaigns.find((ifoCampaign) => ifoCampaign.campaignId === claimableIfoDataItem.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        address,\r\n        id: claimableIfoDataItem.campaignId,\r\n        type: 'ifo',\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: claimableIfoDataItem.numberPoints.toNumber(),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}