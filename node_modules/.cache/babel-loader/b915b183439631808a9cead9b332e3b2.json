{"ast":null,"code":"import _defineProperty from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject,_templateObject2,_templateObject3;import{request,gql}from'graphql-request';import{GRAPH_API_PREDICTION}from'config/constants/endpoints';import{ethers}from'ethers';import{BetPosition,PredictionStatus}from'state/types';import{multicallv2}from'utils/multicall';import predictionsAbi from'config/abi/predictions.json';import{getPredictionsAddress}from'utils/addressHelpers';import{getRoundBaseFields,getBetBaseFields,getUserBaseFields}from'./queries';export var Result;(function(Result){Result[\"WIN\"]=\"win\";Result[\"LOSE\"]=\"lose\";Result[\"CANCELED\"]=\"canceled\";Result[\"LIVE\"]=\"live\";})(Result||(Result={}));export var numberOrNull=function numberOrNull(value){if(value===null){return null;}var valueNum=Number(value);return Number.isNaN(valueNum)?null:valueNum;};export var transformUserResponse=function transformUserResponse(userResponse){var id=userResponse.id,createdAt=userResponse.createdAt,updatedAt=userResponse.updatedAt,block=userResponse.block,totalBets=userResponse.totalBets,totalBetsBull=userResponse.totalBetsBull,totalBetsBear=userResponse.totalBetsBear,totalBNB=userResponse.totalBNB,totalBNBBull=userResponse.totalBNBBull,totalBNBBear=userResponse.totalBNBBear,totalBetsClaimed=userResponse.totalBetsClaimed,totalBNBClaimed=userResponse.totalBNBClaimed,winRate=userResponse.winRate,averageBNB=userResponse.averageBNB,netBNB=userResponse.netBNB;return{id:id,createdAt:numberOrNull(createdAt),updatedAt:numberOrNull(updatedAt),block:numberOrNull(block),totalBets:numberOrNull(totalBets),totalBetsBull:numberOrNull(totalBetsBull),totalBetsBear:numberOrNull(totalBetsBear),totalBNB:totalBNB?parseFloat(totalBNB):0,totalBNBBull:totalBNBBull?parseFloat(totalBNBBull):0,totalBNBBear:totalBNBBear?parseFloat(totalBNBBear):0,totalBetsClaimed:numberOrNull(totalBetsClaimed),totalBNBClaimed:totalBNBClaimed?parseFloat(totalBNBClaimed):0,winRate:winRate?parseFloat(winRate):0,averageBNB:averageBNB?parseFloat(averageBNB):0,netBNB:netBNB?parseFloat(netBNB):0};};var getRoundPosition=function getRoundPosition(positionResponse){if(positionResponse==='Bull'){return BetPosition.BULL;}if(positionResponse==='Bear'){return BetPosition.BEAR;}return null;};export var transformBetResponse=function transformBetResponse(betResponse){var bet={id:betResponse.id,hash:betResponse.hash,block:numberOrNull(betResponse.block),amount:betResponse.amount?parseFloat(betResponse.amount):0,position:betResponse.position==='Bull'?BetPosition.BULL:BetPosition.BEAR,claimed:betResponse.claimed,claimedAt:numberOrNull(betResponse.claimedAt),claimedBlock:numberOrNull(betResponse.claimedBlock),claimedHash:betResponse.claimedHash,claimedBNB:betResponse.claimedBNB?parseFloat(betResponse.claimedBNB):0,claimedNetBNB:betResponse.claimedNetBNB?parseFloat(betResponse.claimedNetBNB):0,createdAt:numberOrNull(betResponse.createdAt),updatedAt:numberOrNull(betResponse.updatedAt)};if(betResponse.user){bet.user=transformUserResponse(betResponse.user);}if(betResponse.round){bet.round=transformRoundResponse(betResponse.round);}return bet;};export var transformRoundResponse=function transformRoundResponse(roundResponse){var id=roundResponse.id,epoch=roundResponse.epoch,failed=roundResponse.failed,position=roundResponse.position,startAt=roundResponse.startAt,startBlock=roundResponse.startBlock,startHash=roundResponse.startHash,lockAt=roundResponse.lockAt,lockBlock=roundResponse.lockBlock,lockHash=roundResponse.lockHash,lockPrice=roundResponse.lockPrice,lockRoundId=roundResponse.lockRoundId,closeAt=roundResponse.closeAt,closeBlock=roundResponse.closeBlock,closeHash=roundResponse.closeHash,closePrice=roundResponse.closePrice,closeRoundId=roundResponse.closeRoundId,totalBets=roundResponse.totalBets,totalAmount=roundResponse.totalAmount,bullBets=roundResponse.bullBets,bullAmount=roundResponse.bullAmount,bearBets=roundResponse.bearBets,bearAmount=roundResponse.bearAmount,_roundResponse$bets=roundResponse.bets,bets=_roundResponse$bets===void 0?[]:_roundResponse$bets;return{id:id,failed:failed,startHash:startHash,lockHash:lockHash,lockRoundId:lockRoundId,closeRoundId:closeRoundId,closeHash:closeHash,position:getRoundPosition(position),epoch:numberOrNull(epoch),startAt:numberOrNull(startAt),startBlock:numberOrNull(startBlock),lockAt:numberOrNull(lockAt),lockBlock:numberOrNull(lockBlock),lockPrice:lockPrice?parseFloat(lockPrice):0,closeAt:numberOrNull(closeAt),closeBlock:numberOrNull(closeBlock),closePrice:closePrice?parseFloat(closePrice):0,totalBets:numberOrNull(totalBets),totalAmount:totalAmount?parseFloat(totalAmount):0,bullBets:numberOrNull(bullBets),bullAmount:bullAmount?parseFloat(bullAmount):0,bearBets:numberOrNull(bearBets),bearAmount:bearAmount?parseFloat(bearAmount):0,bets:bets.map(transformBetResponse)};};export var getRoundResult=function getRoundResult(bet,currentEpoch){var round=bet.round;if(round.failed){return Result.CANCELED;}if(round.epoch>=currentEpoch-1){return Result.LIVE;}var roundResultPosition=round.closePrice>round.lockPrice?BetPosition.BULL:BetPosition.BEAR;return bet.position===roundResultPosition?Result.WIN:Result.LOSE;};/**\r\n * Given a bet object, check if it is eligible to be claimed or refunded\r\n */export var getCanClaim=function getCanClaim(bet){return!bet.claimed&&(bet.position===bet.round.position||bet.round.failed===true);};/**\r\n * Returns only bets where the user has won.\r\n * This is necessary because the API currently cannot distinguish between an uncliamed bet that has won or lost\r\n */export var getUnclaimedWinningBets=function getUnclaimedWinningBets(bets){return bets.filter(getCanClaim);};export var getTotalWon=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _ref2,market,totalBNB,totalBNBTreasury;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return request(GRAPH_API_PREDICTION,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n      query getTotalWonData {\\n        market(id: 1) {\\n          totalBNB\\n          totalBNBTreasury\\n        }\\n      }\\n    \"]))));case 2:_ref2=_context.sent;market=_ref2.market;totalBNB=market.totalBNB?parseFloat(market.totalBNB):0;totalBNBTreasury=market.totalBNBTreasury?parseFloat(market.totalBNBTreasury):0;return _context.abrupt(\"return\",Math.max(totalBNB-totalBNBTreasury,0));case 7:case\"end\":return _context.stop();}}},_callee);}));return function getTotalWon(){return _ref.apply(this,arguments);};}();export var getBetHistory=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var where,first,skip,response,_args2=arguments;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:where=_args2.length>0&&_args2[0]!==undefined?_args2[0]:{};first=_args2.length>1&&_args2[1]!==undefined?_args2[1]:1000;skip=_args2.length>2&&_args2[2]!==undefined?_args2[2]:0;_context2.next=5;return request(GRAPH_API_PREDICTION,gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\\n        bets(first: $first, skip: $skip, where: $where, order: createdAt, orderDirection: desc) {\\n          \",\"\\n          round {\\n            \",\"\\n          }\\n          user {\\n            \",\"\\n          } \\n        }\\n      }\\n    \"])),getBetBaseFields(),getRoundBaseFields(),getUserBaseFields()),{first:first,skip:skip,where:where});case 5:response=_context2.sent;return _context2.abrupt(\"return\",response.bets);case 7:case\"end\":return _context2.stop();}}},_callee2);}));return function getBetHistory(){return _ref3.apply(this,arguments);};}();export var getBet=/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(betId){var response;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.next=2;return request(GRAPH_API_PREDICTION,gql(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n      query getBet($id: ID!) {\\n        bet(id: $id) {\\n          \",\"\\n          round {\\n            \",\"\\n          }\\n          user {\\n            \",\"\\n          } \\n        }\\n      }\\n  \"])),getBetBaseFields(),getRoundBaseFields(),getUserBaseFields()),{id:betId.toLowerCase()});case 2:response=_context3.sent;return _context3.abrupt(\"return\",response.bet);case 4:case\"end\":return _context3.stop();}}},_callee3);}));return function getBet(_x){return _ref4.apply(this,arguments);};}();// V2 REFACTOR\nexport var getLedgerData=/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account,epochs){var address,ledgerCalls,response;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:address=getPredictionsAddress();ledgerCalls=epochs.map(function(epoch){return{address:address,name:'ledger',params:[epoch,account]};});_context4.next=4;return multicallv2(predictionsAbi,ledgerCalls);case 4:response=_context4.sent;return _context4.abrupt(\"return\",response);case 6:case\"end\":return _context4.stop();}}},_callee4);}));return function getLedgerData(_x2,_x3){return _ref5.apply(this,arguments);};}();export var getClaimStatuses=/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(account,epochs){var address,claimableCalls,claimableResponses,ledgerResponses;return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:address=getPredictionsAddress();claimableCalls=epochs.map(function(epoch){return{address:address,name:'claimable',params:[epoch,account]};});_context5.next=4;return multicallv2(predictionsAbi,claimableCalls);case 4:claimableResponses=_context5.sent;_context5.next=7;return getLedgerData(account,epochs);case 7:ledgerResponses=_context5.sent;return _context5.abrupt(\"return\",claimableResponses.reduce(function(accum,claimableResponse,index){var _ledgerResponses$inde=ledgerResponses[index],amount=_ledgerResponses$inde.amount,claimed=_ledgerResponses$inde.claimed;var epoch=epochs[index];var _claimableResponse=_slicedToArray(claimableResponse,1),claimable=_claimableResponse[0];return _objectSpread(_objectSpread({},accum),{},_defineProperty({},epoch,claimable&&amount.gt(0)&&!claimed));},{}));case 9:case\"end\":return _context5.stop();}}},_callee5);}));return function getClaimStatuses(_x4,_x5){return _ref6.apply(this,arguments);};}();export var getPredictionData=/*#__PURE__*/function(){var _ref7=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(){var address,staticCalls,_yield$multicallv,_yield$multicallv2,_yield$multicallv2$,currentEpoch,_yield$multicallv2$2,intervalSeconds,_yield$multicallv2$3,minBetAmount,_yield$multicallv2$4,paused,_yield$multicallv2$5,bufferSeconds;return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:address=getPredictionsAddress();staticCalls=['currentEpoch','intervalSeconds','minBetAmount','paused','bufferSeconds'].map(function(method){return{address:address,name:method};});_context6.next=4;return multicallv2(predictionsAbi,staticCalls);case 4:_yield$multicallv=_context6.sent;_yield$multicallv2=_slicedToArray(_yield$multicallv,5);_yield$multicallv2$=_slicedToArray(_yield$multicallv2[0],1);currentEpoch=_yield$multicallv2$[0];_yield$multicallv2$2=_slicedToArray(_yield$multicallv2[1],1);intervalSeconds=_yield$multicallv2$2[0];_yield$multicallv2$3=_slicedToArray(_yield$multicallv2[2],1);minBetAmount=_yield$multicallv2$3[0];_yield$multicallv2$4=_slicedToArray(_yield$multicallv2[3],1);paused=_yield$multicallv2$4[0];_yield$multicallv2$5=_slicedToArray(_yield$multicallv2[4],1);bufferSeconds=_yield$multicallv2$5[0];return _context6.abrupt(\"return\",{status:paused?PredictionStatus.PAUSED:PredictionStatus.LIVE,currentEpoch:currentEpoch.toNumber(),intervalSeconds:intervalSeconds.toNumber(),minBetAmount:minBetAmount.toString(),bufferSeconds:bufferSeconds.toNumber()});case 17:case\"end\":return _context6.stop();}}},_callee6);}));return function getPredictionData(){return _ref7.apply(this,arguments);};}();export var getRoundsData=/*#__PURE__*/function(){var _ref8=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(epochs){var address,calls,response;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:address=getPredictionsAddress();calls=epochs.map(function(epoch){return{address:address,name:'rounds',params:[epoch]};});_context7.next=4;return multicallv2(predictionsAbi,calls);case 4:response=_context7.sent;return _context7.abrupt(\"return\",response);case 6:case\"end\":return _context7.stop();}}},_callee7);}));return function getRoundsData(_x6){return _ref8.apply(this,arguments);};}();export var makeFutureRoundResponse=function makeFutureRoundResponse(epoch,startTimestamp){return{epoch:epoch,startTimestamp:startTimestamp,lockTimestamp:null,closeTimestamp:null,lockPrice:null,closePrice:null,totalAmount:ethers.BigNumber.from(0).toJSON(),bullAmount:ethers.BigNumber.from(0).toJSON(),bearAmount:ethers.BigNumber.from(0).toJSON(),rewardBaseCalAmount:ethers.BigNumber.from(0).toJSON(),rewardAmount:ethers.BigNumber.from(0).toJSON(),oracleCalled:false,lockOracleId:null,closeOracleId:null};};export var makeRoundData=function makeRoundData(rounds){return rounds.reduce(function(accum,round){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},round.epoch.toString(),round));},{});};export var serializePredictionsLedgerResponse=function serializePredictionsLedgerResponse(ledgerResponse){return{position:ledgerResponse.position===0?BetPosition.BULL:BetPosition.BEAR,amount:ledgerResponse.amount.toJSON(),claimed:ledgerResponse.claimed};};export var makeLedgerData=function makeLedgerData(account,ledgers,epochs){return ledgers.reduce(function(accum,ledgerResponse,index){if(!ledgerResponse){return accum;}// If the amount is zero that means the user did not bet\nif(ledgerResponse.amount.eq(0)){return accum;}var epoch=epochs[index].toString();return _objectSpread(_objectSpread({},accum),{},_defineProperty({},account,_objectSpread(_objectSpread({},accum[account]),{},_defineProperty({},epoch,serializePredictionsLedgerResponse(ledgerResponse)))));},{});};/**\r\n * Serializes the return from the \"rounds\" call for redux\r\n */export var serializePredictionsRoundsResponse=function serializePredictionsRoundsResponse(response){var epoch=response.epoch,startTimestamp=response.startTimestamp,lockTimestamp=response.lockTimestamp,closeTimestamp=response.closeTimestamp,lockPrice=response.lockPrice,closePrice=response.closePrice,totalAmount=response.totalAmount,bullAmount=response.bullAmount,bearAmount=response.bearAmount,rewardBaseCalAmount=response.rewardBaseCalAmount,rewardAmount=response.rewardAmount,oracleCalled=response.oracleCalled,lockOracleId=response.lockOracleId,closeOracleId=response.closeOracleId;return{oracleCalled:oracleCalled,epoch:epoch.toNumber(),startTimestamp:startTimestamp.eq(0)?null:startTimestamp.toNumber(),lockTimestamp:lockTimestamp.eq(0)?null:lockTimestamp.toNumber(),closeTimestamp:closeTimestamp.eq(0)?null:closeTimestamp.toNumber(),lockPrice:lockPrice.eq(0)?null:lockPrice.toJSON(),closePrice:closePrice.eq(0)?null:closePrice.toJSON(),totalAmount:totalAmount.toJSON(),bullAmount:bullAmount.toJSON(),bearAmount:bearAmount.toJSON(),rewardBaseCalAmount:rewardBaseCalAmount.toJSON(),rewardAmount:rewardAmount.toJSON(),lockOracleId:lockOracleId.toString(),closeOracleId:closeOracleId.toString()};};/**\r\n * Parse serialized values back into ethers.BigNumber\r\n * ethers.BigNumber values are stored with the \"toJSJON()\" method, e.g  { type: \"BigNumber\", hex: string }\r\n */export var parseBigNumberObj=function parseBigNumberObj(data){return Object.keys(data).reduce(function(accum,key){var value=data[key];if(value&&(value===null||value===void 0?void 0:value.type)==='BigNumber'){return _objectSpread(_objectSpread({},accum),{},_defineProperty({},key,ethers.BigNumber.from(value)));}return _objectSpread(_objectSpread({},accum),{},_defineProperty({},key,value));},{});};","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/predictions/helpers.ts"],"names":["request","gql","GRAPH_API_PREDICTION","ethers","BetPosition","PredictionStatus","multicallv2","predictionsAbi","getPredictionsAddress","getRoundBaseFields","getBetBaseFields","getUserBaseFields","Result","numberOrNull","value","valueNum","Number","isNaN","transformUserResponse","userResponse","id","createdAt","updatedAt","block","totalBets","totalBetsBull","totalBetsBear","totalBNB","totalBNBBull","totalBNBBear","totalBetsClaimed","totalBNBClaimed","winRate","averageBNB","netBNB","parseFloat","getRoundPosition","positionResponse","BULL","BEAR","transformBetResponse","betResponse","bet","hash","amount","position","claimed","claimedAt","claimedBlock","claimedHash","claimedBNB","claimedNetBNB","user","round","transformRoundResponse","roundResponse","epoch","failed","startAt","startBlock","startHash","lockAt","lockBlock","lockHash","lockPrice","lockRoundId","closeAt","closeBlock","closeHash","closePrice","closeRoundId","totalAmount","bullBets","bullAmount","bearBets","bearAmount","bets","map","getRoundResult","currentEpoch","CANCELED","LIVE","roundResultPosition","WIN","LOSE","getCanClaim","getUnclaimedWinningBets","filter","getTotalWon","market","totalBNBTreasury","Math","max","getBetHistory","where","first","skip","response","getBet","betId","toLowerCase","getLedgerData","account","epochs","address","ledgerCalls","name","params","getClaimStatuses","claimableCalls","claimableResponses","ledgerResponses","reduce","accum","claimableResponse","index","claimable","gt","getPredictionData","staticCalls","method","intervalSeconds","minBetAmount","paused","bufferSeconds","status","PAUSED","toNumber","toString","getRoundsData","calls","makeFutureRoundResponse","startTimestamp","lockTimestamp","closeTimestamp","BigNumber","from","toJSON","rewardBaseCalAmount","rewardAmount","oracleCalled","lockOracleId","closeOracleId","makeRoundData","rounds","serializePredictionsLedgerResponse","ledgerResponse","makeLedgerData","ledgers","eq","serializePredictionsRoundsResponse","parseBigNumberObj","data","Object","keys","key","type"],"mappings":"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","sourcesContent":["import { request, gql } from 'graphql-request'\r\nimport { GRAPH_API_PREDICTION } from 'config/constants/endpoints'\r\nimport { ethers } from 'ethers'\r\nimport {\r\n  Bet,\r\n  LedgerData,\r\n  BetPosition,\r\n  PredictionsState,\r\n  PredictionStatus,\r\n  ReduxNodeLedger,\r\n  ReduxNodeRound,\r\n  Round,\r\n  RoundData,\r\n  PredictionUser,\r\n} from 'state/types'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport predictionsAbi from 'config/abi/predictions.json'\r\nimport { getPredictionsAddress } from 'utils/addressHelpers'\r\nimport { PredictionsClaimableResponse, PredictionsLedgerResponse, PredictionsRoundsResponse } from 'utils/types'\r\nimport {\r\n  BetResponse,\r\n  getRoundBaseFields,\r\n  getBetBaseFields,\r\n  getUserBaseFields,\r\n  RoundResponse,\r\n  TotalWonMarketResponse,\r\n  UserResponse,\r\n} from './queries'\r\n\r\nexport enum Result {\r\n  WIN = 'win',\r\n  LOSE = 'lose',\r\n  CANCELED = 'canceled',\r\n  LIVE = 'live',\r\n}\r\n\r\nexport const numberOrNull = (value: string) => {\r\n  if (value === null) {\r\n    return null\r\n  }\r\n\r\n  const valueNum = Number(value)\r\n  return Number.isNaN(valueNum) ? null : valueNum\r\n}\r\n\r\nexport const transformUserResponse = (userResponse: UserResponse): PredictionUser => {\r\n  const {\r\n    id,\r\n    createdAt,\r\n    updatedAt,\r\n    block,\r\n    totalBets,\r\n    totalBetsBull,\r\n    totalBetsBear,\r\n    totalBNB,\r\n    totalBNBBull,\r\n    totalBNBBear,\r\n    totalBetsClaimed,\r\n    totalBNBClaimed,\r\n    winRate,\r\n    averageBNB,\r\n    netBNB,\r\n  } = userResponse\r\n\r\n  return {\r\n    id,\r\n    createdAt: numberOrNull(createdAt),\r\n    updatedAt: numberOrNull(updatedAt),\r\n    block: numberOrNull(block),\r\n    totalBets: numberOrNull(totalBets),\r\n    totalBetsBull: numberOrNull(totalBetsBull),\r\n    totalBetsBear: numberOrNull(totalBetsBear),\r\n    totalBNB: totalBNB ? parseFloat(totalBNB) : 0,\r\n    totalBNBBull: totalBNBBull ? parseFloat(totalBNBBull) : 0,\r\n    totalBNBBear: totalBNBBear ? parseFloat(totalBNBBear) : 0,\r\n    totalBetsClaimed: numberOrNull(totalBetsClaimed),\r\n    totalBNBClaimed: totalBNBClaimed ? parseFloat(totalBNBClaimed) : 0,\r\n    winRate: winRate ? parseFloat(winRate) : 0,\r\n    averageBNB: averageBNB ? parseFloat(averageBNB) : 0,\r\n    netBNB: netBNB ? parseFloat(netBNB) : 0,\r\n  }\r\n}\r\n\r\nconst getRoundPosition = (positionResponse: string) => {\r\n  if (positionResponse === 'Bull') {\r\n    return BetPosition.BULL\r\n  }\r\n\r\n  if (positionResponse === 'Bear') {\r\n    return BetPosition.BEAR\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport const transformBetResponse = (betResponse: BetResponse): Bet => {\r\n  const bet = {\r\n    id: betResponse.id,\r\n    hash: betResponse.hash,\r\n    block: numberOrNull(betResponse.block),\r\n    amount: betResponse.amount ? parseFloat(betResponse.amount) : 0,\r\n    position: betResponse.position === 'Bull' ? BetPosition.BULL : BetPosition.BEAR,\r\n    claimed: betResponse.claimed,\r\n    claimedAt: numberOrNull(betResponse.claimedAt),\r\n    claimedBlock: numberOrNull(betResponse.claimedBlock),\r\n    claimedHash: betResponse.claimedHash,\r\n    claimedBNB: betResponse.claimedBNB ? parseFloat(betResponse.claimedBNB) : 0,\r\n    claimedNetBNB: betResponse.claimedNetBNB ? parseFloat(betResponse.claimedNetBNB) : 0,\r\n    createdAt: numberOrNull(betResponse.createdAt),\r\n    updatedAt: numberOrNull(betResponse.updatedAt),\r\n  } as Bet\r\n\r\n  if (betResponse.user) {\r\n    bet.user = transformUserResponse(betResponse.user)\r\n  }\r\n\r\n  if (betResponse.round) {\r\n    bet.round = transformRoundResponse(betResponse.round)\r\n  }\r\n\r\n  return bet\r\n}\r\n\r\nexport const transformRoundResponse = (roundResponse: RoundResponse): Round => {\r\n  const {\r\n    id,\r\n    epoch,\r\n    failed,\r\n    position,\r\n    startAt,\r\n    startBlock,\r\n    startHash,\r\n    lockAt,\r\n    lockBlock,\r\n    lockHash,\r\n    lockPrice,\r\n    lockRoundId,\r\n    closeAt,\r\n    closeBlock,\r\n    closeHash,\r\n    closePrice,\r\n    closeRoundId,\r\n    totalBets,\r\n    totalAmount,\r\n    bullBets,\r\n    bullAmount,\r\n    bearBets,\r\n    bearAmount,\r\n    bets = [],\r\n  } = roundResponse\r\n\r\n  return {\r\n    id,\r\n    failed,\r\n    startHash,\r\n    lockHash,\r\n    lockRoundId,\r\n    closeRoundId,\r\n    closeHash,\r\n    position: getRoundPosition(position),\r\n    epoch: numberOrNull(epoch),\r\n    startAt: numberOrNull(startAt),\r\n    startBlock: numberOrNull(startBlock),\r\n    lockAt: numberOrNull(lockAt),\r\n    lockBlock: numberOrNull(lockBlock),\r\n    lockPrice: lockPrice ? parseFloat(lockPrice) : 0,\r\n    closeAt: numberOrNull(closeAt),\r\n    closeBlock: numberOrNull(closeBlock),\r\n    closePrice: closePrice ? parseFloat(closePrice) : 0,\r\n    totalBets: numberOrNull(totalBets),\r\n    totalAmount: totalAmount ? parseFloat(totalAmount) : 0,\r\n    bullBets: numberOrNull(bullBets),\r\n    bullAmount: bullAmount ? parseFloat(bullAmount) : 0,\r\n    bearBets: numberOrNull(bearBets),\r\n    bearAmount: bearAmount ? parseFloat(bearAmount) : 0,\r\n    bets: bets.map(transformBetResponse),\r\n  }\r\n}\r\n\r\nexport const getRoundResult = (bet: Bet, currentEpoch: number): Result => {\r\n  const { round } = bet\r\n  if (round.failed) {\r\n    return Result.CANCELED\r\n  }\r\n\r\n  if (round.epoch >= currentEpoch - 1) {\r\n    return Result.LIVE\r\n  }\r\n  const roundResultPosition = round.closePrice > round.lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n\r\n  return bet.position === roundResultPosition ? Result.WIN : Result.LOSE\r\n}\r\n\r\n/**\r\n * Given a bet object, check if it is eligible to be claimed or refunded\r\n */\r\nexport const getCanClaim = (bet: Bet) => {\r\n  return !bet.claimed && (bet.position === bet.round.position || bet.round.failed === true)\r\n}\r\n\r\n/**\r\n * Returns only bets where the user has won.\r\n * This is necessary because the API currently cannot distinguish between an uncliamed bet that has won or lost\r\n */\r\nexport const getUnclaimedWinningBets = (bets: Bet[]): Bet[] => {\r\n  return bets.filter(getCanClaim)\r\n}\r\n\r\nexport const getTotalWon = async (): Promise<number> => {\r\n  const { market } = (await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getTotalWonData {\r\n        market(id: 1) {\r\n          totalBNB\r\n          totalBNBTreasury\r\n        }\r\n      }\r\n    `,\r\n  )) as { market: TotalWonMarketResponse }\r\n\r\n  const totalBNB = market.totalBNB ? parseFloat(market.totalBNB) : 0\r\n  const totalBNBTreasury = market.totalBNBTreasury ? parseFloat(market.totalBNBTreasury) : 0\r\n\r\n  return Math.max(totalBNB - totalBNBTreasury, 0)\r\n}\r\n\r\ntype BetHistoryWhereClause = Record<string, string | number | boolean | string[]>\r\n\r\nexport const getBetHistory = async (\r\n  where: BetHistoryWhereClause = {},\r\n  first = 1000,\r\n  skip = 0,\r\n): Promise<BetResponse[]> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getBetHistory($first: Int!, $skip: Int!, $where: Bet_filter) {\r\n        bets(first: $first, skip: $skip, where: $where, order: createdAt, orderDirection: desc) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n    `,\r\n    { first, skip, where },\r\n  )\r\n  return response.bets\r\n}\r\n\r\nexport const getBet = async (betId: string): Promise<BetResponse> => {\r\n  const response = await request(\r\n    GRAPH_API_PREDICTION,\r\n    gql`\r\n      query getBet($id: ID!) {\r\n        bet(id: $id) {\r\n          ${getBetBaseFields()}\r\n          round {\r\n            ${getRoundBaseFields()}\r\n          }\r\n          user {\r\n            ${getUserBaseFields()}\r\n          } \r\n        }\r\n      }\r\n  `,\r\n    {\r\n      id: betId.toLowerCase(),\r\n    },\r\n  )\r\n  return response.bet\r\n}\r\n\r\n// V2 REFACTOR\r\nexport const getLedgerData = async (account: string, epochs: number[]) => {\r\n  const address = getPredictionsAddress()\r\n  const ledgerCalls = epochs.map((epoch) => ({\r\n    address,\r\n    name: 'ledger',\r\n    params: [epoch, account],\r\n  }))\r\n  const response = await multicallv2<PredictionsLedgerResponse[]>(predictionsAbi, ledgerCalls)\r\n  return response\r\n}\r\n\r\nexport const getClaimStatuses = async (\r\n  account: string,\r\n  epochs: number[],\r\n): Promise<PredictionsState['claimableStatuses']> => {\r\n  const address = getPredictionsAddress()\r\n  const claimableCalls = epochs.map((epoch) => ({\r\n    address,\r\n    name: 'claimable',\r\n    params: [epoch, account],\r\n  }))\r\n  const claimableResponses = await multicallv2<[PredictionsClaimableResponse][]>(predictionsAbi, claimableCalls)\r\n\r\n  // \"claimable\" currently has a bug where it returns true on Bull bets even if the wallet did not interact with the round\r\n  // To get around this temporarily we check the ledger status as well to confirm that it is claimable\r\n  // This can be removed in Predictions V2\r\n  const ledgerResponses = await getLedgerData(account, epochs)\r\n\r\n  return claimableResponses.reduce((accum, claimableResponse, index) => {\r\n    const { amount, claimed } = ledgerResponses[index]\r\n    const epoch = epochs[index]\r\n    const [claimable] = claimableResponse\r\n\r\n    return {\r\n      ...accum,\r\n      [epoch]: claimable && amount.gt(0) && !claimed,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport type MarketData = Pick<\r\n  PredictionsState,\r\n  'status' | 'currentEpoch' | 'intervalSeconds' | 'minBetAmount' | 'bufferSeconds'\r\n>\r\nexport const getPredictionData = async (): Promise<MarketData> => {\r\n  const address = getPredictionsAddress()\r\n  const staticCalls = ['currentEpoch', 'intervalSeconds', 'minBetAmount', 'paused', 'bufferSeconds'].map((method) => ({\r\n    address,\r\n    name: method,\r\n  }))\r\n  const [[currentEpoch], [intervalSeconds], [minBetAmount], [paused], [bufferSeconds]] = await multicallv2(\r\n    predictionsAbi,\r\n    staticCalls,\r\n  )\r\n\r\n  return {\r\n    status: paused ? PredictionStatus.PAUSED : PredictionStatus.LIVE,\r\n    currentEpoch: currentEpoch.toNumber(),\r\n    intervalSeconds: intervalSeconds.toNumber(),\r\n    minBetAmount: minBetAmount.toString(),\r\n    bufferSeconds: bufferSeconds.toNumber(),\r\n  }\r\n}\r\n\r\nexport const getRoundsData = async (epochs: number[]): Promise<PredictionsRoundsResponse[]> => {\r\n  const address = getPredictionsAddress()\r\n  const calls = epochs.map((epoch) => ({\r\n    address,\r\n    name: 'rounds',\r\n    params: [epoch],\r\n  }))\r\n  const response = await multicallv2<PredictionsRoundsResponse[]>(predictionsAbi, calls)\r\n  return response\r\n}\r\n\r\nexport const makeFutureRoundResponse = (epoch: number, startTimestamp: number): ReduxNodeRound => {\r\n  return {\r\n    epoch,\r\n    startTimestamp,\r\n    lockTimestamp: null,\r\n    closeTimestamp: null,\r\n    lockPrice: null,\r\n    closePrice: null,\r\n    totalAmount: ethers.BigNumber.from(0).toJSON(),\r\n    bullAmount: ethers.BigNumber.from(0).toJSON(),\r\n    bearAmount: ethers.BigNumber.from(0).toJSON(),\r\n    rewardBaseCalAmount: ethers.BigNumber.from(0).toJSON(),\r\n    rewardAmount: ethers.BigNumber.from(0).toJSON(),\r\n    oracleCalled: false,\r\n    lockOracleId: null,\r\n    closeOracleId: null,\r\n  }\r\n}\r\n\r\nexport const makeRoundData = (rounds: ReduxNodeRound[]): RoundData => {\r\n  return rounds.reduce((accum, round) => {\r\n    return {\r\n      ...accum,\r\n      [round.epoch.toString()]: round,\r\n    }\r\n  }, {})\r\n}\r\n\r\nexport const serializePredictionsLedgerResponse = (ledgerResponse: PredictionsLedgerResponse): ReduxNodeLedger => ({\r\n  position: ledgerResponse.position === 0 ? BetPosition.BULL : BetPosition.BEAR,\r\n  amount: ledgerResponse.amount.toJSON(),\r\n  claimed: ledgerResponse.claimed,\r\n})\r\n\r\nexport const makeLedgerData = (account: string, ledgers: PredictionsLedgerResponse[], epochs: number[]): LedgerData => {\r\n  return ledgers.reduce((accum, ledgerResponse, index) => {\r\n    if (!ledgerResponse) {\r\n      return accum\r\n    }\r\n\r\n    // If the amount is zero that means the user did not bet\r\n    if (ledgerResponse.amount.eq(0)) {\r\n      return accum\r\n    }\r\n\r\n    const epoch = epochs[index].toString()\r\n\r\n    return {\r\n      ...accum,\r\n      [account]: {\r\n        ...accum[account],\r\n        [epoch]: serializePredictionsLedgerResponse(ledgerResponse),\r\n      },\r\n    }\r\n  }, {})\r\n}\r\n\r\n/**\r\n * Serializes the return from the \"rounds\" call for redux\r\n */\r\nexport const serializePredictionsRoundsResponse = (response: PredictionsRoundsResponse): ReduxNodeRound => {\r\n  const {\r\n    epoch,\r\n    startTimestamp,\r\n    lockTimestamp,\r\n    closeTimestamp,\r\n    lockPrice,\r\n    closePrice,\r\n    totalAmount,\r\n    bullAmount,\r\n    bearAmount,\r\n    rewardBaseCalAmount,\r\n    rewardAmount,\r\n    oracleCalled,\r\n    lockOracleId,\r\n    closeOracleId,\r\n  } = response\r\n\r\n  return {\r\n    oracleCalled,\r\n    epoch: epoch.toNumber(),\r\n    startTimestamp: startTimestamp.eq(0) ? null : startTimestamp.toNumber(),\r\n    lockTimestamp: lockTimestamp.eq(0) ? null : lockTimestamp.toNumber(),\r\n    closeTimestamp: closeTimestamp.eq(0) ? null : closeTimestamp.toNumber(),\r\n    lockPrice: lockPrice.eq(0) ? null : lockPrice.toJSON(),\r\n    closePrice: closePrice.eq(0) ? null : closePrice.toJSON(),\r\n    totalAmount: totalAmount.toJSON(),\r\n    bullAmount: bullAmount.toJSON(),\r\n    bearAmount: bearAmount.toJSON(),\r\n    rewardBaseCalAmount: rewardBaseCalAmount.toJSON(),\r\n    rewardAmount: rewardAmount.toJSON(),\r\n    lockOracleId: lockOracleId.toString(),\r\n    closeOracleId: closeOracleId.toString(),\r\n  }\r\n}\r\n\r\n/**\r\n * Parse serialized values back into ethers.BigNumber\r\n * ethers.BigNumber values are stored with the \"toJSJON()\" method, e.g  { type: \"BigNumber\", hex: string }\r\n */\r\nexport const parseBigNumberObj = <T = Record<string, any>, K = Record<string, any>>(data: T): K => {\r\n  return Object.keys(data).reduce((accum, key) => {\r\n    const value = data[key]\r\n\r\n    if (value && value?.type === 'BigNumber') {\r\n      return {\r\n        ...accum,\r\n        [key]: ethers.BigNumber.from(value),\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...accum,\r\n      [key]: value,\r\n    }\r\n  }, {}) as K\r\n}\r\n"]},"metadata":{},"sourceType":"module"}