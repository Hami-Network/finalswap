{"ast":null,"code":"import{useEffect,useMemo}from'react';// import axios from 'axios'\nimport{useSelector}from'react-redux';import{useAppDispatch}from'state';import{useWeb3React}from'@web3-react/core';import BigNumber from'bignumber.js';import{BIG_ZERO}from'utils/bigNumber';import{getBalanceAmount}from'utils/formatBalance';import{farmsConfig}from'config/constants';import useRefresh from'hooks/useRefresh';import{fetchFarmsPublicDataAsync,fetchFarmUserDataAsync,nonArchivedFarms}from'.';export var usePollFarmsData=function usePollFarmsData(){var includeArchive=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var dispatch=useAppDispatch();var _useRefresh=useRefresh(),slowRefresh=_useRefresh.slowRefresh;var _useWeb3React=useWeb3React(),account=_useWeb3React.account;useEffect(function(){var farmsToFetch=includeArchive?farmsConfig:nonArchivedFarms;var pids=farmsToFetch.map(function(farmToFetch){return farmToFetch.pid;});dispatch(fetchFarmsPublicDataAsync(pids));if(account){dispatch(fetchFarmUserDataAsync({account:account,pids:pids}));}},[includeArchive,dispatch,slowRefresh,account]);};/**\r\n * Fetches the \"core\" farm data used globally\r\n * 2 = LOKI-BNB LP\r\n * 3 = BUSD-BNB LP\r\n */export var usePollCoreFarmData=function usePollCoreFarmData(){var dispatch=useAppDispatch();var _useRefresh2=useRefresh(),fastRefresh=_useRefresh2.fastRefresh;useEffect(function(){dispatch(fetchFarmsPublicDataAsync([2,3]));},[dispatch,fastRefresh]);};export var useFarms=function useFarms(){var farms=useSelector(function(state){return state.farms;});return farms;};export var useFarmFromPid=function useFarmFromPid(pid){var farm=useSelector(function(state){return state.farms.data.find(function(f){return f.pid===pid;});});return farm;};export var useFarmFromLpSymbol=function useFarmFromLpSymbol(lpSymbol){var farm=useSelector(function(state){return state.farms.data.find(function(f){return f.lpSymbol===lpSymbol;});});return farm;};export var useFarmUser=function useFarmUser(pid){var farm=useFarmFromPid(pid);return{allowance:farm.userData?new BigNumber(farm.userData.allowance):BIG_ZERO,tokenBalance:farm.userData?new BigNumber(farm.userData.tokenBalance):BIG_ZERO,stakedBalance:farm.userData?new BigNumber(farm.userData.stakedBalance):BIG_ZERO,earnings:farm.userData?new BigNumber(farm.userData.earnings):BIG_ZERO};};// Return the base token price for a farm, from a given pid\nexport var useBusdPriceFromPid=function useBusdPriceFromPid(pid){var farm=useFarmFromPid(pid);return farm&&new BigNumber(farm.token.busdPrice);};export var useLpTokenPrice=function useLpTokenPrice(symbol,isTokenOnly){var farm=useFarmFromLpSymbol(symbol);var farmTokenPriceInUsd=useBusdPriceFromPid(farm.pid);var lpTokenPrice=BIG_ZERO;if(farm.lpTotalSupply&&farm.lpTotalInQuoteToken){// Total value of base token in LP\nvar valueOfBaseTokenInFarm=farmTokenPriceInUsd.times(farm.tokenAmountTotal);// Double it to get overall value in LP\nvar overallValueOfAllTokensInFarm=valueOfBaseTokenInFarm.times(2);// Divide total value of all tokens, by the number of LP tokens\nvar totalLpTokens=getBalanceAmount(new BigNumber(farm.lpTotalSupply));lpTokenPrice=isTokenOnly?new BigNumber(farm.token.busdPrice):overallValueOfAllTokensInFarm.div(totalLpTokens);}return lpTokenPrice;};// /!\\ Deprecated , use the BUSD hook in /hooks\nexport var usePriceBnbBusd=function usePriceBnbBusd(){var bnbBusdFarm=useFarmFromPid(3);return new BigNumber(bnbBusdFarm.quoteToken.busdPrice);};export var usePriceCakeBusd=function usePriceCakeBusd(){var cakeBnbFarm=useFarmFromPid(1);var cakePriceBusdAsString=cakeBnbFarm.token.busdPrice;var cakePriceBusd=useMemo(function(){return new BigNumber(cakePriceBusdAsString);},[cakePriceBusdAsString]);return cakePriceBusd;};export var useTotalValue=function useTotalValue(){var farms=useFarms();var value=new BigNumber(0);for(var i=0;i<farms.data.length;i++){var farm=farms.data[i];if(farm.lpTotalInQuoteToken&&farm.lpTotalInQuoteToken!=='0'){var val=void 0;if(!farm.isTokenOnly){val=new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice);}else{val=new BigNumber(farm.lpTotalInQuoteToken).times(farm.token.busdPrice);}value=value.plus(val);}}return value;};// const useFetch = (url, options) => {\n//   const [data, setData] = React.useState({ response:null, route:null, ethereum: null, polyvertex:null, bitcoin:null});\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       const result = await axios(\n//         url,\n//       );\n//       setData(result.data);\n//     };\n//     fetchData();\n//   }, [url]);\n//   const err = null;\n//   return {data, err};\n// };\n// export const usePriceWethBusd = (): BigNumber => {\n//   const url = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\"\n//   const { data, err} = useFetch(url, null);\n//   let output = new BigNumber(0);\n//   if(data.ethereum){\n//     output = new BigNumber(data.ethereum.usd);\n//   }\n//   return output;\n// }\n// export const usePriceBtcBusd = (): BigNumber => {\n//   const url = \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\n//   const { data, err} = useFetch(url, null);\n//   let output = new BigNumber(0);\n//   if(data.bitcoin){\n//     output = new BigNumber(data.bitcoin.usd);\n//   }\n//   return output;\n// }\n// export const usePriceRouteBusd = (): BigNumber => {\n//   const url = \"https://api.coingecko.com/api/v3/simple/price?ids=route&vs_currencies=usd\"\n//   const { data, err} = useFetch(url, null);\n//   let output = new BigNumber(0);\n//   if(data.route){\n//     output = new BigNumber(data.route.usd);\n//   }\n//   return output;\n// }","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/farms/hooks.ts"],"names":["useEffect","useMemo","useSelector","useAppDispatch","useWeb3React","BigNumber","BIG_ZERO","getBalanceAmount","farmsConfig","useRefresh","fetchFarmsPublicDataAsync","fetchFarmUserDataAsync","nonArchivedFarms","usePollFarmsData","includeArchive","dispatch","slowRefresh","account","farmsToFetch","pids","map","farmToFetch","pid","usePollCoreFarmData","fastRefresh","useFarms","farms","state","useFarmFromPid","farm","data","find","f","useFarmFromLpSymbol","lpSymbol","useFarmUser","allowance","userData","tokenBalance","stakedBalance","earnings","useBusdPriceFromPid","token","busdPrice","useLpTokenPrice","symbol","isTokenOnly","farmTokenPriceInUsd","lpTokenPrice","lpTotalSupply","lpTotalInQuoteToken","valueOfBaseTokenInFarm","times","tokenAmountTotal","overallValueOfAllTokensInFarm","totalLpTokens","div","usePriceBnbBusd","bnbBusdFarm","quoteToken","usePriceCakeBusd","cakeBnbFarm","cakePriceBusdAsString","cakePriceBusd","useTotalValue","value","i","length","val","plus"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo } from 'react'\r\n// import axios from 'axios'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync, nonArchivedFarms } from '.'\r\nimport { State, Farm, FarmsState } from '../types'\r\n\r\nexport const usePollFarmsData = (includeArchive = false) => {\r\n  const dispatch = useAppDispatch()\r\n  const { slowRefresh } = useRefresh()\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const farmsToFetch = includeArchive ? farmsConfig : nonArchivedFarms\r\n    const pids = farmsToFetch.map((farmToFetch) => farmToFetch.pid)\r\n\r\n    dispatch(fetchFarmsPublicDataAsync(pids))\r\n\r\n    if (account) {\r\n      dispatch(fetchFarmUserDataAsync({ account, pids }))\r\n    }\r\n  }, [includeArchive, dispatch, slowRefresh, account])\r\n}\r\n\r\n/**\r\n * Fetches the \"core\" farm data used globally\r\n * 2 = LOKI-BNB LP\r\n * 3 = BUSD-BNB LP\r\n */\r\nexport const usePollCoreFarmData = () => {\r\n  const dispatch = useAppDispatch()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchFarmsPublicDataAsync([2, 3]))\r\n  }, [dispatch, fastRefresh])\r\n}\r\n\r\nexport const useFarms = (): FarmsState => {\r\n  const farms = useSelector((state: State) => state.farms)\r\n  return farms\r\n}\r\n\r\nexport const useFarmFromPid = (pid): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\r\n  return farm\r\n}\r\n\r\nexport const useFarmFromLpSymbol = (lpSymbol: string): Farm => {\r\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\r\n  return farm\r\n}\r\n\r\nexport const useFarmUser = (pid) => {\r\n  const farm = useFarmFromPid(pid)\r\n\r\n  return {\r\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : BIG_ZERO,\r\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : BIG_ZERO,\r\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : BIG_ZERO,\r\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : BIG_ZERO,\r\n  }\r\n}\r\n\r\n// Return the base token price for a farm, from a given pid\r\nexport const useBusdPriceFromPid = (pid: number): BigNumber => {\r\n  const farm = useFarmFromPid(pid)\r\n  return farm && new BigNumber(farm.token.busdPrice)\r\n}\r\n\r\nexport const useLpTokenPrice = (symbol: string, isTokenOnly?: boolean) => {\r\n  const farm = useFarmFromLpSymbol(symbol)\r\n  const farmTokenPriceInUsd = useBusdPriceFromPid(farm.pid)\r\n  let lpTokenPrice = BIG_ZERO\r\n\r\n  if (farm.lpTotalSupply && farm.lpTotalInQuoteToken) {\r\n    // Total value of base token in LP\r\n    const valueOfBaseTokenInFarm = farmTokenPriceInUsd.times(farm.tokenAmountTotal)\r\n    // Double it to get overall value in LP\r\n    const overallValueOfAllTokensInFarm = valueOfBaseTokenInFarm.times(2)\r\n    // Divide total value of all tokens, by the number of LP tokens\r\n    const totalLpTokens = getBalanceAmount(new BigNumber(farm.lpTotalSupply))\r\n    lpTokenPrice = isTokenOnly ? new BigNumber(farm.token.busdPrice) : overallValueOfAllTokensInFarm.div(totalLpTokens)\r\n  }\r\n\r\n  return lpTokenPrice\r\n}\r\n\r\n// /!\\ Deprecated , use the BUSD hook in /hooks\r\n\r\nexport const usePriceBnbBusd = (): BigNumber => {\r\n  const bnbBusdFarm = useFarmFromPid(3)\r\n  return new BigNumber(bnbBusdFarm.quoteToken.busdPrice)\r\n}\r\n\r\nexport const usePriceCakeBusd = (): BigNumber => {\r\n  const cakeBnbFarm = useFarmFromPid(1)\r\n\r\n  const cakePriceBusdAsString = cakeBnbFarm.token.busdPrice\r\n\r\n  const cakePriceBusd = useMemo(() => {\r\n    return new BigNumber(cakePriceBusdAsString)\r\n  }, [cakePriceBusdAsString])\r\n\r\n  return cakePriceBusd\r\n}\r\n\r\nexport const useTotalValue = (): BigNumber => {\r\n  const farms = useFarms();\r\n  let value = new BigNumber(0);\r\n  for (let i = 0; i < farms.data.length; i++) {\r\n    const farm = farms.data[i]\r\n    if (farm.lpTotalInQuoteToken && farm.lpTotalInQuoteToken !== '0') {\r\n      let val;\r\n      if (!farm.isTokenOnly) {\r\n        val = (new BigNumber(farm.lpTotalInQuoteToken)).times(farm.quoteToken.busdPrice);\r\n      } else {\r\n        val = (new BigNumber(farm.lpTotalInQuoteToken)).times(farm.token.busdPrice);\r\n      }\r\n      value = value.plus(val);\r\n    }\r\n  }\r\n  return value;\r\n}\r\n\r\n// const useFetch = (url, options) => {\r\n//   const [data, setData] = React.useState({ response:null, route:null, ethereum: null, polyvertex:null, bitcoin:null});\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       const result = await axios(\r\n//         url,\r\n//       );\r\n \r\n//       setData(result.data);\r\n//     };\r\n \r\n//     fetchData();\r\n//   }, [url]);\r\n//   const err = null;\r\n//   return {data, err};\r\n// };\r\n\r\n// export const usePriceWethBusd = (): BigNumber => {\r\n//   const url = \"https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd\"\r\n//   const { data, err} = useFetch(url, null);\r\n//   let output = new BigNumber(0);\r\n//   if(data.ethereum){\r\n//     output = new BigNumber(data.ethereum.usd);\r\n//   }\r\n//   return output;\r\n// }\r\n// export const usePriceBtcBusd = (): BigNumber => {\r\n//   const url = \"https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd\"\r\n//   const { data, err} = useFetch(url, null);\r\n//   let output = new BigNumber(0);\r\n//   if(data.bitcoin){\r\n//     output = new BigNumber(data.bitcoin.usd);\r\n//   }\r\n//   return output;\r\n// }\r\n// export const usePriceRouteBusd = (): BigNumber => {\r\n//   const url = \"https://api.coingecko.com/api/v3/simple/price?ids=route&vs_currencies=usd\"\r\n//   const { data, err} = useFetch(url, null);\r\n//   let output = new BigNumber(0);\r\n//   if(data.route){\r\n//     output = new BigNumber(data.route.usd);\r\n//   }\r\n//   return output;\r\n// }"]},"metadata":{},"sourceType":"module"}