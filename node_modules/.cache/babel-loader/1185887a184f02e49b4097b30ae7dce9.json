{"ast":null,"code":"import{useAllLists}from'state/lists/hooks';import{getVersionUpgrade,VersionUpgrade}from'@uniswap/token-lists';import{useCallback,useEffect}from'react';import{useDispatch}from'react-redux';import{useAllInactiveTokens}from'hooks/Tokens';import{UNSUPPORTED_LIST_URLS}from'config/constants/lists';import useWeb3Provider from'hooks/useActiveWeb3React';import useFetchListCallback from'hooks/useFetchListCallback';import useInterval from'hooks/useInterval';import useIsWindowVisible from'hooks/useIsWindowVisible';import{acceptListUpdate}from'./actions';import{useActiveListUrls}from'./hooks';export default function Updater(){var _useWeb3Provider=useWeb3Provider(),library=_useWeb3Provider.library;var dispatch=useDispatch();var isWindowVisible=useIsWindowVisible();// get all loaded lists, and the active urls\nvar lists=useAllLists();var activeListUrls=useActiveListUrls();// initiate loading\nuseAllInactiveTokens();var fetchList=useFetchListCallback();var fetchAllListsCallback=useCallback(function(){if(!isWindowVisible)return;Object.keys(lists).forEach(function(url){return fetchList(url).catch(function(error){return console.debug('interval list fetching error',error);});});},[fetchList,isWindowVisible,lists]);// fetch all lists every 10 minutes, but only after we initialize library\nuseInterval(fetchAllListsCallback,library?1000*60*10:null);// whenever a list is not loaded and not loading, try again to load it\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(function(error){return console.debug('list added fetching error',error);});}});},[dispatch,fetchList,library,lists]);// if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\nuseEffect(function(){Object.keys(UNSUPPORTED_LIST_URLS).forEach(function(listUrl){var list=lists[listUrl];if(!list||!list.current&&!list.loadingRequestId&&!list.error){fetchList(listUrl).catch(function(error){return console.debug('list added fetching error',error);});}});},[dispatch,fetchList,library,lists]);// automatically update lists if versions are minor/patch\nuseEffect(function(){Object.keys(lists).forEach(function(listUrl){var list=lists[listUrl];if(list.current&&list.pendingUpdate){var bump=getVersionUpgrade(list.current.version,list.pendingUpdate.version);// eslint-disable-next-line default-case\nswitch(bump){case VersionUpgrade.NONE:throw new Error('unexpected no version bump');// update any active or inactive lists\ncase VersionUpgrade.PATCH:case VersionUpgrade.MINOR:case VersionUpgrade.MAJOR:dispatch(acceptListUpdate(listUrl));}}});},[dispatch,lists,activeListUrls]);return null;}","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/lists/updater.ts"],"names":["useAllLists","getVersionUpgrade","VersionUpgrade","useCallback","useEffect","useDispatch","useAllInactiveTokens","UNSUPPORTED_LIST_URLS","useWeb3Provider","useFetchListCallback","useInterval","useIsWindowVisible","acceptListUpdate","useActiveListUrls","Updater","library","dispatch","isWindowVisible","lists","activeListUrls","fetchList","fetchAllListsCallback","Object","keys","forEach","url","catch","error","console","debug","listUrl","list","current","loadingRequestId","pendingUpdate","bump","version","NONE","Error","PATCH","MINOR","MAJOR"],"mappings":"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","sourcesContent":["import { useAllLists } from 'state/lists/hooks'\r\nimport { getVersionUpgrade, VersionUpgrade } from '@uniswap/token-lists'\r\nimport { useCallback, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useAllInactiveTokens } from 'hooks/Tokens'\r\nimport { UNSUPPORTED_LIST_URLS } from 'config/constants/lists'\r\nimport useWeb3Provider from 'hooks/useActiveWeb3React'\r\nimport useFetchListCallback from 'hooks/useFetchListCallback'\r\nimport useInterval from 'hooks/useInterval'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\nimport { AppDispatch } from '../index'\r\nimport { acceptListUpdate } from './actions'\r\nimport { useActiveListUrls } from './hooks'\r\n\r\nexport default function Updater(): null {\r\n  const { library } = useWeb3Provider()\r\n  const dispatch = useDispatch<AppDispatch>()\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  // get all loaded lists, and the active urls\r\n  const lists = useAllLists()\r\n  const activeListUrls = useActiveListUrls()\r\n\r\n  // initiate loading\r\n  useAllInactiveTokens()\r\n\r\n  const fetchList = useFetchListCallback()\r\n  const fetchAllListsCallback = useCallback(() => {\r\n    if (!isWindowVisible) return\r\n    Object.keys(lists).forEach((url) =>\r\n      fetchList(url).catch((error) => console.debug('interval list fetching error', error)),\r\n    )\r\n  }, [fetchList, isWindowVisible, lists])\r\n\r\n  // fetch all lists every 10 minutes, but only after we initialize library\r\n  useInterval(fetchAllListsCallback, library ? 1000 * 60 * 10 : null)\r\n\r\n  // whenever a list is not loaded and not loading, try again to load it\r\n  useEffect(() => {\r\n    Object.keys(lists).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (!list.current && !list.loadingRequestId && !list.error) {\r\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\r\n      }\r\n    })\r\n  }, [dispatch, fetchList, library, lists])\r\n\r\n  // if any lists from unsupported lists are loaded, check them too (in case new updates since last visit)\r\n  useEffect(() => {\r\n    Object.keys(UNSUPPORTED_LIST_URLS).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (!list || (!list.current && !list.loadingRequestId && !list.error)) {\r\n        fetchList(listUrl).catch((error) => console.debug('list added fetching error', error))\r\n      }\r\n    })\r\n  }, [dispatch, fetchList, library, lists])\r\n\r\n  // automatically update lists if versions are minor/patch\r\n  useEffect(() => {\r\n    Object.keys(lists).forEach((listUrl) => {\r\n      const list = lists[listUrl]\r\n      if (list.current && list.pendingUpdate) {\r\n        const bump = getVersionUpgrade(list.current.version, list.pendingUpdate.version)\r\n        // eslint-disable-next-line default-case\r\n        switch (bump) {\r\n          case VersionUpgrade.NONE:\r\n            throw new Error('unexpected no version bump')\r\n          // update any active or inactive lists\r\n          case VersionUpgrade.PATCH:\r\n          case VersionUpgrade.MINOR:\r\n          case VersionUpgrade.MAJOR:\r\n            dispatch(acceptListUpdate(listUrl))\r\n        }\r\n      }\r\n    })\r\n  }, [dispatch, lists, activeListUrls])\r\n\r\n  return null\r\n}\r\n"]},"metadata":{},"sourceType":"module"}