{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { BLOCKS_PER_YEAR } from 'config';\n\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\nexport const getPoolApr = (stakingTokenPrice, rewardTokenPrice, totalStaked, tokenPerBlock) => {\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked);\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber();\n};\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\n\nexport const getFarmApr = (poolWeight, cakePriceUsd, poolLiquidityUsd, farmAddress, lokipersecond) => {\n  const cakePerYear = lokipersecond.times(BLOCKS_PER_YEAR);\n  const yearlyCakeRewardAllocation = cakePerYear.times(poolWeight);\n  const cakeRewardsApr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100);\n  let cakeRewardsAprAsNumber = null;\n\n  if (!cakeRewardsApr.isNaN() && cakeRewardsApr.isFinite()) {\n    cakeRewardsAprAsNumber = cakeRewardsApr.toNumber();\n  } // const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0\n\n\n  return {\n    cakeRewardsApr: cakeRewardsAprAsNumber,\n    lpRewardsApr: 0\n  };\n};\nexport default null;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/utils/apr.ts"],"names":["BigNumber","BLOCKS_PER_YEAR","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolWeight","cakePriceUsd","poolLiquidityUsd","farmAddress","lokipersecond","cakePerYear","yearlyCakeRewardAllocation","cakeRewardsApr","cakeRewardsAprAsNumber","lpRewardsApr"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,SAASC,eAAT,QAA+C,QAA/C;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,iBADwB,EAExBC,gBAFwB,EAGxBC,WAHwB,EAIxBC,aAJwB,KAKb;AACX,QAAMC,uBAAuB,GAAG,IAAIP,SAAJ,CAAcI,gBAAd,EAAgCI,KAAhC,CAAsCF,aAAtC,EAAqDE,KAArD,CAA2DP,eAA3D,CAAhC;AACA,QAAMQ,uBAAuB,GAAG,IAAIT,SAAJ,CAAcG,iBAAd,EAAiCK,KAAjC,CAAuCH,WAAvC,CAAhC;AACA,QAAMK,GAAG,GAAGH,uBAAuB,CAACI,GAAxB,CAA4BF,uBAA5B,EAAqDD,KAArD,CAA2D,GAA3D,CAAZ;AACA,SAAOE,GAAG,CAACE,KAAJ,MAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,GAAiC,IAAjC,GAAwCH,GAAG,CAACI,QAAJ,EAA/C;AACD,CAVM;AAYP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CACxBC,UADwB,EAExBC,YAFwB,EAGxBC,gBAHwB,EAIxBC,WAJwB,EAKxBC,aALwB,KAM6B;AACrD,QAAMC,WAAW,GAAGD,aAAa,CAACZ,KAAd,CAAoBP,eAApB,CAApB;AACA,QAAMqB,0BAA0B,GAAGD,WAAW,CAACb,KAAZ,CAAkBQ,UAAlB,CAAnC;AACA,QAAMO,cAAc,GAAGD,0BAA0B,CAACd,KAA3B,CAAiCS,YAAjC,EAA+CN,GAA/C,CAAmDO,gBAAnD,EAAqEV,KAArE,CAA2E,GAA3E,CAAvB;AACA,MAAIgB,sBAAsB,GAAG,IAA7B;;AACA,MAAI,CAACD,cAAc,CAACX,KAAf,EAAD,IAA2BW,cAAc,CAACV,QAAf,EAA/B,EAA0D;AACxDW,IAAAA,sBAAsB,GAAGD,cAAc,CAACT,QAAf,EAAzB;AACD,GAPoD,CAQrD;;;AACA,SAAO;AAAES,IAAAA,cAAc,EAAEC,sBAAlB;AAA0CC,IAAAA,YAAY,EAAG;AAAzD,GAAP;AACD,CAhBM;AAkBP,eAAe,IAAf","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_YEAR } from 'config'\r\nimport lpAprs from 'config/constants/lpAprs.json'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (\r\n  poolWeight: BigNumber,\r\n  cakePriceUsd: BigNumber,\r\n  poolLiquidityUsd: BigNumber,\r\n  farmAddress: string,\r\n  lokipersecond: BigNumber,\r\n): { cakeRewardsApr: number; lpRewardsApr: number } => {\r\n  const cakePerYear = lokipersecond.times(BLOCKS_PER_YEAR)\r\n  const yearlyCakeRewardAllocation = cakePerYear.times(poolWeight)\r\n  const cakeRewardsApr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n  let cakeRewardsAprAsNumber = null\r\n  if (!cakeRewardsApr.isNaN() && cakeRewardsApr.isFinite()) {\r\n    cakeRewardsAprAsNumber = cakeRewardsApr.toNumber()\r\n  }\r\n  // const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0\r\n  return { cakeRewardsApr: cakeRewardsAprAsNumber, lpRewardsApr : 0 }\r\n}\r\n\r\nexport default null\r\n"]},"metadata":{},"sourceType":"module"}