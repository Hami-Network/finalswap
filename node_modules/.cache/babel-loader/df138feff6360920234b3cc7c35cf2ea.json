{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport erc20 from 'config/abi/erc20.json';\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers';\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber';\nimport multicall from 'utils/multicall';\n\nconst fetchFarm = async farm => {\n  var _info$allocPoint, _info$depositFeeBP;\n\n  const {\n    pid,\n    lpAddresses,\n    token,\n    quoteToken,\n    isTokenOnly\n  } = farm;\n  const lpAddress = getAddress(lpAddresses);\n  const calls = [// Balance of token in the LP contract\n  {\n    address: getAddress(token.address),\n    name: 'balanceOf',\n    params: [lpAddress]\n  }, // Balance of quote token on LP contract\n  {\n    address: getAddress(quoteToken.address),\n    name: 'balanceOf',\n    params: [lpAddress]\n  }, // Balance of LP tokens in the master chef contract\n  {\n    address: lpAddress,\n    name: 'balanceOf',\n    params: [getMasterChefAddress()]\n  }, // Balance of Single token in the master chef contract\n  {\n    address: getAddress(token.address),\n    name: 'balanceOf',\n    params: [getMasterChefAddress()]\n  }, // Total supply of LP tokens\n  {\n    address: lpAddress,\n    name: 'totalSupply'\n  }, // Token decimals\n  {\n    address: getAddress(token.address),\n    name: 'decimals'\n  }, // Quote token decimals\n  {\n    address: getAddress(quoteToken.address),\n    name: 'decimals'\n  }];\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, singleTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] = await multicall(erc20, calls); // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\n\n  const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Raw amount of token in the LP, including those not staked\n\n  const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals));\n  const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals)); // Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\n\n  const tokenAmountMc = tokenAmountTotal.times(lpTokenRatio);\n  const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio); // Total staked in LP, in quote token value\n\n  const lpTotalInQuoteToken = isTokenOnly ? new BigNumber(singleTokenBalanceMC).div(BIG_TEN.pow(tokenDecimals)) : quoteTokenAmountMc.times(new BigNumber(2)); // Only make masterchef calls if farm has pid\n\n  const [info, totalAllocPoint, lokiPerSecond, startBlockHarvest] = pid || pid === 0 ? await multicall(masterchefABI, [{\n    address: getMasterChefAddress(),\n    name: 'poolInfo',\n    params: [pid]\n  }, {\n    address: getMasterChefAddress(),\n    name: 'totalAllocPoint'\n  }, {\n    address: getMasterChefAddress(),\n    name: 'lokiPerSecond'\n  } // Start Block Number when harvest start\n  // {\n  //   address: getMasterChefAddress(),\n  //   name: 'startBlockHarvest',\n  // },\n  ]) : [null, null];\n  const allocPoint = info ? new BigNumber((_info$allocPoint = info.allocPoint) === null || _info$allocPoint === void 0 ? void 0 : _info$allocPoint._hex) : BIG_ZERO;\n  const depositfee1 = info ? new BigNumber((_info$depositFeeBP = info.depositFeeBP) === null || _info$depositFeeBP === void 0 ? void 0 : _info$depositFeeBP._hex) : BIG_ZERO;\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO;\n  const LokiPerSecond = lokiPerSecond ? new BigNumber(lokiPerSecond).div(BIG_TEN.pow(18)) : BIG_ZERO; // const blockNumber = await simpleRpcProvider.getBlockNumber()\n\n  const canharvest = true;\n  return {\n    tokenAmountMc: tokenAmountMc.toJSON(),\n    quoteTokenAmountMc: quoteTokenAmountMc.toJSON(),\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\n    quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\n    poolWeight: poolWeight.toJSON(),\n    multiplier: `${allocPoint.div(100).toString()}X`,\n    depositfee: `${depositfee1.div(100).toString()}%`,\n    lokipersecond: LokiPerSecond.toJSON(),\n    canharvest\n  };\n};\n\nexport default fetchFarm; // export const getCountdownparams = async () => {\n//   const masterChefAddress = getMasterChefAddress()\n//   const calls = [\n//     // Current Harvest Fee\n//     {\n//       address: masterChefAddress,\n//       name: 'harvestFee',\n//     },\n//     // Harvest Fee Reduction Rate\n//     {\n//       address: masterChefAddress,\n//       name: 'harvestFeeReductionRate',\n//     },\n//     // Harvest Period\n//     {\n//       address: masterChefAddress,\n//       name: 'harvestTime',\n//     },\n//     // Initial Harvest Fee\n//     {\n//       address: masterChefAddress,\n//       name: 'initialHarvestFee',\n//     },\n//     // Locked Period\n//     {\n//       address: masterChefAddress,\n//       name: 'lockedTime',\n//     },\n//     // Start Block Number when harvest start\n//     {\n//       address: masterChefAddress,\n//       name: 'startBlockHarvest',\n//     },\n//   ]\n//   const [harvestFee, harvestFeeReductionRate, harvestTime, initialHarvestFee, lockedTime, startBlockHarvest] =\n//   await multicall(masterchefABI, calls)\n//   const blockNumber = await simpleRpcProvider.getBlockNumber()\n//   const isharvestnow = harvestTime && blockNumber ? startBlockHarvest < blockNumber : false\n//   const remainingtime = isharvestnow ? (new BigNumber(startBlockHarvest)).plus(new BigNumber(harvestTime)).minus(new BigNumber(blockNumber)).times(3) : (new BigNumber(startBlockHarvest)).minus(new BigNumber(blockNumber)).times(3)\n//   return {\n//     harvestFee: new BigNumber(harvestFee).div(100).toJSON(),\n//     harvestFeeReductionRate: new BigNumber (harvestFeeReductionRate).toJSON(),\n//     harvestTime: new BigNumber (harvestTime).toJSON(),\n//     lockedTime: new BigNumber (lockedTime).toJSON(),\n//     initialHarvestFee: new BigNumber (initialHarvestFee).toJSON(),\n//     startBlockHarvest: new BigNumber (startBlockHarvest).toJSON(),\n//     currentblocknumber: blockNumber ? new BigNumber (blockNumber).toJSON() : '0',\n//     isharvestnow,\n//     remainingtime: Number(remainingtime.toJSON()) +  Date.now() / 1000\n//   }\n// }","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/farms/fetchPublicFarmData.ts"],"names":["BigNumber","masterchefABI","erc20","getAddress","getMasterChefAddress","BIG_TEN","BIG_ZERO","multicall","fetchFarm","farm","pid","lpAddresses","token","quoteToken","isTokenOnly","lpAddress","calls","address","name","params","tokenBalanceLP","quoteTokenBalanceLP","lpTokenBalanceMC","singleTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","lpTokenRatio","div","tokenAmountTotal","pow","quoteTokenAmountTotal","tokenAmountMc","times","quoteTokenAmountMc","lpTotalInQuoteToken","info","totalAllocPoint","lokiPerSecond","startBlockHarvest","allocPoint","_hex","depositfee1","depositFeeBP","poolWeight","LokiPerSecond","canharvest","toJSON","tokenPriceVsQuote","multiplier","toString","depositfee","lokipersecond"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\r\nimport { BIG_TEN, BIG_ZERO } from 'utils/bigNumber'\r\nimport multicall from 'utils/multicall'\r\nimport { simpleRpcProvider } from 'utils/providers'\r\nimport { Farm, SerializedBigNumber } from '../types'\r\n\r\ntype PublicFarmData = {\r\n  tokenAmountMc: SerializedBigNumber\r\n  quoteTokenAmountMc: SerializedBigNumber\r\n  tokenAmountTotal: SerializedBigNumber\r\n  quoteTokenAmountTotal: SerializedBigNumber\r\n  lpTotalInQuoteToken: SerializedBigNumber\r\n  lpTotalSupply: SerializedBigNumber\r\n  tokenPriceVsQuote: SerializedBigNumber\r\n  poolWeight: SerializedBigNumber\r\n  multiplier: string\r\n  depositfee: string\r\n  lokipersecond: SerializedBigNumber\r\n  canharvest: boolean\r\n}\r\n\r\nconst fetchFarm = async (farm: Farm): Promise<PublicFarmData> => {\r\n  const { pid, lpAddresses, token, quoteToken, isTokenOnly } = farm\r\n  const lpAddress = getAddress(lpAddresses)\r\n  const calls = [\r\n    // Balance of token in the LP contract\r\n    {\r\n      address: getAddress(token.address),\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of quote token on LP contract\r\n    {\r\n      address: getAddress(quoteToken.address),\r\n      name: 'balanceOf',\r\n      params: [lpAddress],\r\n    },\r\n    // Balance of LP tokens in the master chef contract\r\n    {\r\n      address: lpAddress,\r\n      name: 'balanceOf',\r\n      params: [getMasterChefAddress()],\r\n    },\r\n    // Balance of Single token in the master chef contract\r\n    {\r\n      address: getAddress(token.address),\r\n      name: 'balanceOf',\r\n      params: [getMasterChefAddress()],\r\n    },\r\n    // Total supply of LP tokens\r\n    {\r\n      address: lpAddress,\r\n      name: 'totalSupply',\r\n    },\r\n    // Token decimals\r\n    {\r\n      address: getAddress(token.address),\r\n      name: 'decimals',\r\n    },\r\n    // Quote token decimals\r\n    {\r\n      address: getAddress(quoteToken.address),\r\n      name: 'decimals',\r\n    },\r\n  ]\r\n\r\n  const [tokenBalanceLP, quoteTokenBalanceLP, lpTokenBalanceMC, singleTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals] =\r\n    await multicall(erc20, calls)\r\n\r\n  \r\n    // Ratio in % of LP tokens that are staked in the MC, vs the total number in circulation\r\n    const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n    // Raw amount of token in the LP, including those not staked\r\n    const tokenAmountTotal = new BigNumber(tokenBalanceLP).div(BIG_TEN.pow(tokenDecimals))\r\n    const quoteTokenAmountTotal = new BigNumber(quoteTokenBalanceLP).div(BIG_TEN.pow(quoteTokenDecimals))\r\n\r\n    // Amount of token in the LP that are staked in the MC (i.e amount of token * lp ratio)\r\n    const tokenAmountMc = tokenAmountTotal.times(lpTokenRatio)\r\n    const quoteTokenAmountMc = quoteTokenAmountTotal.times(lpTokenRatio)\r\n\r\n    // Total staked in LP, in quote token value\r\n    const lpTotalInQuoteToken = isTokenOnly ?  new BigNumber(singleTokenBalanceMC).div(BIG_TEN.pow(tokenDecimals)): quoteTokenAmountMc.times(new BigNumber(2))\r\n\r\n  // Only make masterchef calls if farm has pid\r\n  const [info, totalAllocPoint, lokiPerSecond, startBlockHarvest] =\r\n    pid || pid === 0\r\n      ? await multicall(masterchefABI, [\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'poolInfo',\r\n            params: [pid],\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'totalAllocPoint',\r\n          },\r\n          {\r\n            address: getMasterChefAddress(),\r\n            name: 'lokiPerSecond',\r\n          },\r\n          // Start Block Number when harvest start\r\n          // {\r\n          //   address: getMasterChefAddress(),\r\n          //   name: 'startBlockHarvest',\r\n          // },\r\n        ])\r\n      : [null, null]\r\n\r\n  const allocPoint = info ? new BigNumber(info.allocPoint?._hex) : BIG_ZERO\r\n  const depositfee1 = info ? new BigNumber(info.depositFeeBP?._hex) : BIG_ZERO\r\n  const poolWeight = totalAllocPoint ? allocPoint.div(new BigNumber(totalAllocPoint)) : BIG_ZERO\r\n  const LokiPerSecond = lokiPerSecond? new BigNumber(lokiPerSecond).div(BIG_TEN.pow(18)) : BIG_ZERO\r\n  // const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n  const canharvest = true\r\n  return {\r\n    tokenAmountMc: tokenAmountMc.toJSON(),\r\n    quoteTokenAmountMc: quoteTokenAmountMc.toJSON(),\r\n    tokenAmountTotal: tokenAmountTotal.toJSON(),\r\n    quoteTokenAmountTotal: quoteTokenAmountTotal.toJSON(),\r\n    lpTotalSupply: new BigNumber(lpTotalSupply).toJSON(),\r\n    lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n    tokenPriceVsQuote: quoteTokenAmountTotal.div(tokenAmountTotal).toJSON(),\r\n    poolWeight: poolWeight.toJSON(),\r\n    multiplier: `${allocPoint.div(100).toString()}X`,\r\n    depositfee: `${depositfee1.div(100).toString()}%`,\r\n    lokipersecond: LokiPerSecond.toJSON(),\r\n    canharvest\r\n  }\r\n}\r\n\r\nexport default fetchFarm\r\n\r\n// export const getCountdownparams = async () => {\r\n//   const masterChefAddress = getMasterChefAddress()\r\n//   const calls = [\r\n//     // Current Harvest Fee\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'harvestFee',\r\n//     },\r\n//     // Harvest Fee Reduction Rate\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'harvestFeeReductionRate',\r\n//     },\r\n//     // Harvest Period\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'harvestTime',\r\n//     },\r\n//     // Initial Harvest Fee\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'initialHarvestFee',\r\n//     },\r\n//     // Locked Period\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'lockedTime',\r\n//     },\r\n//     // Start Block Number when harvest start\r\n//     {\r\n//       address: masterChefAddress,\r\n//       name: 'startBlockHarvest',\r\n//     },\r\n//   ]\r\n\r\n//   const [harvestFee, harvestFeeReductionRate, harvestTime, initialHarvestFee, lockedTime, startBlockHarvest] =\r\n//   await multicall(masterchefABI, calls)\r\n//   const blockNumber = await simpleRpcProvider.getBlockNumber()\r\n//   const isharvestnow = harvestTime && blockNumber ? startBlockHarvest < blockNumber : false\r\n//   const remainingtime = isharvestnow ? (new BigNumber(startBlockHarvest)).plus(new BigNumber(harvestTime)).minus(new BigNumber(blockNumber)).times(3) : (new BigNumber(startBlockHarvest)).minus(new BigNumber(blockNumber)).times(3)\r\n//   return {\r\n//     harvestFee: new BigNumber(harvestFee).div(100).toJSON(),\r\n//     harvestFeeReductionRate: new BigNumber (harvestFeeReductionRate).toJSON(),\r\n//     harvestTime: new BigNumber (harvestTime).toJSON(),\r\n//     lockedTime: new BigNumber (lockedTime).toJSON(),\r\n//     initialHarvestFee: new BigNumber (initialHarvestFee).toJSON(),\r\n//     startBlockHarvest: new BigNumber (startBlockHarvest).toJSON(),\r\n//     currentblocknumber: blockNumber ? new BigNumber (blockNumber).toJSON() : '0',\r\n//     isharvestnow,\r\n//     remainingtime: Number(remainingtime.toJSON()) +  Date.now() / 1000\r\n//   }\r\n// }"]},"metadata":{},"sourceType":"module"}