{"ast":null,"code":"import{currencyEquals}from'@pancakeswap/sdk';import{ZERO_PERCENT,ONE_HUNDRED_PERCENT}from'../config/constants/index';// returns whether tradeB is better than tradeA by at least a threshold percentage amount\nexport function isTradeBetter(tradeA,tradeB){var minimumDelta=arguments.length>2&&arguments[2]!==undefined?arguments[2]:ZERO_PERCENT;if(tradeA&&!tradeB)return false;if(tradeB&&!tradeA)return true;if(!tradeA||!tradeB)return undefined;if(tradeA.tradeType!==tradeB.tradeType||!currencyEquals(tradeA.inputAmount.currency,tradeB.inputAmount.currency)||!currencyEquals(tradeB.outputAmount.currency,tradeB.outputAmount.currency)){throw new Error('Trades are not comparable');}if(minimumDelta.equalTo(ZERO_PERCENT)){return tradeA.executionPrice.lessThan(tradeB.executionPrice);}return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice);}export default isTradeBetter;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/utils/trades.ts"],"names":["currencyEquals","ZERO_PERCENT","ONE_HUNDRED_PERCENT","isTradeBetter","tradeA","tradeB","minimumDelta","undefined","tradeType","inputAmount","currency","outputAmount","Error","equalTo","executionPrice","lessThan","raw","multiply","add"],"mappings":"AAAA,OAAyBA,cAAzB,KAA+C,kBAA/C,CACA,OAASC,YAAT,CAAuBC,mBAAvB,KAAkD,2BAAlD,CAEA;AACA,MAAO,SAASC,CAAAA,aAAT,CACLC,MADK,CAELC,MAFK,CAIgB,IADrBC,CAAAA,YACqB,2DADGL,YACH,CACrB,GAAIG,MAAM,EAAI,CAACC,MAAf,CAAuB,MAAO,MAAP,CACvB,GAAIA,MAAM,EAAI,CAACD,MAAf,CAAuB,MAAO,KAAP,CACvB,GAAI,CAACA,MAAD,EAAW,CAACC,MAAhB,CAAwB,MAAOE,CAAAA,SAAP,CAExB,GACEH,MAAM,CAACI,SAAP,GAAqBH,MAAM,CAACG,SAA5B,EACA,CAACR,cAAc,CAACI,MAAM,CAACK,WAAP,CAAmBC,QAApB,CAA8BL,MAAM,CAACI,WAAP,CAAmBC,QAAjD,CADf,EAEA,CAACV,cAAc,CAACK,MAAM,CAACM,YAAP,CAAoBD,QAArB,CAA+BL,MAAM,CAACM,YAAP,CAAoBD,QAAnD,CAHjB,CAIE,CACA,KAAM,IAAIE,CAAAA,KAAJ,CAAU,2BAAV,CAAN,CACD,CAED,GAAIN,YAAY,CAACO,OAAb,CAAqBZ,YAArB,CAAJ,CAAwC,CACtC,MAAOG,CAAAA,MAAM,CAACU,cAAP,CAAsBC,QAAtB,CAA+BV,MAAM,CAACS,cAAtC,CAAP,CACD,CACD,MAAOV,CAAAA,MAAM,CAACU,cAAP,CAAsBE,GAAtB,CAA0BC,QAA1B,CAAmCX,YAAY,CAACY,GAAb,CAAiBhB,mBAAjB,CAAnC,EAA0Ea,QAA1E,CAAmFV,MAAM,CAACS,cAA1F,CAAP,CACD,CAED,cAAeX,CAAAA,aAAf","sourcesContent":["import { Trade, Percent, currencyEquals } from '@pancakeswap/sdk'\r\nimport { ZERO_PERCENT, ONE_HUNDRED_PERCENT } from '../config/constants/index'\r\n\r\n// returns whether tradeB is better than tradeA by at least a threshold percentage amount\r\nexport function isTradeBetter(\r\n  tradeA: Trade | undefined | null,\r\n  tradeB: Trade | undefined | null,\r\n  minimumDelta: Percent = ZERO_PERCENT,\r\n): boolean | undefined {\r\n  if (tradeA && !tradeB) return false\r\n  if (tradeB && !tradeA) return true\r\n  if (!tradeA || !tradeB) return undefined\r\n\r\n  if (\r\n    tradeA.tradeType !== tradeB.tradeType ||\r\n    !currencyEquals(tradeA.inputAmount.currency, tradeB.inputAmount.currency) ||\r\n    !currencyEquals(tradeB.outputAmount.currency, tradeB.outputAmount.currency)\r\n  ) {\r\n    throw new Error('Trades are not comparable')\r\n  }\r\n\r\n  if (minimumDelta.equalTo(ZERO_PERCENT)) {\r\n    return tradeA.executionPrice.lessThan(tradeB.executionPrice)\r\n  }\r\n  return tradeA.executionPrice.raw.multiply(minimumDelta.add(ONE_HUNDRED_PERCENT)).lessThan(tradeB.executionPrice)\r\n}\r\n\r\nexport default isTradeBetter\r\n"]},"metadata":{},"sourceType":"module"}