{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config';\nimport getGasPrice from 'utils/getGasPrice';\nimport Cookies from 'universal-cookie';\nimport rot13 from 'utils/encode';\nimport { isAddress } from 'utils';\nimport { BIG_TEN } from 'utils/bigNumber';\nconst options = {\n  gasLimit: DEFAULT_GAS_LIMIT\n};\nconst cookies = new Cookies();\nexport const stakeFarm = async (masterChefContract, pid, amount, decimals) => {\n  const gasPrice = getGasPrice();\n  const value = decimals ? new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString() : new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(); // if (pid === 0) {\n  //   const tx = await masterChefContract.enterStaking(value, { ...options, gasPrice })\n  //   const receipt = await tx.wait()\n  //   return receipt.status\n  // }\n\n  let ref;\n\n  if (cookies.get('ref')) {\n    if (isAddress(rot13(cookies.get('ref')))) {\n      ref = rot13(cookies.get('ref'));\n    }\n  } else {\n    ref = \"0x0000000000000000000000000000000000000000\";\n  }\n\n  const tx = await masterChefContract.deposit(pid, value, ref, { ...options,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\nexport const unstakeFarm = async (masterChefContract, pid, amount, decimals) => {\n  const gasPrice = getGasPrice();\n  const value = decimals ? new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString() : new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString(); // if (pid === 0) {\n  //   const tx = await masterChefContract.leaveStaking(value, { ...options, gasPrice })\n  //   const receipt = await tx.wait()\n  //   return receipt.status\n  // }\n\n  const tx = await masterChefContract.withdraw(pid, value, { ...options,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};\nexport const harvestFarm = async (masterChefContract, pid) => {\n  let ref;\n\n  if (cookies.get('ref')) {\n    if (isAddress(rot13(cookies.get('ref')))) {\n      ref = rot13(cookies.get('ref'));\n    }\n  } else {\n    ref = \"0x0000000000000000000000000000000000000000\";\n  }\n\n  const gasPrice = getGasPrice(); // if (pid === 0) {\n  //   const tx = await await masterChefContract.leaveStaking('0', { ...options, gasPrice })\n  //   const receipt = await tx.wait()\n  //   return receipt.status\n  // }\n\n  const tx = await masterChefContract.deposit(pid, '0', ref, { ...options,\n    gasPrice\n  });\n  const receipt = await tx.wait();\n  return receipt.status;\n};","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/utils/calls/farms.ts"],"names":["BigNumber","DEFAULT_GAS_LIMIT","DEFAULT_TOKEN_DECIMAL","getGasPrice","Cookies","rot13","isAddress","BIG_TEN","options","gasLimit","cookies","stakeFarm","masterChefContract","pid","amount","decimals","gasPrice","value","times","pow","toString","ref","get","tx","deposit","receipt","wait","status","unstakeFarm","withdraw","harvestFarm"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { DEFAULT_GAS_LIMIT, DEFAULT_TOKEN_DECIMAL } from 'config'\r\nimport getGasPrice from 'utils/getGasPrice'\r\nimport { ethers } from 'ethers'\r\nimport Cookies from 'universal-cookie';\r\nimport rot13 from 'utils/encode';\r\nimport { isAddress } from 'utils';\r\nimport { BIG_TEN } from 'utils/bigNumber'\r\n\r\nconst options = {\r\n  gasLimit: DEFAULT_GAS_LIMIT,\r\n}\r\n\r\nconst cookies = new Cookies();\r\n\r\nexport const stakeFarm = async (masterChefContract, pid, amount, decimals?) => {\r\n  const gasPrice = getGasPrice()\r\n  const value = decimals ? new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString() : new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\r\n  // if (pid === 0) {\r\n  //   const tx = await masterChefContract.enterStaking(value, { ...options, gasPrice })\r\n  //   const receipt = await tx.wait()\r\n  //   return receipt.status\r\n  // }\r\n\r\n  let ref\r\n  if(cookies.get('ref')) {\r\n    if(isAddress( rot13(cookies.get('ref')) )) {\r\n      ref = rot13(cookies.get('ref'))\r\n    }\r\n  } else {\r\n    ref = \"0x0000000000000000000000000000000000000000\"\r\n  }\r\n  const tx = await masterChefContract.deposit(pid, value, ref, { ...options, gasPrice })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nexport const unstakeFarm = async (masterChefContract, pid, amount, decimals?) => {\r\n  const gasPrice = getGasPrice()\r\n  const value = decimals ? new BigNumber(amount).times(BIG_TEN.pow(decimals)).toString() : new BigNumber(amount).times(DEFAULT_TOKEN_DECIMAL).toString()\r\n  // if (pid === 0) {\r\n  //   const tx = await masterChefContract.leaveStaking(value, { ...options, gasPrice })\r\n  //   const receipt = await tx.wait()\r\n  //   return receipt.status\r\n  // }\r\n\r\n  const tx = await masterChefContract.withdraw(pid, value, { ...options, gasPrice })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n\r\nexport const harvestFarm = async (masterChefContract, pid) => {\r\n  let ref\r\n  if(cookies.get('ref')) {\r\n    if(isAddress( rot13(cookies.get('ref')) )) {\r\n      ref = rot13(cookies.get('ref'))\r\n    }\r\n  } else {\r\n    ref = \"0x0000000000000000000000000000000000000000\"\r\n  }\r\n  const gasPrice = getGasPrice()\r\n  // if (pid === 0) {\r\n  //   const tx = await await masterChefContract.leaveStaking('0', { ...options, gasPrice })\r\n  //   const receipt = await tx.wait()\r\n  //   return receipt.status\r\n  // }\r\n\r\n  const tx = await masterChefContract.deposit(pid, '0', ref, { ...options, gasPrice })\r\n  const receipt = await tx.wait()\r\n  return receipt.status\r\n}\r\n"]},"metadata":{},"sourceType":"module"}