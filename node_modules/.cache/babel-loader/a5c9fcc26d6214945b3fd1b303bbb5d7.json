{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97154\\\\swap\\\\hami\\\\LokiswapUI\\\\src\\\\views\\\\Farms\\\\Farms.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState, useMemo, useRef } from 'react';\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport { useWeb3React } from '@web3-react/core';\nimport { Heading, Toggle, Text, Flex } from '@pancakeswap/uikit';\nimport { ChainId } from '@pancakeswap/sdk';\nimport styled from 'styled-components';\nimport FlexLayout from 'components/Layout/Flex';\nimport Page from 'components/Layout/Page';\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks';\nimport usePersistState from 'hooks/usePersistState';\nimport { useTranslation } from 'contexts/Localization';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { getFarmApr } from 'utils/apr';\nimport { orderBy } from 'lodash';\nimport isArchivedPid from 'utils/farmHelpers';\nimport { latinise } from 'utils/latinise';\nimport { useUserFarmStakedOnly } from 'state/user/hooks';\nimport PageHeader from 'components/PageHeader';\nimport SearchInput from 'components/SearchInput';\nimport Select from 'components/Select/Select';\nimport Loading from 'components/Loading'; // import { getCountdownparams } from 'state/farms/fetchPublicFarmData'\n\nimport FarmCard from './components/FarmCard/FarmCard';\nimport Table from './components/FarmTable/FarmTable';\nimport FarmTabButtons from './components/FarmTabButtons';\nimport ToggleView from './components/ToggleView/ToggleView';\nimport { DesktopColumnSchema, ViewMode } from './components/types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n  margin-bottom: 32px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n    margin-bottom: 0;\n  }\n`;\n_c = ControlContainer;\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`;\n_c2 = ToggleWrapper;\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`;\n_c3 = LabelWrapper;\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`;\n_c4 = FilterContainer;\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({\n  theme\n}) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`;\n_c5 = ViewControls;\nconst StyledPageHeader = styled(PageHeader)`\n  > div {\n    padding-bottom: 5px;\n  }\n`;\n_c6 = StyledPageHeader;\nconst NUMBER_OF_FARMS_VISIBLE = 12;\n\nconst getDisplayApr = (cakeRewardsApr, lpRewardsApr) => {\n  // if (cakeRewardsApr && lpRewardsApr) {\n  //   return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\n  // }\n  if (cakeRewardsApr) {\n    return cakeRewardsApr.toLocaleString('en-US', {\n      maximumFractionDigits: 2\n    });\n  }\n\n  return null;\n};\n\nconst Farms = farmsProps => {\n  _s();\n\n  const {\n    path\n  } = useRouteMatch();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    t\n  } = useTranslation();\n  const {\n    data: farmsLP,\n    userDataLoaded\n  } = useFarms();\n  const cakePrice = usePriceCakeBusd();\n  const [query, setQuery] = useState('');\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, {\n    localStorageKey: 'pancake_farm_view'\n  });\n  const {\n    account\n  } = useWeb3React();\n  const [sortOption, setSortOption] = useState('hot');\n  const chosenFarmsLength = useRef(0);\n  const {\n    tokenMode\n  } = farmsProps;\n  const isArchived = pathname.includes('archived');\n  const isInactive = pathname.includes('history');\n  const isActive = !isInactive && !isArchived;\n  usePollFarmsData(isArchived); // Users with no wallet connected should see 0 as Earned amount\n  // Connected users should see loading indicator until first userData has loaded\n\n  const userDataReady = !account || !!account && userDataLoaded;\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive);\n  const activeFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid));\n  const inactiveFarms = farmsLP.filter(farm => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid));\n  const archivedFarms = farmsLP.filter(farm => isArchivedPid(farm.pid));\n  const stakedOnlyFarms = activeFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedInactiveFarms = inactiveFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const stakedArchivedFarms = archivedFarms.filter(farm => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0));\n  const farmsList = useCallback(farmsToDisplay => {\n    let farmsToDisplayWithAPR = farmsToDisplay.map(farm => {\n      if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\n        return farm;\n      }\n\n      const totalLiquidity = farm.isTokenOnly ? new BigNumber(farm.lpTotalInQuoteToken).times(farm.token.busdPrice) : new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice);\n      const {\n        cakeRewardsApr,\n        lpRewardsApr\n      } = isActive ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET], new BigNumber(farm.lokipersecond)) : {\n        cakeRewardsApr: 0,\n        lpRewardsApr: 0\n      };\n      return { ...farm,\n        apr: cakeRewardsApr,\n        lpRewardsApr,\n        liquidity: totalLiquidity\n      };\n    });\n\n    if (query) {\n      const lowercaseQuery = latinise(query.toLowerCase());\n      farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter(farm => {\n        return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery);\n      });\n    }\n\n    return farmsToDisplayWithAPR;\n  }, [cakePrice, query, isActive]);\n\n  const handleChangeQuery = event => {\n    setQuery(event.target.value);\n  };\n\n  const loadMoreRef = useRef(null);\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE);\n  const [observerIsSet, setObserverIsSet] = useState(false); // const [canharvest, setCanharvest] = useState(false);\n  // useEffect(() => {\n  //   const setcanharvest = async () => {\n  //     const res = await getCountdownparams()\n  //     setCanharvest(res.isharvestnow)\n  //   }\n  //   setcanharvest()\n  // }, [])\n  // const [harvestfee, setHarvestfee] = useState('69');\n  // useEffect(() => {\n  //   const setharvestfee = async () => {\n  //     const res = await getCountdownparams()\n  //     setHarvestfee(res.harvestFee)\n  //   }\n  //   setharvestfee()\n  // }, [])\n\n  const chosenFarmsMemoized = useMemo(() => {\n    let chosenFarms = [];\n\n    const sortFarms = farms => {\n      switch (sortOption) {\n        case 'apr':\n          return orderBy(farms, farm => farm.apr + farm.lpRewardsApr, 'desc');\n\n        case 'multiplier':\n          return orderBy(farms, farm => farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0, 'desc');\n\n        case 'earned':\n          return orderBy(farms, farm => farm.userData ? Number(farm.userData.earnings) : 0, 'desc');\n\n        case 'liquidity':\n          return orderBy(farms, farm => Number(farm.liquidity), 'desc');\n\n        default:\n          return farms;\n      }\n    };\n\n    if (isActive) {\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms);\n    }\n\n    if (isInactive) {\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms);\n    }\n\n    if (isArchived) {\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms);\n    }\n\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible);\n  }, [sortOption, activeFarms, farmsList, inactiveFarms, archivedFarms, isActive, isInactive, isArchived, stakedArchivedFarms, stakedInactiveFarms, stakedOnly, stakedOnlyFarms, numberOfFarmsVisible]);\n  chosenFarmsLength.current = chosenFarmsMemoized.length;\n  useEffect(() => {\n    const showMoreFarms = entries => {\n      const [entry] = entries;\n\n      if (entry.isIntersecting) {\n        setNumberOfFarmsVisible(farmsCurrentlyVisible => {\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE;\n          }\n\n          return farmsCurrentlyVisible;\n        });\n      }\n    };\n\n    if (!observerIsSet) {\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\n        rootMargin: '0px',\n        threshold: 1\n      });\n      loadMoreObserver.observe(loadMoreRef.current);\n      setObserverIsSet(true);\n    }\n  }, [chosenFarmsMemoized, observerIsSet]);\n  const rowData = chosenFarmsMemoized.map(farm => {\n    const {\n      token,\n      quoteToken\n    } = farm;\n    const tokenAddress = token.address;\n    const quoteTokenAddress = quoteToken.address;\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '');\n    const row = {\n      apr: {\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\n        pid: farm.pid,\n        multiplier: farm.multiplier,\n        lpLabel,\n        lpSymbol: farm.lpSymbol,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apr\n      },\n      farm: {\n        label: lpLabel,\n        pid: farm.pid,\n        token: farm.token,\n        quoteToken: farm.quoteToken,\n        isTokenOnly: farm.isTokenOnly\n      },\n      earned: {\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\n        pid: farm.pid\n      },\n      liquidity: {\n        liquidity: farm.liquidity\n      },\n      multiplier: {\n        multiplier: farm.multiplier\n      },\n      details: farm\n    };\n    return row;\n  });\n\n  const renderContent = () => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema;\n      const columns = columnSchema.map(column => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a, b) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id;\n\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value);\n              }\n\n              return 0;\n\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings;\n\n            default:\n              return 1;\n          }\n        },\n        sortable: column.sortable\n      }));\n      return /*#__PURE__*/_jsxDEV(Table, {\n        data: rowData,\n        columns: columns,\n        userDataReady: userDataReady\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(FlexLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: false\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/history`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: true\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: `${path}/archived`,\n        children: chosenFarmsMemoized.map(farm => /*#__PURE__*/_jsxDEV(FarmCard, {\n          farm: farm,\n          displayApr: getDisplayApr(farm.apr, farm.lpRewardsApr),\n          cakePrice: cakePrice,\n          account: account,\n          removed: true\n        }, farm.pid, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleSortOptionChange = option => {\n    setSortOption(option.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(StyledPageHeader, {\n      children: /*#__PURE__*/_jsxDEV(Flex, {\n        flexDirection: \"column\",\n        children: /*#__PURE__*/_jsxDEV(Flex, {\n          flexDirection: ['column', null, null, 'row'],\n          alignItems: ['flex-end', null, null, 'center'],\n          justifyContent: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Flex, {\n            flexDirection: \"column\",\n            flex: \"1\",\n            alignSelf: ['flex-start', null, null, 'center'],\n            children: [/*#__PURE__*/_jsxDEV(Heading, {\n              as: \"h1\",\n              scale: \"xxl\",\n              color: \"#0dcad8\",\n              mb: \"24px\",\n              children: tokenMode ? t('Pools') : t('Farms')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Flex, {\n              children: [/*#__PURE__*/_jsxDEV(Heading, {\n                scale: \"lg\",\n                color: \"text\",\n                children: tokenMode ? t('Stake Single token to earn LOKI,') : t('Stake LP tokens to earn LOKI,')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 416,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Text, {\n                ml: \"10px\",\n                fontSize: \"18px\",\n                children: t('Deposit Fee will be used to buyback LOKI')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 419,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Page, {\n      children: [/*#__PURE__*/_jsxDEV(ControlContainer, {\n        children: [/*#__PURE__*/_jsxDEV(ViewControls, {\n          children: [/*#__PURE__*/_jsxDEV(ToggleView, {\n            viewMode: viewMode,\n            onToggle: mode => setViewMode(mode)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ToggleWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Toggle, {\n              checked: stakedOnly,\n              onChange: () => setStakedOnly(!stakedOnly),\n              scale: \"sm\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: [\" \", t('Staked only')]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FarmTabButtons, {\n            hasStakeInFinishedFarms: stakedInactiveFarms.length > 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FilterContainer, {\n          children: [/*#__PURE__*/_jsxDEV(LabelWrapper, {\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textTransform: \"uppercase\",\n              children: t('Sort by')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 456,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              options: [// {\n              //   label: t('Hot'),\n              //   value: 'hot',\n              // },\n              {\n                label: t('APR'),\n                value: 'apr'\n              }, {\n                label: t('Multiplier'),\n                value: 'multiplier'\n              }, {\n                label: t('Earned'),\n                value: 'earned'\n              }, {\n                label: t('Liquidity'),\n                value: 'liquidity'\n              }],\n              onChange: handleSortOptionChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 457,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 455,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(LabelWrapper, {\n            style: {\n              marginLeft: 16\n            },\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              textTransform: \"uppercase\",\n              children: t('Search')\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 484,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SearchInput, {\n              onChange: handleChangeQuery,\n              placeholder: \"Search Farms\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 454,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 9\n      }, this), renderContent(), account && !userDataLoaded && stakedOnly && /*#__PURE__*/_jsxDEV(Flex, {\n        justifyContent: \"center\",\n        children: /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 492,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: loadMoreRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Farms, \"7Lbz+9xg9OaU27qZpluzCluOjnQ=\", false, function () {\n  return [useRouteMatch, useLocation, useTranslation, useFarms, usePriceCakeBusd, usePersistState, useWeb3React, usePollFarmsData, useUserFarmStakedOnly];\n});\n\n_c7 = Farms;\nexport default Farms;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"ControlContainer\");\n$RefreshReg$(_c2, \"ToggleWrapper\");\n$RefreshReg$(_c3, \"LabelWrapper\");\n$RefreshReg$(_c4, \"FilterContainer\");\n$RefreshReg$(_c5, \"ViewControls\");\n$RefreshReg$(_c6, \"StyledPageHeader\");\n$RefreshReg$(_c7, \"Farms\");","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Farms/Farms.tsx"],"names":["React","useEffect","useCallback","useState","useMemo","useRef","Route","useRouteMatch","useLocation","BigNumber","useWeb3React","Heading","Toggle","Text","Flex","ChainId","styled","FlexLayout","Page","useFarms","usePollFarmsData","usePriceCakeBusd","usePersistState","useTranslation","getBalanceNumber","getFarmApr","orderBy","isArchivedPid","latinise","useUserFarmStakedOnly","PageHeader","SearchInput","Select","Loading","FarmCard","Table","FarmTabButtons","ToggleView","DesktopColumnSchema","ViewMode","ControlContainer","div","theme","mediaQueries","sm","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledPageHeader","NUMBER_OF_FARMS_VISIBLE","getDisplayApr","cakeRewardsApr","lpRewardsApr","toLocaleString","maximumFractionDigits","Farms","farmsProps","path","pathname","t","data","farmsLP","userDataLoaded","cakePrice","query","setQuery","viewMode","setViewMode","TABLE","localStorageKey","account","sortOption","setSortOption","chosenFarmsLength","tokenMode","isArchived","includes","isInactive","isActive","userDataReady","stakedOnly","setStakedOnly","activeFarms","filter","farm","isTokenOnly","multiplier","pid","inactiveFarms","archivedFarms","stakedOnlyFarms","userData","stakedBalance","isGreaterThan","stakedInactiveFarms","stakedArchivedFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPR","map","lpTotalInQuoteToken","quoteToken","busdPrice","totalLiquidity","times","token","poolWeight","lpAddresses","MAINNET","lokipersecond","apr","liquidity","lowercaseQuery","toLowerCase","lpSymbol","handleChangeQuery","event","target","value","loadMoreRef","numberOfFarmsVisible","setNumberOfFarmsVisible","observerIsSet","setObserverIsSet","chosenFarmsMemoized","chosenFarms","sortFarms","farms","Number","slice","earnings","current","length","showMoreFarms","entries","entry","isIntersecting","farmsCurrentlyVisible","loadMoreObserver","IntersectionObserver","rootMargin","threshold","observe","rowData","tokenAddress","address","quoteTokenAddress","lpLabel","split","toUpperCase","replace","row","originalValue","label","earned","details","renderContent","columnSchema","columns","column","id","name","sort","a","b","original","sortable","handleSortOptionChange","option","mode","marginLeft"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState, useMemo, useRef } from 'react'\r\nimport { Route, useRouteMatch, useLocation, NavLink } from 'react-router-dom'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Image, Heading, RowType, Toggle, Text, Button, ArrowForwardIcon, Flex } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport styled from 'styled-components'\r\nimport FlexLayout from 'components/Layout/Flex'\r\nimport Page from 'components/Layout/Page'\r\nimport { useFarms, usePollFarmsData, usePriceCakeBusd } from 'state/farms/hooks'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { orderBy } from 'lodash'\r\nimport isArchivedPid from 'utils/farmHelpers'\r\nimport { latinise } from 'utils/latinise'\r\nimport { useUserFarmStakedOnly } from 'state/user/hooks'\r\nimport PageHeader from 'components/PageHeader'\r\nimport SearchInput from 'components/SearchInput'\r\nimport Select, { OptionProps } from 'components/Select/Select'\r\nimport Loading from 'components/Loading'\r\n// import { getCountdownparams } from 'state/farms/fetchPublicFarmData'\r\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\r\nimport Table from './components/FarmTable/FarmTable'\r\nimport FarmTabButtons from './components/FarmTabButtons'\r\nimport { RowProps } from './components/FarmTable/Row'\r\nimport ToggleView from './components/ToggleView/ToggleView'\r\nimport { DesktopColumnSchema, ViewMode } from './components/types'\r\n\r\nconst ControlContainer = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  align-items: center;\r\n  position: relative;\r\n\r\n  justify-content: space-between;\r\n  flex-direction: column;\r\n  margin-bottom: 32px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    padding: 16px 32px;\r\n    margin-bottom: 0;\r\n  }\r\n`\r\n\r\nconst ToggleWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 10px;\r\n\r\n  ${Text} {\r\n    margin-left: 8px;\r\n  }\r\n`\r\n\r\nconst LabelWrapper = styled.div`\r\n  > ${Text} {\r\n    font-size: 12px;\r\n  }\r\n`\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n  padding: 8px 0px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    width: auto;\r\n    padding: 0;\r\n  }\r\n`\r\n\r\nconst ViewControls = styled.div`\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 100%;\r\n\r\n  > div {\r\n    padding: 8px 0px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    justify-content: flex-start;\r\n    width: auto;\r\n\r\n    > div {\r\n      padding: 0;\r\n    }\r\n  }\r\n`\r\n\r\nconst StyledPageHeader = styled(PageHeader)`\r\n  > div {\r\n    padding-bottom: 5px;\r\n  }\r\n`\r\nconst NUMBER_OF_FARMS_VISIBLE = 12\r\n\r\nconst getDisplayApr = (cakeRewardsApr?: number, lpRewardsApr?: number) => {\r\n  // if (cakeRewardsApr && lpRewardsApr) {\r\n  //   return (cakeRewardsApr + lpRewardsApr).toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  // }\r\n  if (cakeRewardsApr) {\r\n    return cakeRewardsApr.toLocaleString('en-US', { maximumFractionDigits: 2 })\r\n  }\r\n  return null\r\n}\r\n\r\nexport interface FarmsProps{\r\n  tokenMode?: boolean\r\n}\r\n\r\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\r\n  const { path } = useRouteMatch()\r\n  const { pathname } = useLocation()\r\n  const { t } = useTranslation()\r\n  const { data: farmsLP, userDataLoaded } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const [query, setQuery] = useState('')\r\n  const [viewMode, setViewMode] = usePersistState(ViewMode.TABLE, { localStorageKey: 'pancake_farm_view' })\r\n  const { account } = useWeb3React()\r\n  const [sortOption, setSortOption] = useState('hot')\r\n  const chosenFarmsLength = useRef(0)\r\n  const {tokenMode} = farmsProps;\r\n  const isArchived = pathname.includes('archived')\r\n  const isInactive = pathname.includes('history')\r\n  const isActive = !isInactive && !isArchived\r\n  usePollFarmsData(isArchived)\r\n\r\n  // Users with no wallet connected should see 0 as Earned amount\r\n  // Connected users should see loading indicator until first userData has loaded\r\n  const userDataReady = !account || (!!account && userDataLoaded)\r\n\r\n  const [stakedOnly, setStakedOnly] = useUserFarmStakedOnly(isActive)\r\n\r\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X' && !isArchivedPid(farm.pid))\r\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X' && !isArchivedPid(farm.pid))\r\n  const archivedFarms = farmsLP.filter((farm) => isArchivedPid(farm.pid))\r\n\r\n  const stakedOnlyFarms = activeFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedInactiveFarms = inactiveFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const stakedArchivedFarms = archivedFarms.filter(\r\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\r\n  )\r\n\r\n  const farmsList = useCallback(\r\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\r\n      let farmsToDisplayWithAPR: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\r\n        if (!farm.lpTotalInQuoteToken || !farm.quoteToken.busdPrice) {\r\n          return farm\r\n        }\r\n        const totalLiquidity = farm.isTokenOnly ? new BigNumber(farm.lpTotalInQuoteToken).times(farm.token.busdPrice) : new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n        const { cakeRewardsApr, lpRewardsApr } = isActive\r\n          ? getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET], new BigNumber(farm.lokipersecond))\r\n          : { cakeRewardsApr: 0, lpRewardsApr: 0 }\r\n\r\n        return { ...farm, apr: cakeRewardsApr, lpRewardsApr, liquidity: totalLiquidity }\r\n      })\r\n\r\n      if (query) {\r\n        const lowercaseQuery = latinise(query.toLowerCase())\r\n        farmsToDisplayWithAPR = farmsToDisplayWithAPR.filter((farm: FarmWithStakedValue) => {\r\n          return latinise(farm.lpSymbol.toLowerCase()).includes(lowercaseQuery)\r\n        })\r\n      }\r\n      return farmsToDisplayWithAPR\r\n    },\r\n    [cakePrice, query, isActive],\r\n  )\r\n\r\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    setQuery(event.target.value)\r\n  }\r\n\r\n  const loadMoreRef = useRef<HTMLDivElement>(null)\r\n\r\n  const [numberOfFarmsVisible, setNumberOfFarmsVisible] = useState(NUMBER_OF_FARMS_VISIBLE)\r\n  const [observerIsSet, setObserverIsSet] = useState(false)\r\n  // const [canharvest, setCanharvest] = useState(false);\r\n\r\n  // useEffect(() => {\r\n  //   const setcanharvest = async () => {\r\n  //     const res = await getCountdownparams()\r\n  //     setCanharvest(res.isharvestnow)\r\n  //   }\r\n  //   setcanharvest()\r\n  // }, [])\r\n\r\n  // const [harvestfee, setHarvestfee] = useState('69');\r\n  // useEffect(() => {\r\n  //   const setharvestfee = async () => {\r\n  //     const res = await getCountdownparams()\r\n  //     setHarvestfee(res.harvestFee)\r\n  //   }\r\n  //   setharvestfee()\r\n  // }, [])\r\n\r\n  const chosenFarmsMemoized = useMemo(() => {\r\n    let chosenFarms = []\r\n\r\n    const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\r\n      switch (sortOption) {\r\n        case 'apr':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => farm.apr + farm.lpRewardsApr, 'desc')\r\n        case 'multiplier':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\r\n            'desc',\r\n          )\r\n        case 'earned':\r\n          return orderBy(\r\n            farms,\r\n            (farm: FarmWithStakedValue) => (farm.userData ? Number(farm.userData.earnings) : 0),\r\n            'desc',\r\n          )\r\n        case 'liquidity':\r\n          return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\r\n        default:\r\n          return farms\r\n      }\r\n    }\r\n\r\n    if (isActive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\r\n    }\r\n    if (isInactive) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\r\n    }\r\n    if (isArchived) {\r\n      chosenFarms = stakedOnly ? farmsList(stakedArchivedFarms) : farmsList(archivedFarms)\r\n    }\r\n\r\n    return sortFarms(chosenFarms).slice(0, numberOfFarmsVisible)\r\n  }, [\r\n    sortOption,\r\n    activeFarms,\r\n    farmsList,\r\n    inactiveFarms,\r\n    archivedFarms,\r\n    isActive,\r\n    isInactive,\r\n    isArchived,\r\n    stakedArchivedFarms,\r\n    stakedInactiveFarms,\r\n    stakedOnly,\r\n    stakedOnlyFarms,\r\n    numberOfFarmsVisible,\r\n  ])\r\n\r\n  chosenFarmsLength.current = chosenFarmsMemoized.length\r\n\r\n  useEffect(() => {\r\n    const showMoreFarms = (entries) => {\r\n      const [entry] = entries\r\n      if (entry.isIntersecting) {\r\n        setNumberOfFarmsVisible((farmsCurrentlyVisible) => {\r\n          if (farmsCurrentlyVisible <= chosenFarmsLength.current) {\r\n            return farmsCurrentlyVisible + NUMBER_OF_FARMS_VISIBLE\r\n          }\r\n          return farmsCurrentlyVisible\r\n        })\r\n      }\r\n    }\r\n\r\n    if (!observerIsSet) {\r\n      const loadMoreObserver = new IntersectionObserver(showMoreFarms, {\r\n        rootMargin: '0px',\r\n        threshold: 1,\r\n      })\r\n      loadMoreObserver.observe(loadMoreRef.current)\r\n      setObserverIsSet(true)\r\n    }\r\n  }, [chosenFarmsMemoized, observerIsSet])\r\n\r\n  const rowData = chosenFarmsMemoized.map((farm) => {\r\n    const { token, quoteToken } = farm\r\n    const tokenAddress = token.address\r\n    const quoteTokenAddress = quoteToken.address\r\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\r\n\r\n    const row: RowProps = {\r\n      apr: {\r\n        value: getDisplayApr(farm.apr, farm.lpRewardsApr),\r\n        pid: farm.pid,\r\n        multiplier: farm.multiplier,\r\n        lpLabel,\r\n        lpSymbol: farm.lpSymbol,\r\n        tokenAddress,\r\n        quoteTokenAddress,\r\n        cakePrice,\r\n        originalValue: farm.apr,\r\n      },\r\n      farm: {\r\n        label: lpLabel,\r\n        pid: farm.pid,\r\n        token: farm.token,\r\n        quoteToken: farm.quoteToken,\r\n        isTokenOnly: farm.isTokenOnly\r\n      },\r\n      earned: {\r\n        earnings: getBalanceNumber(new BigNumber(farm.userData.earnings)),\r\n        pid: farm.pid,\r\n      },\r\n      liquidity: {\r\n        liquidity: farm.liquidity,\r\n      },\r\n      multiplier: {\r\n        multiplier: farm.multiplier,\r\n      },\r\n      details: farm,\r\n    }\r\n\r\n    return row\r\n  })\r\n\r\n  const renderContent = (): JSX.Element => {\r\n    if (viewMode === ViewMode.TABLE && rowData.length) {\r\n      const columnSchema = DesktopColumnSchema\r\n\r\n      const columns = columnSchema.map((column) => ({\r\n        id: column.id,\r\n        name: column.name,\r\n        label: column.label,\r\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\r\n          switch (column.name) {\r\n            case 'farm':\r\n              return b.id - a.id\r\n            case 'apr':\r\n              if (a.original.apr.value && b.original.apr.value) {\r\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\r\n              }\r\n\r\n              return 0\r\n            case 'earned':\r\n              return a.original.earned.earnings - b.original.earned.earnings\r\n            default:\r\n              return 1\r\n          }\r\n        },\r\n        sortable: column.sortable,\r\n      }))\r\n\r\n      return <Table data={rowData} columns={columns} userDataReady={userDataReady} />\r\n    }\r\n\r\n    return (\r\n      <FlexLayout>\r\n        <Route exact path={`${path}`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed={false}\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/history`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n        <Route exact path={`${path}/archived`}>\r\n          {chosenFarmsMemoized.map((farm) => (\r\n            <FarmCard\r\n              key={farm.pid}\r\n              farm={farm}\r\n              displayApr={getDisplayApr(farm.apr, farm.lpRewardsApr)}\r\n              cakePrice={cakePrice}\r\n              account={account}\r\n              removed\r\n            />\r\n          ))}\r\n        </Route>\r\n      </FlexLayout>\r\n    )\r\n  }\r\n\r\n  const handleSortOptionChange = (option: OptionProps): void => {\r\n    setSortOption(option.value)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledPageHeader>\r\n        <Flex flexDirection=\"column\">\r\n          <Flex flexDirection={['column', null, null, 'row']} alignItems={['flex-end', null, null, 'center']} justifyContent=\"center\">\r\n            <Flex flexDirection=\"column\" flex=\"1\" alignSelf={['flex-start', null, null, 'center']}>\r\n              <Heading as=\"h1\" scale=\"xxl\" color=\"#0dcad8\" mb=\"24px\">\r\n                {tokenMode ? t('Pools') : t('Farms')}\r\n              </Heading>\r\n              <Flex>\r\n                <Heading scale=\"lg\" color=\"text\">\r\n                  {tokenMode ? t('Stake Single token to earn LOKI,') : t('Stake LP tokens to earn LOKI,')}\r\n                </Heading>\r\n                <Text ml=\"10px\" fontSize=\"18px\">{t('Deposit Fee will be used to buyback LOKI')}</Text>\r\n              </Flex>\r\n            </Flex>\r\n          \r\n          {/* <Flex flexDirection=\"column\" flex=\"1\" alignSelf={['flex-start', null, null, 'center']}\r\n          >\r\n            <Heading scale=\"lg\" color=\"text\">\r\n                {canharvest ? t('Harvest Remain Time') : t('Harvest Locked')}\r\n            </Heading>\r\n            <Text>\r\n              {canharvest ? `Harvest Fee is ${harvestfee}%. It decreases by 3% every hour.`: t('Remain Time to Harvest')}\r\n            </Text>\r\n            <CountDownCircler />\r\n          </Flex> */}\r\n          </Flex>\r\n        </Flex>\r\n        {/* <NavLink exact activeClassName=\"active\" to=\"/farms/auction\" id=\"lottery-pot-banner\">\r\n          <Button p=\"0\" variant=\"text\">\r\n            <Text color=\"primary\" bold fontSize=\"16px\" mr=\"4px\">\r\n              {t('Community Auctions')}\r\n            </Text>\r\n            <ArrowForwardIcon color=\"primary\" />\r\n          </Button>\r\n        </NavLink> */}\r\n      </StyledPageHeader>\r\n      <Page>\r\n        <ControlContainer>\r\n          <ViewControls>\r\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\r\n            <ToggleWrapper>\r\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\r\n              <Text> {t('Staked only')}</Text>\r\n            </ToggleWrapper>\r\n            <FarmTabButtons hasStakeInFinishedFarms={stakedInactiveFarms.length > 0} />\r\n          </ViewControls>\r\n          <FilterContainer>\r\n            <LabelWrapper>\r\n              <Text textTransform=\"uppercase\">{t('Sort by')}</Text>\r\n              <Select\r\n                options={[\r\n                  // {\r\n                  //   label: t('Hot'),\r\n                  //   value: 'hot',\r\n                  // },\r\n                  {\r\n                    label: t('APR'),\r\n                    value: 'apr',\r\n                  },\r\n                  {\r\n                    label: t('Multiplier'),\r\n                    value: 'multiplier',\r\n                  },\r\n                  {\r\n                    label: t('Earned'),\r\n                    value: 'earned',\r\n                  },\r\n                  {\r\n                    label: t('Liquidity'),\r\n                    value: 'liquidity',\r\n                  },\r\n                ]}\r\n                onChange={handleSortOptionChange}\r\n              />\r\n            </LabelWrapper>\r\n            <LabelWrapper style={{ marginLeft: 16 }}>\r\n              <Text textTransform=\"uppercase\">{t('Search')}</Text>\r\n              <SearchInput onChange={handleChangeQuery} placeholder=\"Search Farms\" />\r\n            </LabelWrapper>\r\n          </FilterContainer>\r\n        </ControlContainer>\r\n        {renderContent()}\r\n        {account && !userDataLoaded && stakedOnly && (\r\n          <Flex justifyContent=\"center\">\r\n            <Loading />\r\n          </Flex>\r\n        )}\r\n        <div ref={loadMoreRef} />\r\n        {/* <StyledImage src=\"/images/decorations/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} /> */}\r\n      </Page>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Farms\r\n"]},"metadata":{},"sourceType":"module"}