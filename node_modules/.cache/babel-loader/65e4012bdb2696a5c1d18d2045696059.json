{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97154\\\\swap\\\\hami\\\\LokiswapUI\\\\src\\\\views\\\\Farms\\\\components\\\\DepositModal.tsx\",\n    _s = $RefreshSig$();\n\nimport BigNumber from 'bignumber.js';\nimport React, { useCallback, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit';\nimport { ModalActions, ModalInput } from 'components/Modal';\nimport RoiCalculatorModal from 'components/RoiCalculatorModal';\nimport { useTranslation } from 'contexts/Localization';\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance';\nimport useToast from 'hooks/useToast';\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AnnualRoiContainer = styled(Flex)`\n  cursor: pointer;\n`;\n_c = AnnualRoiContainer;\nconst AnnualRoiDisplay = styled(Text)`\n  width: 72px;\n  max-width: 72px;\n  overflow: hidden;\n  text-align: right;\n  text-overflow: ellipsis;\n`;\n_c2 = AnnualRoiDisplay;\n\nconst DepositModal = ({\n  max,\n  stakedBalance,\n  onConfirm,\n  onDismiss,\n  tokenName = '',\n  multiplier,\n  displayApr,\n  lpPrice,\n  lpLabel,\n  apr,\n  addLiquidityUrl,\n  cakePrice,\n  isTokenOnly,\n  decimals\n}) => {\n  _s();\n\n  const [val, setVal] = useState('');\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const [pendingTx, setPendingTx] = useState(false);\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false);\n  const {\n    t\n  } = useTranslation();\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max, decimals);\n  }, [max, decimals]);\n  const lpTokensToStake = new BigNumber(val);\n  const fullBalanceNumber = new BigNumber(fullBalance);\n  const usdToStake = lpTokensToStake.times(lpPrice);\n  const interestBreakdown = getInterestBreakdown({\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\n    apr,\n    earningTokenPrice: cakePrice.toNumber()\n  });\n  const annualRoi = cakePrice.times(interestBreakdown[3]);\n  const formattedAnnualRoi = formatNumber(annualRoi.toNumber(), annualRoi.gt(10000) ? 0 : 2, annualRoi.gt(10000) ? 0 : 2);\n  const handleChange = useCallback(e => {\n    if (e.currentTarget.validity.valid) {\n      setVal(e.currentTarget.value.replace(/,/g, '.'));\n    }\n  }, [setVal]);\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance);\n  }, [fullBalance, setVal]);\n\n  if (showRoiCalculator) {\n    return /*#__PURE__*/_jsxDEV(RoiCalculatorModal, {\n      linkLabel: t('Get %symbol%', {\n        symbol: lpLabel\n      }),\n      stakingTokenBalance: stakedBalance.plus(max),\n      stakingTokenSymbol: tokenName,\n      stakingTokenPrice: lpPrice.toNumber(),\n      earningTokenPrice: cakePrice.toNumber(),\n      apr: apr,\n      multiplier: multiplier,\n      displayApr: displayApr,\n      linkHref: addLiquidityUrl,\n      isFarm: true,\n      initialValue: val,\n      onBack: () => setShowRoiCalculator(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(Modal, {\n    title: isTokenOnly ? t('Stake') : t('Stake LP tokens'),\n    onDismiss: onDismiss,\n    children: [/*#__PURE__*/_jsxDEV(ModalInput, {\n      value: val,\n      onSelectMax: handleSelectMax,\n      onChange: handleChange,\n      max: fullBalance,\n      symbol: tokenName,\n      addLiquidityUrl: addLiquidityUrl,\n      inputTitle: t('Stake'),\n      decimals: decimals\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      mt: \"24px\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        mr: \"8px\",\n        color: \"textSubtle\",\n        children: [t('Annual ROI at current rates'), \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AnnualRoiContainer, {\n        alignItems: \"center\",\n        onClick: () => setShowRoiCalculator(true),\n        children: [/*#__PURE__*/_jsxDEV(AnnualRoiDisplay, {\n          children: [\"$\", formattedAnnualRoi]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n          variant: \"text\",\n          scale: \"sm\",\n          children: /*#__PURE__*/_jsxDEV(CalculateIcon, {\n            color: \"textSubtle\",\n            width: \"18px\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ModalActions, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"secondary\",\n        onClick: onDismiss,\n        width: \"100%\",\n        disabled: pendingTx,\n        children: t('Cancel')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        width: \"100%\",\n        disabled: pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber),\n        onClick: async () => {\n          setPendingTx(true);\n\n          try {\n            await onConfirm(val);\n            toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'));\n            onDismiss();\n          } catch (e) {\n            toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n            console.error(e);\n          } finally {\n            setPendingTx(false);\n          }\n        },\n        children: pendingTx ? t('Confirming') : t('Confirm')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LinkExternal, {\n      href: addLiquidityUrl,\n      style: {\n        alignSelf: 'center'\n      },\n      children: t('Get %symbol%', {\n        symbol: tokenName\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DepositModal, \"KEyQ81oF6k1I8uYz8BHvDV42Gpg=\", false, function () {\n  return [useToast, useTranslation];\n});\n\n_c3 = DepositModal;\nexport default DepositModal;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"AnnualRoiContainer\");\n$RefreshReg$(_c2, \"AnnualRoiDisplay\");\n$RefreshReg$(_c3, \"DepositModal\");","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Farms/components/DepositModal.tsx"],"names":["BigNumber","React","useCallback","useMemo","useState","styled","Flex","Text","Button","Modal","LinkExternal","CalculateIcon","IconButton","ModalActions","ModalInput","RoiCalculatorModal","useTranslation","getFullDisplayBalance","formatNumber","useToast","getInterestBreakdown","AnnualRoiContainer","AnnualRoiDisplay","DepositModal","max","stakedBalance","onConfirm","onDismiss","tokenName","multiplier","displayApr","lpPrice","lpLabel","apr","addLiquidityUrl","cakePrice","isTokenOnly","decimals","val","setVal","toastSuccess","toastError","pendingTx","setPendingTx","showRoiCalculator","setShowRoiCalculator","t","fullBalance","lpTokensToStake","fullBalanceNumber","usdToStake","times","interestBreakdown","principalInUSD","isNaN","toNumber","earningTokenPrice","annualRoi","formattedAnnualRoi","gt","handleChange","e","currentTarget","validity","valid","value","replace","handleSelectMax","symbol","plus","isFinite","eq","console","error","alignSelf"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,cAAtB;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,OAA7B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,MAArB,EAA6BC,KAA7B,EAAoCC,YAApC,EAAkDC,aAAlD,EAAiEC,UAAjE,QAAmF,oBAAnF;AACA,SAASC,YAAT,EAAuBC,UAAvB,QAAyC,kBAAzC;AACA,OAAOC,kBAAP,MAA+B,+BAA/B;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,SAASC,qBAAT,EAAgCC,YAAhC,QAAoD,qBAApD;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,SAASC,oBAAT,QAAqC,0BAArC;;AAEA,MAAMC,kBAAkB,GAAGhB,MAAM,CAACC,IAAD,CAAO;AACxC;AACA,CAFA;KAAMe,kB;AAIN,MAAMC,gBAAgB,GAAGjB,MAAM,CAACE,IAAD,CAAO;AACtC;AACA;AACA;AACA;AACA;AACA,CANA;MAAMe,gB;;AAyBN,MAAMC,YAAyC,GAAG,CAAC;AACjDC,EAAAA,GADiD;AAEjDC,EAAAA,aAFiD;AAGjDC,EAAAA,SAHiD;AAIjDC,EAAAA,SAJiD;AAKjDC,EAAAA,SAAS,GAAG,EALqC;AAMjDC,EAAAA,UANiD;AAOjDC,EAAAA,UAPiD;AAQjDC,EAAAA,OARiD;AASjDC,EAAAA,OATiD;AAUjDC,EAAAA,GAViD;AAWjDC,EAAAA,eAXiD;AAYjDC,EAAAA,SAZiD;AAajDC,EAAAA,WAbiD;AAcjDC,EAAAA;AAdiD,CAAD,KAe5C;AAAA;;AACJ,QAAM,CAACC,GAAD,EAAMC,MAAN,IAAgBnC,QAAQ,CAAC,EAAD,CAA9B;AACA,QAAM;AAAEoC,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAA+BtB,QAAQ,EAA7C;AACA,QAAM,CAACuB,SAAD,EAAYC,YAAZ,IAA4BvC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACwC,iBAAD,EAAoBC,oBAApB,IAA4CzC,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM;AAAE0C,IAAAA;AAAF,MAAQ9B,cAAc,EAA5B;AACA,QAAM+B,WAAW,GAAG5C,OAAO,CAAC,MAAM;AAChC,WAAOc,qBAAqB,CAACO,GAAD,EAAMa,QAAN,CAA5B;AACD,GAF0B,EAExB,CAACb,GAAD,EAAMa,QAAN,CAFwB,CAA3B;AAIA,QAAMW,eAAe,GAAG,IAAIhD,SAAJ,CAAcsC,GAAd,CAAxB;AACA,QAAMW,iBAAiB,GAAG,IAAIjD,SAAJ,CAAc+C,WAAd,CAA1B;AAEA,QAAMG,UAAU,GAAGF,eAAe,CAACG,KAAhB,CAAsBpB,OAAtB,CAAnB;AAEA,QAAMqB,iBAAiB,GAAGhC,oBAAoB,CAAC;AAC7CiC,IAAAA,cAAc,EAAE,CAACL,eAAe,CAACM,KAAhB,EAAD,GAA2BJ,UAAU,CAACK,QAAX,EAA3B,GAAmD,CADtB;AAE7CtB,IAAAA,GAF6C;AAG7CuB,IAAAA,iBAAiB,EAAErB,SAAS,CAACoB,QAAV;AAH0B,GAAD,CAA9C;AAMA,QAAME,SAAS,GAAGtB,SAAS,CAACgB,KAAV,CAAgBC,iBAAiB,CAAC,CAAD,CAAjC,CAAlB;AACA,QAAMM,kBAAkB,GAAGxC,YAAY,CACrCuC,SAAS,CAACF,QAAV,EADqC,EAErCE,SAAS,CAACE,EAAV,CAAa,KAAb,IAAsB,CAAtB,GAA0B,CAFW,EAGrCF,SAAS,CAACE,EAAV,CAAa,KAAb,IAAsB,CAAtB,GAA0B,CAHW,CAAvC;AAMA,QAAMC,YAAY,GAAG1D,WAAW,CAC7B2D,CAAD,IAA0C;AACxC,QAAIA,CAAC,CAACC,aAAF,CAAgBC,QAAhB,CAAyBC,KAA7B,EAAoC;AAClCzB,MAAAA,MAAM,CAACsB,CAAC,CAACC,aAAF,CAAgBG,KAAhB,CAAsBC,OAAtB,CAA8B,IAA9B,EAAoC,GAApC,CAAD,CAAN;AACD;AACF,GAL6B,EAM9B,CAAC3B,MAAD,CAN8B,CAAhC;AASA,QAAM4B,eAAe,GAAGjE,WAAW,CAAC,MAAM;AACxCqC,IAAAA,MAAM,CAACQ,WAAD,CAAN;AACD,GAFkC,EAEhC,CAACA,WAAD,EAAcR,MAAd,CAFgC,CAAnC;;AAIA,MAAIK,iBAAJ,EAAuB;AACrB,wBACE,QAAC,kBAAD;AACE,MAAA,SAAS,EAAEE,CAAC,CAAC,cAAD,EAAiB;AAAEsB,QAAAA,MAAM,EAAEpC;AAAV,OAAjB,CADd;AAEE,MAAA,mBAAmB,EAAEP,aAAa,CAAC4C,IAAd,CAAmB7C,GAAnB,CAFvB;AAGE,MAAA,kBAAkB,EAAEI,SAHtB;AAIE,MAAA,iBAAiB,EAAEG,OAAO,CAACwB,QAAR,EAJrB;AAKE,MAAA,iBAAiB,EAAEpB,SAAS,CAACoB,QAAV,EALrB;AAME,MAAA,GAAG,EAAEtB,GANP;AAOE,MAAA,UAAU,EAAEJ,UAPd;AAQE,MAAA,UAAU,EAAEC,UARd;AASE,MAAA,QAAQ,EAAEI,eATZ;AAUE,MAAA,MAAM,MAVR;AAWE,MAAA,YAAY,EAAEI,GAXhB;AAYE,MAAA,MAAM,EAAE,MAAMO,oBAAoB,CAAC,KAAD;AAZpC;AAAA;AAAA;AAAA;AAAA,YADF;AAgBD;;AAED,sBACE,QAAC,KAAD;AAAO,IAAA,KAAK,EAAET,WAAW,GAAGU,CAAC,CAAC,OAAD,CAAJ,GAAgBA,CAAC,CAAC,iBAAD,CAA1C;AAA+D,IAAA,SAAS,EAAEnB,SAA1E;AAAA,4BACE,QAAC,UAAD;AACE,MAAA,KAAK,EAAEW,GADT;AAEE,MAAA,WAAW,EAAE6B,eAFf;AAGE,MAAA,QAAQ,EAAEP,YAHZ;AAIE,MAAA,GAAG,EAAEb,WAJP;AAKE,MAAA,MAAM,EAAEnB,SALV;AAME,MAAA,eAAe,EAAEM,eANnB;AAOE,MAAA,UAAU,EAAEY,CAAC,CAAC,OAAD,CAPf;AAQE,MAAA,QAAQ,EAAET;AARZ;AAAA;AAAA;AAAA;AAAA,YADF,eAWE,QAAC,IAAD;AAAM,MAAA,EAAE,EAAC,MAAT;AAAgB,MAAA,UAAU,EAAC,QAA3B;AAAoC,MAAA,cAAc,EAAC,eAAnD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,KAAT;AAAe,QAAA,KAAK,EAAC,YAArB;AAAA,mBACGS,CAAC,CAAC,6BAAD,CADJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,kBAAD;AAAoB,QAAA,UAAU,EAAC,QAA/B;AAAwC,QAAA,OAAO,EAAE,MAAMD,oBAAoB,CAAC,IAAD,CAA3E;AAAA,gCACE,QAAC,gBAAD;AAAA,0BAAoBa,kBAApB;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,UAAD;AAAY,UAAA,OAAO,EAAC,MAApB;AAA2B,UAAA,KAAK,EAAC,IAAjC;AAAA,iCACE,QAAC,aAAD;AAAe,YAAA,KAAK,EAAC,YAArB;AAAkC,YAAA,KAAK,EAAC;AAAxC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAsBE,QAAC,YAAD;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,WAAhB;AAA4B,QAAA,OAAO,EAAE/B,SAArC;AAAgD,QAAA,KAAK,EAAC,MAAtD;AAA6D,QAAA,QAAQ,EAAEe,SAAvE;AAAA,kBACGI,CAAC,CAAC,QAAD;AADJ;AAAA;AAAA;AAAA;AAAA,cADF,eAIE,QAAC,MAAD;AAEE,QAAA,KAAK,EAAC,MAFR;AAGE,QAAA,QAAQ,EACNJ,SAAS,IAAI,CAACM,eAAe,CAACsB,QAAhB,EAAd,IAA4CtB,eAAe,CAACuB,EAAhB,CAAmB,CAAnB,CAA5C,IAAqEvB,eAAe,CAACW,EAAhB,CAAmBV,iBAAnB,CAJzE;AAME,QAAA,OAAO,EAAE,YAAY;AACnBN,UAAAA,YAAY,CAAC,IAAD,CAAZ;;AACA,cAAI;AACF,kBAAMjB,SAAS,CAACY,GAAD,CAAf;AACAE,YAAAA,YAAY,CAACM,CAAC,CAAC,SAAD,CAAF,EAAeA,CAAC,CAAC,yCAAD,CAAhB,CAAZ;AACAnB,YAAAA,SAAS;AACV,WAJD,CAIE,OAAOkC,CAAP,EAAU;AACVpB,YAAAA,UAAU,CACRK,CAAC,CAAC,OAAD,CADO,EAERA,CAAC,CAAC,oFAAD,CAFO,CAAV;AAIA0B,YAAAA,OAAO,CAACC,KAAR,CAAcZ,CAAd;AACD,WAVD,SAUU;AACRlB,YAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AACF,SArBH;AAAA,kBAuBGD,SAAS,GAAGI,CAAC,CAAC,YAAD,CAAJ,GAAqBA,CAAC,CAAC,SAAD;AAvBlC;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAtBF,eAoDE,QAAC,YAAD;AAAc,MAAA,IAAI,EAAEZ,eAApB;AAAqC,MAAA,KAAK,EAAE;AAAEwC,QAAAA,SAAS,EAAE;AAAb,OAA5C;AAAA,gBACG5B,CAAC,CAAC,cAAD,EAAiB;AAAEsB,QAAAA,MAAM,EAAExC;AAAV,OAAjB;AADJ;AAAA;AAAA;AAAA;AAAA,YApDF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0DD,CArID;;GAAML,Y;UAiBiCJ,Q,EAGvBH,c;;;MApBVO,Y;AAuIN,eAAeA,YAAf","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport React, { useCallback, useMemo, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, Text, Button, Modal, LinkExternal, CalculateIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { ModalActions, ModalInput } from 'components/Modal'\r\nimport RoiCalculatorModal from 'components/RoiCalculatorModal'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFullDisplayBalance, formatNumber } from 'utils/formatBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { getInterestBreakdown } from 'utils/compoundApyHelpers'\r\n\r\nconst AnnualRoiContainer = styled(Flex)`\r\n  cursor: pointer;\r\n`\r\n\r\nconst AnnualRoiDisplay = styled(Text)`\r\n  width: 72px;\r\n  max-width: 72px;\r\n  overflow: hidden;\r\n  text-align: right;\r\n  text-overflow: ellipsis;\r\n`\r\n\r\ninterface DepositModalProps {\r\n  max: BigNumber\r\n  stakedBalance: BigNumber\r\n  multiplier?: string\r\n  lpPrice: BigNumber\r\n  lpLabel?: string\r\n  onConfirm: (amount: string) => void\r\n  onDismiss?: () => void\r\n  tokenName?: string\r\n  apr?: number\r\n  displayApr?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  isTokenOnly?: boolean\r\n  decimals?: number\r\n}\r\n\r\nconst DepositModal: React.FC<DepositModalProps> = ({\r\n  max,\r\n  stakedBalance,\r\n  onConfirm,\r\n  onDismiss,\r\n  tokenName = '',\r\n  multiplier,\r\n  displayApr,\r\n  lpPrice,\r\n  lpLabel,\r\n  apr,\r\n  addLiquidityUrl,\r\n  cakePrice,\r\n  isTokenOnly,\r\n  decimals,\r\n}) => {\r\n  const [val, setVal] = useState('')\r\n  const { toastSuccess, toastError } = useToast()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const [showRoiCalculator, setShowRoiCalculator] = useState(false)\r\n  const { t } = useTranslation()\r\n  const fullBalance = useMemo(() => {\r\n    return getFullDisplayBalance(max, decimals)\r\n  }, [max, decimals])\r\n\r\n  const lpTokensToStake = new BigNumber(val)\r\n  const fullBalanceNumber = new BigNumber(fullBalance)\r\n\r\n  const usdToStake = lpTokensToStake.times(lpPrice)\r\n\r\n  const interestBreakdown = getInterestBreakdown({\r\n    principalInUSD: !lpTokensToStake.isNaN() ? usdToStake.toNumber() : 0,\r\n    apr,\r\n    earningTokenPrice: cakePrice.toNumber(),\r\n  })\r\n\r\n  const annualRoi = cakePrice.times(interestBreakdown[3])\r\n  const formattedAnnualRoi = formatNumber(\r\n    annualRoi.toNumber(),\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n    annualRoi.gt(10000) ? 0 : 2,\r\n  )\r\n\r\n  const handleChange = useCallback(\r\n    (e: React.FormEvent<HTMLInputElement>) => {\r\n      if (e.currentTarget.validity.valid) {\r\n        setVal(e.currentTarget.value.replace(/,/g, '.'))\r\n      }\r\n    },\r\n    [setVal],\r\n  )\r\n\r\n  const handleSelectMax = useCallback(() => {\r\n    setVal(fullBalance)\r\n  }, [fullBalance, setVal])\r\n\r\n  if (showRoiCalculator) {\r\n    return (\r\n      <RoiCalculatorModal\r\n        linkLabel={t('Get %symbol%', { symbol: lpLabel })}\r\n        stakingTokenBalance={stakedBalance.plus(max)}\r\n        stakingTokenSymbol={tokenName}\r\n        stakingTokenPrice={lpPrice.toNumber()}\r\n        earningTokenPrice={cakePrice.toNumber()}\r\n        apr={apr}\r\n        multiplier={multiplier}\r\n        displayApr={displayApr}\r\n        linkHref={addLiquidityUrl}\r\n        isFarm\r\n        initialValue={val}\r\n        onBack={() => setShowRoiCalculator(false)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Modal title={isTokenOnly ? t('Stake') : t('Stake LP tokens')} onDismiss={onDismiss}>\r\n      <ModalInput\r\n        value={val}\r\n        onSelectMax={handleSelectMax}\r\n        onChange={handleChange}\r\n        max={fullBalance}\r\n        symbol={tokenName}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        inputTitle={t('Stake')}\r\n        decimals={decimals}\r\n      />\r\n      <Flex mt=\"24px\" alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text mr=\"8px\" color=\"textSubtle\">\r\n          {t('Annual ROI at current rates')}:\r\n        </Text>\r\n        <AnnualRoiContainer alignItems=\"center\" onClick={() => setShowRoiCalculator(true)}>\r\n          <AnnualRoiDisplay>${formattedAnnualRoi}</AnnualRoiDisplay>\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            <CalculateIcon color=\"textSubtle\" width=\"18px\" />\r\n          </IconButton>\r\n        </AnnualRoiContainer>\r\n      </Flex>\r\n      <ModalActions>\r\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\" disabled={pendingTx}>\r\n          {t('Cancel')}\r\n        </Button>\r\n        <Button\r\n           \r\n          width=\"100%\"\r\n          disabled={\r\n            pendingTx || !lpTokensToStake.isFinite() || lpTokensToStake.eq(0) || lpTokensToStake.gt(fullBalanceNumber)\r\n          }\r\n          onClick={async () => {\r\n            setPendingTx(true)\r\n            try {\r\n              await onConfirm(val)\r\n              toastSuccess(t('Staked!'), t('Your funds have been staked in the farm'))\r\n              onDismiss()\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n          }}\r\n        >\r\n          {pendingTx ? t('Confirming') : t('Confirm')}\r\n        </Button>\r\n      </ModalActions>\r\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\r\n        {t('Get %symbol%', { symbol: tokenName })}\r\n      </LinkExternal>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default DepositModal\r\n"]},"metadata":{},"sourceType":"module"}