{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97154\\\\swap\\\\hami\\\\LokiswapUI\\\\src\\\\views\\\\Farms\\\\components\\\\FarmCard\\\\CardActionsContainer.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from 'react';\nimport styled from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { Button, Flex, Text } from '@pancakeswap/uikit';\nimport { getAddress } from 'utils/addressHelpers';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport { useTranslation } from 'contexts/Localization';\nimport { useERC20 } from 'hooks/useContract';\nimport ConnectWalletButton from 'components/ConnectWalletButton';\nimport StakeAction from './StakeAction';\nimport HarvestAction from './HarvestAction';\nimport useApproveFarm from '../../hooks/useApproveFarm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Action = styled.div`\n  padding-top: 16px;\n`;\n_c = Action;\n\nconst CardActions = ({\n  farm,\n  account,\n  addLiquidityUrl,\n  cakePrice,\n  lpLabel\n}) => {\n  _s();\n\n  const {\n    t\n  } = useTranslation();\n  const [requestedApproval, setRequestedApproval] = useState(false);\n  const {\n    pid,\n    lpAddresses,\n    isTokenOnly,\n    token\n  } = farm;\n  const {\n    allowance: allowanceAsString = 0,\n    tokenBalance: tokenBalanceAsString = 0,\n    stakedBalance: stakedBalanceAsString = 0,\n    earnings: earningsAsString = 0,\n    isabletoharvest\n  } = farm.userData || {};\n  const allowance = new BigNumber(allowanceAsString);\n  const tokenBalance = new BigNumber(tokenBalanceAsString);\n  const stakedBalance = new BigNumber(stakedBalanceAsString);\n  const earnings = new BigNumber(earningsAsString);\n  const lpAddress = isTokenOnly ? getAddress(token.address) : getAddress(lpAddresses);\n  const isApproved = account && allowance && allowance.isGreaterThan(0);\n  const dispatch = useAppDispatch();\n  const lpContract = useERC20(lpAddress);\n  const {\n    onApprove\n  } = useApproveFarm(lpContract);\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true);\n      await onApprove();\n      dispatch(fetchFarmUserDataAsync({\n        account,\n        pids: [pid]\n      }));\n      setRequestedApproval(false);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [onApprove, dispatch, account, pid]);\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? /*#__PURE__*/_jsxDEV(StakeAction, {\n      stakedBalance: stakedBalance,\n      tokenBalance: tokenBalance,\n      tokenName: farm.lpSymbol,\n      pid: pid,\n      apr: farm.apr,\n      lpLabel: lpLabel,\n      cakePrice: cakePrice,\n      addLiquidityUrl: addLiquidityUrl,\n      isTokenOnly: farm.isTokenOnly,\n      decimals: farm.isTokenOnly ? token.decimals : 18\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Button, {\n      mt: \"8px\",\n      width: \"100%\",\n      disabled: requestedApproval,\n      onClick: handleApprove,\n      children: t('Enable Contract')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Action, {\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"4px\",\n        children: \"LOKI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Earned')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(HarvestAction, {\n      earnings: earnings,\n      pid: pid,\n      isabletoharvest: isabletoharvest\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"secondary\",\n        fontSize: \"12px\",\n        pr: \"4px\",\n        children: farm.lpSymbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        textTransform: \"uppercase\",\n        color: \"textSubtle\",\n        fontSize: \"12px\",\n        children: t('Staked')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), !account ? /*#__PURE__*/_jsxDEV(ConnectWalletButton, {\n      mt: \"8px\",\n      width: \"100%\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }, this) : renderApprovalOrStakeButton()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CardActions, \"IqZAhQLNMiP2soOvZtMeLXA+3jE=\", false, function () {\n  return [useTranslation, useAppDispatch, useERC20, useApproveFarm];\n});\n\n_c2 = CardActions;\nexport default CardActions;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Action\");\n$RefreshReg$(_c2, \"CardActions\");","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Farms/components/FarmCard/CardActionsContainer.tsx"],"names":["React","useState","useCallback","styled","BigNumber","Button","Flex","Text","getAddress","useAppDispatch","fetchFarmUserDataAsync","useTranslation","useERC20","ConnectWalletButton","StakeAction","HarvestAction","useApproveFarm","Action","div","CardActions","farm","account","addLiquidityUrl","cakePrice","lpLabel","t","requestedApproval","setRequestedApproval","pid","lpAddresses","isTokenOnly","token","allowance","allowanceAsString","tokenBalance","tokenBalanceAsString","stakedBalance","stakedBalanceAsString","earnings","earningsAsString","isabletoharvest","userData","lpAddress","address","isApproved","isGreaterThan","dispatch","lpContract","onApprove","handleApprove","pids","e","console","error","renderApprovalOrStakeButton","lpSymbol","apr","decimals"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Text } from '@pancakeswap/uikit'\r\nimport { getAddress } from 'utils/addressHelpers'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport { Farm } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useERC20 } from 'hooks/useContract'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport StakeAction from './StakeAction'\r\nimport HarvestAction from './HarvestAction'\r\nimport useApproveFarm from '../../hooks/useApproveFarm'\r\n\r\nconst Action = styled.div`\r\n  padding-top: 16px;\r\n`\r\nexport interface FarmWithStakedValue extends Farm {\r\n  apr?: number\r\n}\r\n\r\ninterface FarmCardActionsProps {\r\n  farm: FarmWithStakedValue\r\n  account?: string\r\n  addLiquidityUrl?: string\r\n  cakePrice?: BigNumber\r\n  lpLabel?: string\r\n}\r\n\r\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl, cakePrice, lpLabel }) => {\r\n  const { t } = useTranslation()\r\n  const [requestedApproval, setRequestedApproval] = useState(false)\r\n  const { pid, lpAddresses, isTokenOnly, token } = farm\r\n  const {\r\n    allowance: allowanceAsString = 0,\r\n    tokenBalance: tokenBalanceAsString = 0,\r\n    stakedBalance: stakedBalanceAsString = 0,\r\n    earnings: earningsAsString = 0,\r\n    isabletoharvest,\r\n  } = farm.userData || {}\r\n  const allowance = new BigNumber(allowanceAsString)\r\n  const tokenBalance = new BigNumber(tokenBalanceAsString)\r\n  const stakedBalance = new BigNumber(stakedBalanceAsString)\r\n  const earnings = new BigNumber(earningsAsString)\r\n  const lpAddress = isTokenOnly ? getAddress(token.address) : getAddress(lpAddresses)\r\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\r\n  const dispatch = useAppDispatch()\r\n\r\n  const lpContract = useERC20(lpAddress)\r\n\r\n  const { onApprove } = useApproveFarm(lpContract)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      setRequestedApproval(true)\r\n      await onApprove()\r\n      dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n      setRequestedApproval(false)\r\n    } catch (e) {\r\n      console.error(e)\r\n    }\r\n  }, [onApprove, dispatch, account, pid])\r\n\r\n  const renderApprovalOrStakeButton = () => {\r\n    return isApproved ? (\r\n      <StakeAction\r\n        stakedBalance={stakedBalance}\r\n        tokenBalance={tokenBalance}\r\n        tokenName={farm.lpSymbol}\r\n        pid={pid}\r\n        apr={farm.apr}\r\n        lpLabel={lpLabel}\r\n        cakePrice={cakePrice}\r\n        addLiquidityUrl={addLiquidityUrl}\r\n        isTokenOnly={farm.isTokenOnly}\r\n        decimals={farm.isTokenOnly ? token.decimals : 18}\r\n      />\r\n    ) : (\r\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\r\n        {t('Enable Contract')}\r\n      </Button>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Action>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          LOKI\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Earned')}\r\n        </Text>\r\n      </Flex>\r\n      <HarvestAction earnings={earnings} pid={pid} isabletoharvest={isabletoharvest}/>\r\n      <Flex>\r\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"4px\">\r\n          {farm.lpSymbol}\r\n        </Text>\r\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\r\n          {t('Staked')}\r\n        </Text>\r\n      </Flex>\r\n      {!account ? <ConnectWalletButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\r\n    </Action>\r\n  )\r\n}\r\n\r\nexport default CardActions"]},"metadata":{},"sourceType":"module"}