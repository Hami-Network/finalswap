{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useCallback } from 'react';\nimport { useAppDispatch } from 'state';\nimport { useWeb3React } from '@web3-react/core';\nimport { useGetCurrentLotteryId } from 'state/lottery/hooks';\nimport { getGraphLotteryUser } from 'state/lottery/getUserLotteryData';\nimport { getBunnySpecialLotteryAddress } from 'utils/addressHelpers';\nimport { multicallv2 } from 'utils/multicall';\nimport bunnySpecialLotteryAbi from 'config/abi/bunnySpecialLottery.json';\nimport Nfts from 'config/constants/nfts';\nimport { fetchCurrentLotteryId } from 'state/lottery';\nimport { getBallerClaim, getLottieClaim, getLuckyClaim, NO_CLAIM } from '../helpers';\n\nconst useBunnySpecialLottery = () => {\n  _s();\n\n  const {\n    account\n  } = useWeb3React();\n  const dispatch = useAppDispatch();\n  const currentLotteryId = useGetCurrentLotteryId();\n  const currentLotteryIdNum = currentLotteryId && parseInt(currentLotteryId);\n  const [userRounds, setUserRounds] = useState(null);\n  useEffect(() => {\n    dispatch(fetchCurrentLotteryId());\n  }, [dispatch]);\n  useEffect(() => {\n    setUserRounds(null);\n  }, [account]);\n  useEffect(() => {\n    const getUserData = async () => {\n      const lotteryNftContractAddress = getBunnySpecialLotteryAddress();\n      const calls = [{\n        name: 'startLotteryRound',\n        address: lotteryNftContractAddress,\n        params: []\n      }, {\n        name: 'finalLotteryRound',\n        address: lotteryNftContractAddress,\n        params: []\n      }];\n      const [[startRound], [finalRound]] = await multicallv2(bunnySpecialLotteryAbi, calls);\n      const startLotteryRoundInt = startRound.toNumber();\n      const finalLotteryRoundInt = finalRound.toNumber();\n      const lotteryIdsArray = [];\n\n      for (let i = startLotteryRoundInt; i <= finalLotteryRoundInt; i++) {\n        lotteryIdsArray.push(`${i}`);\n      }\n\n      const userParticipation = await getGraphLotteryUser(account, undefined, undefined, {\n        lottery_in: lotteryIdsArray\n      });\n      setUserRounds(userParticipation.rounds);\n    };\n\n    if (account && currentLotteryIdNum && !userRounds) {\n      getUserData();\n    }\n  }, [currentLotteryIdNum, userRounds, account]);\n  const canClaimLottie = useCallback(async () => {\n    if (!userRounds || userRounds.length === 0) {\n      return NO_CLAIM;\n    }\n\n    const {\n      variationId\n    } = Nfts.find(nft => nft.identifier === 'lottie');\n    const [userRound] = userRounds;\n    const lottieClaim = await getLottieClaim(account, variationId, userRound.lotteryId);\n    return lottieClaim;\n  }, [account, userRounds]);\n  const canClaimLucky = useCallback(async () => {\n    if (!userRounds || userRounds.length === 0) {\n      return NO_CLAIM;\n    }\n\n    const {\n      variationId\n    } = Nfts.find(nft => nft.identifier === 'lucky');\n    const luckyClaim = await getLuckyClaim(account, variationId, userRounds);\n    return luckyClaim;\n  }, [account, userRounds]);\n  const canClaimBaller = useCallback(async () => {\n    const {\n      variationId\n    } = Nfts.find(nft => nft.identifier === 'baller');\n    const lotteryId = userRounds && userRounds.length > 0 && userRounds[0].lotteryId;\n    const lottieClaim = await getBallerClaim(account, variationId, lotteryId);\n    return lottieClaim;\n  }, [account, userRounds]);\n  return {\n    canClaimLottie,\n    canClaimLucky,\n    canClaimBaller\n  };\n};\n\n_s(useBunnySpecialLottery, \"g8QJzrOSyz2AQeDjj3yo9nHGjuE=\", false, function () {\n  return [useWeb3React, useAppDispatch, useGetCurrentLotteryId];\n});\n\nexport default useBunnySpecialLottery;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Collectibles/hooks/useBunnySpecialLottery.tsx"],"names":["useEffect","useState","useCallback","useAppDispatch","useWeb3React","useGetCurrentLotteryId","getGraphLotteryUser","getBunnySpecialLotteryAddress","multicallv2","bunnySpecialLotteryAbi","Nfts","fetchCurrentLotteryId","getBallerClaim","getLottieClaim","getLuckyClaim","NO_CLAIM","useBunnySpecialLottery","account","dispatch","currentLotteryId","currentLotteryIdNum","parseInt","userRounds","setUserRounds","getUserData","lotteryNftContractAddress","calls","name","address","params","startRound","finalRound","startLotteryRoundInt","toNumber","finalLotteryRoundInt","lotteryIdsArray","i","push","userParticipation","undefined","lottery_in","rounds","canClaimLottie","length","variationId","find","nft","identifier","userRound","lottieClaim","lotteryId","canClaimLucky","luckyClaim","canClaimBaller"],"mappings":"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","sourcesContent":["import { useEffect, useState, useCallback } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetCurrentLotteryId } from 'state/lottery/hooks'\r\nimport { getGraphLotteryUser } from 'state/lottery/getUserLotteryData'\r\nimport { UserRound } from 'state/types'\r\nimport { getBunnySpecialLotteryAddress } from 'utils/addressHelpers'\r\nimport { multicallv2 } from 'utils/multicall'\r\nimport bunnySpecialLotteryAbi from 'config/abi/bunnySpecialLottery.json'\r\nimport Nfts from 'config/constants/nfts'\r\nimport { fetchCurrentLotteryId } from 'state/lottery'\r\nimport { getBallerClaim, getLottieClaim, getLuckyClaim, NftClaim, NO_CLAIM } from '../helpers'\r\n\r\nconst useBunnySpecialLottery = (): {\r\n  canClaimLottie: () => Promise<NftClaim>\r\n  canClaimLucky: () => Promise<NftClaim>\r\n  canClaimBaller: () => Promise<NftClaim>\r\n} => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const currentLotteryId = useGetCurrentLotteryId()\r\n  const currentLotteryIdNum = currentLotteryId && parseInt(currentLotteryId)\r\n  const [userRounds, setUserRounds] = useState<UserRound[]>(null)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCurrentLotteryId())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    setUserRounds(null)\r\n  }, [account])\r\n\r\n  useEffect(() => {\r\n    const getUserData = async () => {\r\n      const lotteryNftContractAddress = getBunnySpecialLotteryAddress()\r\n      const calls = [\r\n        {\r\n          name: 'startLotteryRound',\r\n          address: lotteryNftContractAddress,\r\n          params: [],\r\n        },\r\n        {\r\n          name: 'finalLotteryRound',\r\n          address: lotteryNftContractAddress,\r\n          params: [],\r\n        },\r\n      ]\r\n\r\n      const [[startRound], [finalRound]] = await multicallv2(bunnySpecialLotteryAbi, calls)\r\n      const startLotteryRoundInt = startRound.toNumber()\r\n      const finalLotteryRoundInt = finalRound.toNumber()\r\n\r\n      const lotteryIdsArray = []\r\n      for (let i = startLotteryRoundInt; i <= finalLotteryRoundInt; i++) {\r\n        lotteryIdsArray.push(`${i}`)\r\n      }\r\n      const userParticipation = await getGraphLotteryUser(account, undefined, undefined, {\r\n        lottery_in: lotteryIdsArray,\r\n      })\r\n      setUserRounds(userParticipation.rounds)\r\n    }\r\n\r\n    if (account && currentLotteryIdNum && !userRounds) {\r\n      getUserData()\r\n    }\r\n  }, [currentLotteryIdNum, userRounds, account])\r\n\r\n  const canClaimLottie = useCallback(async () => {\r\n    if (!userRounds || userRounds.length === 0) {\r\n      return NO_CLAIM\r\n    }\r\n\r\n    const { variationId } = Nfts.find((nft) => nft.identifier === 'lottie')\r\n    const [userRound] = userRounds\r\n    const lottieClaim = await getLottieClaim(account, variationId, userRound.lotteryId)\r\n    return lottieClaim\r\n  }, [account, userRounds])\r\n\r\n  const canClaimLucky = useCallback(async () => {\r\n    if (!userRounds || userRounds.length === 0) {\r\n      return NO_CLAIM\r\n    }\r\n\r\n    const { variationId } = Nfts.find((nft) => nft.identifier === 'lucky')\r\n    const luckyClaim = await getLuckyClaim(account, variationId, userRounds)\r\n    return luckyClaim\r\n  }, [account, userRounds])\r\n\r\n  const canClaimBaller = useCallback(async () => {\r\n    const { variationId } = Nfts.find((nft) => nft.identifier === 'baller')\r\n    const lotteryId = userRounds && userRounds.length > 0 && userRounds[0].lotteryId\r\n\r\n    const lottieClaim = await getBallerClaim(account, variationId, lotteryId)\r\n    return lottieClaim\r\n  }, [account, userRounds])\r\n\r\n  return { canClaimLottie, canClaimLucky, canClaimBaller }\r\n}\r\n\r\nexport default useBunnySpecialLottery\r\n"]},"metadata":{},"sourceType":"module"}