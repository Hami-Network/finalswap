{"ast":null,"code":"import BigNumber from'bignumber.js';import{BLOCKS_PER_YEAR}from'config';/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */export var getPoolApr=function getPoolApr(stakingTokenPrice,rewardTokenPrice,totalStaked,tokenPerBlock){var totalRewardPricePerYear=new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR);var totalStakingTokenInPool=new BigNumber(stakingTokenPrice).times(totalStaked);var apr=totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);return apr.isNaN()||!apr.isFinite()?null:apr.toNumber();};/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */export var getFarmApr=function getFarmApr(poolWeight,cakePriceUsd,poolLiquidityUsd,farmAddress,lokipersecond){var cakePerYear=lokipersecond.times(BLOCKS_PER_YEAR);var yearlyCakeRewardAllocation=cakePerYear.times(poolWeight);var cakeRewardsApr=yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100);var cakeRewardsAprAsNumber=null;if(!cakeRewardsApr.isNaN()&&cakeRewardsApr.isFinite()){cakeRewardsAprAsNumber=cakeRewardsApr.toNumber();}// const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0\nreturn{cakeRewardsApr:cakeRewardsAprAsNumber,lpRewardsApr:0};};export default null;","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/utils/apr.ts"],"names":["BigNumber","BLOCKS_PER_YEAR","getPoolApr","stakingTokenPrice","rewardTokenPrice","totalStaked","tokenPerBlock","totalRewardPricePerYear","times","totalStakingTokenInPool","apr","div","isNaN","isFinite","toNumber","getFarmApr","poolWeight","cakePriceUsd","poolLiquidityUsd","farmAddress","lokipersecond","cakePerYear","yearlyCakeRewardAllocation","cakeRewardsApr","cakeRewardsAprAsNumber","lpRewardsApr"],"mappings":"AAAA,MAAOA,CAAAA,SAAP,KAAsB,cAAtB,CACA,OAASC,eAAT,KAA+C,QAA/C,CAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CACxBC,iBADwB,CAExBC,gBAFwB,CAGxBC,WAHwB,CAIxBC,aAJwB,CAKb,CACX,GAAMC,CAAAA,uBAAuB,CAAG,GAAIP,CAAAA,SAAJ,CAAcI,gBAAd,EAAgCI,KAAhC,CAAsCF,aAAtC,EAAqDE,KAArD,CAA2DP,eAA3D,CAAhC,CACA,GAAMQ,CAAAA,uBAAuB,CAAG,GAAIT,CAAAA,SAAJ,CAAcG,iBAAd,EAAiCK,KAAjC,CAAuCH,WAAvC,CAAhC,CACA,GAAMK,CAAAA,GAAG,CAAGH,uBAAuB,CAACI,GAAxB,CAA4BF,uBAA5B,EAAqDD,KAArD,CAA2D,GAA3D,CAAZ,CACA,MAAOE,CAAAA,GAAG,CAACE,KAAJ,IAAe,CAACF,GAAG,CAACG,QAAJ,EAAhB,CAAiC,IAAjC,CAAwCH,GAAG,CAACI,QAAJ,EAA/C,CACD,CAVM,CAYP;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CACxBC,UADwB,CAExBC,YAFwB,CAGxBC,gBAHwB,CAIxBC,WAJwB,CAKxBC,aALwB,CAM6B,CACrD,GAAMC,CAAAA,WAAW,CAAGD,aAAa,CAACZ,KAAd,CAAoBP,eAApB,CAApB,CACA,GAAMqB,CAAAA,0BAA0B,CAAGD,WAAW,CAACb,KAAZ,CAAkBQ,UAAlB,CAAnC,CACA,GAAMO,CAAAA,cAAc,CAAGD,0BAA0B,CAACd,KAA3B,CAAiCS,YAAjC,EAA+CN,GAA/C,CAAmDO,gBAAnD,EAAqEV,KAArE,CAA2E,GAA3E,CAAvB,CACA,GAAIgB,CAAAA,sBAAsB,CAAG,IAA7B,CACA,GAAI,CAACD,cAAc,CAACX,KAAf,EAAD,EAA2BW,cAAc,CAACV,QAAf,EAA/B,CAA0D,CACxDW,sBAAsB,CAAGD,cAAc,CAACT,QAAf,EAAzB,CACD,CACD;AACA,MAAO,CAAES,cAAc,CAAEC,sBAAlB,CAA0CC,YAAY,CAAG,CAAzD,CAAP,CACD,CAhBM,CAkBP,cAAe,KAAf","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { BLOCKS_PER_YEAR, CAKE_PER_YEAR } from 'config'\r\nimport lpAprs from 'config/constants/lpAprs.json'\r\n\r\n/**\r\n * Get the APR value in %\r\n * @param stakingTokenPrice Token price in the same quote currency\r\n * @param rewardTokenPrice Token price in the same quote currency\r\n * @param totalStaked Total amount of stakingToken in the pool\r\n * @param tokenPerBlock Amount of new cake allocated to the pool for each new block\r\n * @returns Null if the APR is NaN or infinite.\r\n */\r\nexport const getPoolApr = (\r\n  stakingTokenPrice: number,\r\n  rewardTokenPrice: number,\r\n  totalStaked: number,\r\n  tokenPerBlock: number,\r\n): number => {\r\n  const totalRewardPricePerYear = new BigNumber(rewardTokenPrice).times(tokenPerBlock).times(BLOCKS_PER_YEAR)\r\n  const totalStakingTokenInPool = new BigNumber(stakingTokenPrice).times(totalStaked)\r\n  const apr = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\r\n  return apr.isNaN() || !apr.isFinite() ? null : apr.toNumber()\r\n}\r\n\r\n/**\r\n * Get farm APR value in %\r\n * @param poolWeight allocationPoint / totalAllocationPoint\r\n * @param cakePriceUsd Cake price in USD\r\n * @param poolLiquidityUsd Total pool liquidity in USD\r\n * @returns\r\n */\r\nexport const getFarmApr = (\r\n  poolWeight: BigNumber,\r\n  cakePriceUsd: BigNumber,\r\n  poolLiquidityUsd: BigNumber,\r\n  farmAddress: string,\r\n  lokipersecond: BigNumber,\r\n): { cakeRewardsApr: number; lpRewardsApr: number } => {\r\n  const cakePerYear = lokipersecond.times(BLOCKS_PER_YEAR)\r\n  const yearlyCakeRewardAllocation = cakePerYear.times(poolWeight)\r\n  const cakeRewardsApr = yearlyCakeRewardAllocation.times(cakePriceUsd).div(poolLiquidityUsd).times(100)\r\n  let cakeRewardsAprAsNumber = null\r\n  if (!cakeRewardsApr.isNaN() && cakeRewardsApr.isFinite()) {\r\n    cakeRewardsAprAsNumber = cakeRewardsApr.toNumber()\r\n  }\r\n  // const lpRewardsApr = lpAprs[farmAddress?.toLocaleLowerCase()] ?? 0\r\n  return { cakeRewardsApr: cakeRewardsAprAsNumber, lpRewardsApr : 0 }\r\n}\r\n\r\nexport default null\r\n"]},"metadata":{},"sourceType":"module"}