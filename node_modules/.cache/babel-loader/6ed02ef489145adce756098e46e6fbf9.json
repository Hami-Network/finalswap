{"ast":null,"code":"import{useEffect,useMemo}from'react';import BigNumber from'bignumber.js';import{useWeb3React}from'@web3-react/core';import{useSelector}from'react-redux';import{useAppDispatch}from'state';import useRefresh from'hooks/useRefresh';import{fetchCurrentLotteryId,fetchCurrentLottery,fetchUserTicketsAndLotteries,fetchPublicLotteries}from'.';import{useProcessLotteryResponse}from'./helpers';// Lottery\nexport var useGetCurrentLotteryId=function useGetCurrentLotteryId(){return useSelector(function(state){return state.lottery.currentLotteryId;});};export var useGetUserLotteriesGraphData=function useGetUserLotteriesGraphData(){return useSelector(function(state){return state.lottery.userLotteryData;});};export var useGetUserLotteryGraphRoundById=function useGetUserLotteryGraphRoundById(lotteryId){var userLotteriesData=useGetUserLotteriesGraphData();return userLotteriesData.rounds.find(function(userRound){return userRound.lotteryId===lotteryId;});};export var useGetLotteriesGraphData=function useGetLotteriesGraphData(){return useSelector(function(state){return state.lottery.lotteriesData;});};export var useGetLotteryGraphDataById=function useGetLotteryGraphDataById(lotteryId){var lotteriesData=useGetLotteriesGraphData();return lotteriesData.find(function(lottery){return lottery.id===lotteryId;});};export var useFetchLottery=function useFetchLottery(){var _useWeb3React=useWeb3React(),account=_useWeb3React.account;var _useRefresh=useRefresh(),fastRefresh=_useRefresh.fastRefresh;var dispatch=useAppDispatch();var currentLotteryId=useGetCurrentLotteryId();useEffect(function(){// get current lottery ID & max ticket buy\ndispatch(fetchCurrentLotteryId());},[dispatch]);useEffect(function(){if(currentLotteryId){// Get historical lottery data from nodes +  last 100 subgraph entires\ndispatch(fetchPublicLotteries({currentLotteryId:currentLotteryId}));// get public data for current lottery\ndispatch(fetchCurrentLottery({currentLotteryId:currentLotteryId}));}},[dispatch,currentLotteryId,fastRefresh]);useEffect(function(){// get user tickets for current lottery, and user lottery subgraph data\nif(account&&currentLotteryId){dispatch(fetchUserTicketsAndLotteries({account:account,currentLotteryId:currentLotteryId}));}},[dispatch,currentLotteryId,account]);};export var useLottery=function useLottery(){var currentRound=useSelector(function(state){return state.lottery.currentRound;});var processedCurrentRound=useProcessLotteryResponse(currentRound);var isTransitioning=useSelector(function(state){return state.lottery.isTransitioning;});var currentLotteryId=useGetCurrentLotteryId();var userLotteryData=useGetUserLotteriesGraphData();var lotteriesData=useGetLotteriesGraphData();var maxNumberTicketsPerBuyOrClaimAsString=useSelector(function(state){return state.lottery.maxNumberTicketsPerBuyOrClaim;});var maxNumberTicketsPerBuyOrClaim=useMemo(function(){return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString);},[maxNumberTicketsPerBuyOrClaimAsString]);return{currentLotteryId:currentLotteryId,maxNumberTicketsPerBuyOrClaim:maxNumberTicketsPerBuyOrClaim,isTransitioning:isTransitioning,userLotteryData:userLotteryData,lotteriesData:lotteriesData,currentRound:processedCurrentRound};};","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/lottery/hooks.ts"],"names":["useEffect","useMemo","BigNumber","useWeb3React","useSelector","useAppDispatch","useRefresh","fetchCurrentLotteryId","fetchCurrentLottery","fetchUserTicketsAndLotteries","fetchPublicLotteries","useProcessLotteryResponse","useGetCurrentLotteryId","state","lottery","currentLotteryId","useGetUserLotteriesGraphData","userLotteryData","useGetUserLotteryGraphRoundById","lotteryId","userLotteriesData","rounds","find","userRound","useGetLotteriesGraphData","lotteriesData","useGetLotteryGraphDataById","id","useFetchLottery","account","fastRefresh","dispatch","useLottery","currentRound","processedCurrentRound","isTransitioning","maxNumberTicketsPerBuyOrClaimAsString","maxNumberTicketsPerBuyOrClaim"],"mappings":"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","sourcesContent":["import { useEffect, useMemo } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useSelector } from 'react-redux'\r\nimport { useAppDispatch } from 'state'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { State } from '../types'\r\nimport { fetchCurrentLotteryId, fetchCurrentLottery, fetchUserTicketsAndLotteries, fetchPublicLotteries } from '.'\r\nimport { useProcessLotteryResponse } from './helpers'\r\n\r\n// Lottery\r\nexport const useGetCurrentLotteryId = () => {\r\n  return useSelector((state: State) => state.lottery.currentLotteryId)\r\n}\r\n\r\nexport const useGetUserLotteriesGraphData = () => {\r\n  return useSelector((state: State) => state.lottery.userLotteryData)\r\n}\r\n\r\nexport const useGetUserLotteryGraphRoundById = (lotteryId: string) => {\r\n  const userLotteriesData = useGetUserLotteriesGraphData()\r\n  return userLotteriesData.rounds.find((userRound) => userRound.lotteryId === lotteryId)\r\n}\r\n\r\nexport const useGetLotteriesGraphData = () => {\r\n  return useSelector((state: State) => state.lottery.lotteriesData)\r\n}\r\n\r\nexport const useGetLotteryGraphDataById = (lotteryId: string) => {\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n  return lotteriesData.find((lottery) => lottery.id === lotteryId)\r\n}\r\n\r\nexport const useFetchLottery = () => {\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n  const dispatch = useAppDispatch()\r\n  const currentLotteryId = useGetCurrentLotteryId()\r\n\r\n  useEffect(() => {\r\n    // get current lottery ID & max ticket buy\r\n    dispatch(fetchCurrentLotteryId())\r\n  }, [dispatch])\r\n\r\n  useEffect(() => {\r\n    if (currentLotteryId) {\r\n      // Get historical lottery data from nodes +  last 100 subgraph entires\r\n      dispatch(fetchPublicLotteries({ currentLotteryId }))\r\n      // get public data for current lottery\r\n      dispatch(fetchCurrentLottery({ currentLotteryId }))\r\n    }\r\n  }, [dispatch, currentLotteryId, fastRefresh])\r\n\r\n  useEffect(() => {\r\n    // get user tickets for current lottery, and user lottery subgraph data\r\n    if (account && currentLotteryId) {\r\n      dispatch(fetchUserTicketsAndLotteries({ account, currentLotteryId }))\r\n    }\r\n  }, [dispatch, currentLotteryId, account])\r\n}\r\n\r\nexport const useLottery = () => {\r\n  const currentRound = useSelector((state: State) => state.lottery.currentRound)\r\n  const processedCurrentRound = useProcessLotteryResponse(currentRound)\r\n\r\n  const isTransitioning = useSelector((state: State) => state.lottery.isTransitioning)\r\n\r\n  const currentLotteryId = useGetCurrentLotteryId()\r\n  const userLotteryData = useGetUserLotteriesGraphData()\r\n  const lotteriesData = useGetLotteriesGraphData()\r\n\r\n  const maxNumberTicketsPerBuyOrClaimAsString = useSelector(\r\n    (state: State) => state.lottery.maxNumberTicketsPerBuyOrClaim,\r\n  )\r\n  const maxNumberTicketsPerBuyOrClaim = useMemo(() => {\r\n    return new BigNumber(maxNumberTicketsPerBuyOrClaimAsString)\r\n  }, [maxNumberTicketsPerBuyOrClaimAsString])\r\n\r\n  return {\r\n    currentLotteryId,\r\n    maxNumberTicketsPerBuyOrClaim,\r\n    isTransitioning,\r\n    userLotteryData,\r\n    lotteriesData,\r\n    currentRound: processedCurrentRound,\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}