{"ast":null,"code":"import { ChainId, JSBI, Percent, WETH } from '@pancakeswap/sdk';\nimport { BUSD, DAI, USDT, BTCB, CAKE, WBNB, UST, ETH, USDC } from './tokens';\nexport const ROUTER_ADDRESS = '0xf54041eB92a7B6D1cf9145e44279Bec607b657b1'; // a list of tokens by chain\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], CAKE[ChainId.MAINNET], BUSD[ChainId.MAINNET], USDT, BTCB, UST, ETH, USDC],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]]\n};\n/**\r\n * Addittional bases for specific tokens\r\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\r\n */\n\nexport const ADDITIONAL_BASES = {\n  [ChainId.MAINNET]: {}\n};\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\r\n */\n\nexport const CUSTOM_BASES = {\n  [ChainId.MAINNET]: {}\n}; // used for display in the default list when adding liquidity\n\nexport const SUGGESTED_BASES = {\n  [ChainId.MAINNET]: [BUSD[ChainId.MAINNET], CAKE[ChainId.MAINNET], BTCB],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]]\n}; // used to construct the list of all pairs we consider by default in the frontend\n\nexport const BASES_TO_TRACK_LIQUIDITY_FOR = {\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], DAI, BUSD[ChainId.MAINNET], USDT],\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]]\n};\nexport const PINNED_PAIRS = {\n  [ChainId.MAINNET]: [[CAKE[ChainId.MAINNET], WBNB], [BUSD[ChainId.MAINNET], USDT], [DAI, USDT]]\n};\nexport const NetworkContextName = 'NETWORK'; // default allowed slippage, in bips\n\nexport const INITIAL_ALLOWED_SLIPPAGE = 50; // 20 minutes, denominated in seconds\n\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20;\nexport const BIG_INT_ZERO = JSBI.BigInt(0); // one basis point\n\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000));\nexport const BIPS_BASE = JSBI.BigInt(10000); // used for warning states\n\nexport const ALLOWED_PRICE_IMPACT_LOW = new Percent(JSBI.BigInt(100), BIPS_BASE); // 1%\n\nexport const ALLOWED_PRICE_IMPACT_MEDIUM = new Percent(JSBI.BigInt(300), BIPS_BASE); // 3%\n\nexport const ALLOWED_PRICE_IMPACT_HIGH = new Percent(JSBI.BigInt(500), BIPS_BASE); // 5%\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\n\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN = new Percent(JSBI.BigInt(1000), BIPS_BASE); // 10%\n// for non expert mode disable swaps above this\n\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT = new Percent(JSBI.BigInt(1500), BIPS_BASE); // 15%\n// used to ensure the user doesn't send so much BNB so they end up with <.01\n\nexport const MIN_BNB = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)); // .01 BNB\n\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000));\nexport const ZERO_PERCENT = new Percent('0');\nexport const ONE_HUNDRED_PERCENT = new Percent('1'); // SDN OFAC addresses\n\nexport const BLOCKED_ADDRESSES = ['0x7F367cC41522cE07553e823bf3be79A889DEbe1B', '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b', '0x901bb9583b24D97e995513C6778dc6888AB6870e', '0xA7e5d5A720f06526557c513402f2e6B5fA20b008', '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C'];\nexport { default as farmsConfig } from './farms';\nexport { default as poolsConfig } from './pools';\nexport { default as ifosConfig } from './ifo';","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/config/constants/index.ts"],"names":["ChainId","JSBI","Percent","WETH","BUSD","DAI","USDT","BTCB","CAKE","WBNB","UST","ETH","USDC","ROUTER_ADDRESS","BASES_TO_CHECK_TRADES_AGAINST","MAINNET","TESTNET","ADDITIONAL_BASES","CUSTOM_BASES","SUGGESTED_BASES","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS","NetworkContextName","INITIAL_ALLOWED_SLIPPAGE","DEFAULT_DEADLINE_FROM_NOW","BIG_INT_ZERO","BigInt","ONE_BIPS","BIPS_BASE","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","ALLOWED_PRICE_IMPACT_HIGH","PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN","BLOCKED_PRICE_IMPACT_NON_EXPERT","MIN_BNB","exponentiate","BETTER_TRADE_LESS_HOPS_THRESHOLD","ZERO_PERCENT","ONE_HUNDRED_PERCENT","BLOCKED_ADDRESSES","default","farmsConfig","poolsConfig","ifosConfig"],"mappings":"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","sourcesContent":["import { ChainId, JSBI, Percent, Token, WETH } from '@pancakeswap/sdk'\r\nimport { BUSD, DAI, USDT, BTCB, CAKE, WBNB, UST, ETH, USDC } from './tokens'\r\n\r\nexport const ROUTER_ADDRESS = '0xf54041eB92a7B6D1cf9145e44279Bec607b657b1'\r\n\r\n// a list of tokens by chain\r\ntype ChainTokenList = {\r\n  readonly [chainId in ChainId]: Token[]\r\n}\r\n\r\n// used to construct intermediary pairs for trading\r\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\r\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], CAKE[ChainId.MAINNET], BUSD[ChainId.MAINNET], USDT, BTCB, UST, ETH, USDC],\r\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\r\n}\r\n\r\n/**\r\n * Addittional bases for specific tokens\r\n * @example { [WBTC.address]: [renBTC], [renBTC.address]: [WBTC] }\r\n */\r\nexport const ADDITIONAL_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n/**\r\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\r\n * tokens.\r\n * @example [AMPL.address]: [DAI, WETH[ChainId.MAINNET]]\r\n */\r\nexport const CUSTOM_BASES: { [chainId in ChainId]?: { [tokenAddress: string]: Token[] } } = {\r\n  [ChainId.MAINNET]: {},\r\n}\r\n\r\n// used for display in the default list when adding liquidity\r\nexport const SUGGESTED_BASES: ChainTokenList = {\r\n  [ChainId.MAINNET]: [BUSD[ChainId.MAINNET], CAKE[ChainId.MAINNET], BTCB],\r\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\r\n}\r\n\r\n// used to construct the list of all pairs we consider by default in the frontend\r\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\r\n  [ChainId.MAINNET]: [WETH[ChainId.MAINNET], DAI, BUSD[ChainId.MAINNET], USDT],\r\n  [ChainId.TESTNET]: [WETH[ChainId.TESTNET], CAKE[ChainId.TESTNET], BUSD[ChainId.TESTNET]],\r\n}\r\n\r\nexport const PINNED_PAIRS: { readonly [chainId in ChainId]?: [Token, Token][] } = {\r\n  [ChainId.MAINNET]: [\r\n    [CAKE[ChainId.MAINNET], WBNB],\r\n    [BUSD[ChainId.MAINNET], USDT],\r\n    [DAI, USDT],\r\n  ],\r\n}\r\n\r\nexport const NetworkContextName = 'NETWORK'\r\n\r\n// default allowed slippage, in bips\r\nexport const INITIAL_ALLOWED_SLIPPAGE = 50\r\n// 20 minutes, denominated in seconds\r\nexport const DEFAULT_DEADLINE_FROM_NOW = 60 * 20\r\n\r\nexport const BIG_INT_ZERO = JSBI.BigInt(0)\r\n\r\n// one basis point\r\nexport const ONE_BIPS = new Percent(JSBI.BigInt(1), JSBI.BigInt(10000))\r\nexport const BIPS_BASE = JSBI.BigInt(10000)\r\n// used for warning states\r\nexport const ALLOWED_PRICE_IMPACT_LOW: Percent = new Percent(JSBI.BigInt(100), BIPS_BASE) // 1%\r\nexport const ALLOWED_PRICE_IMPACT_MEDIUM: Percent = new Percent(JSBI.BigInt(300), BIPS_BASE) // 3%\r\nexport const ALLOWED_PRICE_IMPACT_HIGH: Percent = new Percent(JSBI.BigInt(500), BIPS_BASE) // 5%\r\n// if the price slippage exceeds this number, force the user to type 'confirm' to execute\r\nexport const PRICE_IMPACT_WITHOUT_FEE_CONFIRM_MIN: Percent = new Percent(JSBI.BigInt(1000), BIPS_BASE) // 10%\r\n// for non expert mode disable swaps above this\r\nexport const BLOCKED_PRICE_IMPACT_NON_EXPERT: Percent = new Percent(JSBI.BigInt(1500), BIPS_BASE) // 15%\r\n\r\n// used to ensure the user doesn't send so much BNB so they end up with <.01\r\nexport const MIN_BNB: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 BNB\r\nexport const BETTER_TRADE_LESS_HOPS_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(10000))\r\n\r\nexport const ZERO_PERCENT = new Percent('0')\r\nexport const ONE_HUNDRED_PERCENT = new Percent('1')\r\n\r\n// SDN OFAC addresses\r\nexport const BLOCKED_ADDRESSES: string[] = [\r\n  '0x7F367cC41522cE07553e823bf3be79A889DEbe1B',\r\n  '0xd882cFc20F52f2599D84b8e8D58C7FB62cfE344b',\r\n  '0x901bb9583b24D97e995513C6778dc6888AB6870e',\r\n  '0xA7e5d5A720f06526557c513402f2e6B5fA20b008',\r\n  '0x8576aCC5C05D6Ce88f4e49bf65BdF0C62F91353C',\r\n]\r\n\r\nexport { default as farmsConfig } from './farms'\r\nexport { default as poolsConfig } from './pools'\r\nexport { default as ifosConfig } from './ifo'\r\n"]},"metadata":{},"sourceType":"module"}