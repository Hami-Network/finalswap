{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\97154\\\\swap\\\\hami\\\\LokiswapUI\\\\src\\\\views\\\\Farms\\\\components\\\\FarmCard\\\\HarvestAction.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Button, Flex, Heading } from '@pancakeswap/uikit';\nimport { useTranslation } from 'contexts/Localization';\nimport { useAppDispatch } from 'state';\nimport { fetchFarmUserDataAsync } from 'state/farms';\nimport useToast from 'hooks/useToast';\nimport { getBalanceAmount } from 'utils/formatBalance';\nimport { BIG_ZERO } from 'utils/bigNumber';\nimport { useWeb3React } from '@web3-react/core';\nimport { usePriceCakeBusd } from 'state/farms/hooks';\nimport Balance from 'components/Balance';\nimport useHarvestFarm from '../../hooks/useHarvestFarm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HarvestAction = ({\n  earnings,\n  pid,\n  isabletoharvest\n}) => {\n  _s();\n\n  const canharvest = true;\n  const {\n    account\n  } = useWeb3React();\n  const {\n    toastSuccess,\n    toastError\n  } = useToast();\n  const {\n    t\n  } = useTranslation();\n  const [pendingTx, setPendingTx] = useState(false);\n  const {\n    onReward\n  } = useHarvestFarm(pid);\n  const cakePrice = usePriceCakeBusd();\n  const dispatch = useAppDispatch();\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO;\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN);\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0;\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    mb: \"8px\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    children: [/*#__PURE__*/_jsxDEV(Flex, {\n      flexDirection: \"column\",\n      alignItems: \"flex-start\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        color: rawEarningsBalance.eq(0) ? 'textDisabled' : 'text',\n        children: displayBalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), earningsBusd > 0 && /*#__PURE__*/_jsxDEV(Balance, {\n        fontSize: \"12px\",\n        color: \"textSubtle\",\n        decimals: 2,\n        value: earningsBusd,\n        unit: \" USD\",\n        prefix: \"~\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      disabled: rawEarningsBalance.eq(0) || pendingTx,\n      onClick: async () => {\n        if (!canharvest) {\n          toastError(t('Error'), t('Frequency Harvest. , Cannot Harvest until Lockup ends!'));\n          console.error('Frequency Harvest');\n        } else {\n          setPendingTx(true);\n\n          try {\n            await onReward();\n            toastSuccess(`${t('Harvested')}!`, t('Your %symbol% earnings have been sent to your wallet!', {\n              symbol: 'LOKI'\n            }));\n          } catch (e) {\n            toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'));\n            console.error(e);\n          } finally {\n            setPendingTx(false);\n          }\n\n          dispatch(fetchFarmUserDataAsync({\n            account,\n            pids: [pid]\n          }));\n        }\n      },\n      children: t('Harvest')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HarvestAction, \"aZ3F33wlxMiEzk6f6IwMl+DlLrE=\", false, function () {\n  return [useWeb3React, useToast, useTranslation, useHarvestFarm, usePriceCakeBusd, useAppDispatch];\n});\n\n_c = HarvestAction;\nexport default HarvestAction;\n\nvar _c;\n\n$RefreshReg$(_c, \"HarvestAction\");","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/views/Farms/components/FarmCard/HarvestAction.tsx"],"names":["React","useState","BigNumber","Button","Flex","Heading","useTranslation","useAppDispatch","fetchFarmUserDataAsync","useToast","getBalanceAmount","BIG_ZERO","useWeb3React","usePriceCakeBusd","Balance","useHarvestFarm","HarvestAction","earnings","pid","isabletoharvest","canharvest","account","toastSuccess","toastError","t","pendingTx","setPendingTx","onReward","cakePrice","dispatch","rawEarningsBalance","displayBalance","toFixed","ROUND_DOWN","earningsBusd","multipliedBy","toNumber","eq","console","error","symbol","e","pids"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Button, Flex, Heading } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { fetchFarmUserDataAsync } from 'state/farms'\r\nimport useToast from 'hooks/useToast'\r\nimport { getBalanceAmount } from 'utils/formatBalance'\r\nimport { BIG_ZERO } from 'utils/bigNumber'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport Balance from 'components/Balance'\r\nimport useHarvestFarm from '../../hooks/useHarvestFarm'\r\n\r\ninterface FarmCardActionsProps {\r\n  earnings?: BigNumber\r\n  pid?: number\r\n  isabletoharvest?: boolean\r\n}\r\n\r\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid, isabletoharvest}) => {\r\n  const canharvest = true\r\n  const { account } = useWeb3React()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { t } = useTranslation()\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { onReward } = useHarvestFarm(pid)\r\n  const cakePrice = usePriceCakeBusd()\r\n  const dispatch = useAppDispatch()\r\n  const rawEarningsBalance = account ? getBalanceAmount(earnings) : BIG_ZERO\r\n  const displayBalance = rawEarningsBalance.toFixed(3, BigNumber.ROUND_DOWN)\r\n  const earningsBusd = rawEarningsBalance ? rawEarningsBalance.multipliedBy(cakePrice).toNumber() : 0\r\n\r\n  return (\r\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\r\n      <Flex flexDirection=\"column\" alignItems=\"flex-start\">\r\n        <Heading color={rawEarningsBalance.eq(0) ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\r\n        {earningsBusd > 0 && (\r\n          <Balance fontSize=\"12px\" color=\"textSubtle\" decimals={2} value={earningsBusd} unit=\" USD\" prefix=\"~\" />\r\n        )}\r\n      </Flex>\r\n      <Button\r\n         \r\n        disabled={rawEarningsBalance.eq(0) || pendingTx}\r\n        onClick={async () => {\r\n          if(!canharvest) {\r\n            toastError(\r\n              t('Error'),\r\n              t('Frequency Harvest. , Cannot Harvest until Lockup ends!'),\r\n            )\r\n            console.error('Frequency Harvest')\r\n          } else {\r\n            setPendingTx(true)\r\n            try {\r\n              await onReward()\r\n              toastSuccess(\r\n                `${t('Harvested')}!`,\r\n                t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'LOKI' }),\r\n              )\r\n            } catch (e) {\r\n              toastError(\r\n                t('Error'),\r\n                t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n              )\r\n              console.error(e)\r\n            } finally {\r\n              setPendingTx(false)\r\n            }\r\n            dispatch(fetchFarmUserDataAsync({ account, pids: [pid] }))\r\n          }\r\n        }}\r\n      >\r\n        {t('Harvest')}\r\n      </Button>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default HarvestAction\r\n"]},"metadata":{},"sourceType":"module"}