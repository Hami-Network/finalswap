{"ast":null,"code":"import _toConsumableArray from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _regeneratorRuntime from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _taggedTemplateLiteral from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _asyncToGenerator from\"C:/Users/97154/swap/hami/LokiswapUI/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";var _templateObject;import{request,gql}from'graphql-request';import{campaignMap}from'config/constants/campaigns';import{GRAPH_API_PROFILE}from'config/constants/endpoints';import{getAchievementTitle,getAchievementDescription}from'utils/achievements';/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */export var getUserPointIncreaseEvents=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(account){var _yield$request,user;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return request(GRAPH_API_PROFILE,gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n        query getUserPointIncreaseEvents($account: ID!) {\\n          user(id: $account) {\\n            points {\\n              id\\n              campaignId\\n              points\\n            }\\n          }\\n        }\\n      \"]))),{account:account.toLowerCase()});case 3:_yield$request=_context.sent;user=_yield$request.user;return _context.abrupt(\"return\",user.points);case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);return _context.abrupt(\"return\",null);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function getUserPointIncreaseEvents(_x){return _ref.apply(this,arguments);};}();/**\r\n * Gets all user point increase events and adds achievement meta\r\n */export var getAchievements=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account){var pointIncreaseEvents;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return getUserPointIncreaseEvents(account);case 2:pointIncreaseEvents=_context2.sent;if(pointIncreaseEvents){_context2.next=5;break;}return _context2.abrupt(\"return\",[]);case 5:return _context2.abrupt(\"return\",pointIncreaseEvents.reduce(function(accum,userPoint){if(!campaignMap.has(userPoint.campaignId)){return accum;}var campaignMeta=campaignMap.get(userPoint.campaignId);return[].concat(_toConsumableArray(accum),[{id:userPoint.campaignId,type:campaignMeta.type,address:userPoint.id,title:getAchievementTitle(campaignMeta),description:getAchievementDescription(campaignMeta),badge:campaignMeta.badge,points:Number(userPoint.points)}]);},[]));case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function getAchievements(_x2){return _ref2.apply(this,arguments);};}();","map":{"version":3,"sources":["C:/Users/97154/swap/hami/LokiswapUI/src/state/achievements/helpers.ts"],"names":["request","gql","campaignMap","GRAPH_API_PROFILE","getAchievementTitle","getAchievementDescription","getUserPointIncreaseEvents","account","toLowerCase","user","points","getAchievements","pointIncreaseEvents","reduce","accum","userPoint","has","campaignId","campaignMeta","get","id","type","address","title","description","badge","Number"],"mappings":"ipBAAA,OAASA,OAAT,CAAkBC,GAAlB,KAA6B,iBAA7B,CACA,OAASC,WAAT,KAA4B,4BAA5B,CACA,OAASC,iBAAT,KAAkC,4BAAlC,CAEA,OAASC,mBAAT,CAA8BC,yBAA9B,KAA+D,oBAA/D,CAQA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,0BAA0B,0FAAG,iBAAOC,OAAP,gLAEfP,CAAAA,OAAO,CAC5BG,iBAD4B,CAE5BF,GAF4B,oSAa5B,CACEM,OAAO,CAAEA,OAAO,CAACC,WAAR,EADX,CAb4B,CAFQ,qCAE9BC,IAF8B,gBAE9BA,IAF8B,iCAoB/BA,IAAI,CAACC,MApB0B,0FAsB/B,IAtB+B,sEAAH,kBAA1BJ,CAAAA,0BAA0B,4CAAhC,CA0BP;AACA;AACA,GACA,MAAO,IAAMK,CAAAA,eAAe,2FAAG,kBAAOJ,OAAP,qKACKD,CAAAA,0BAA0B,CAACC,OAAD,CAD/B,QACvBK,mBADuB,mBAGxBA,mBAHwB,2DAIpB,EAJoB,0CAOtBA,mBAAmB,CAACC,MAApB,CAA2B,SAACC,KAAD,CAAQC,SAAR,CAAsB,CACtD,GAAI,CAACb,WAAW,CAACc,GAAZ,CAAgBD,SAAS,CAACE,UAA1B,CAAL,CAA4C,CAC1C,MAAOH,CAAAA,KAAP,CACD,CAED,GAAMI,CAAAA,YAAY,CAAGhB,WAAW,CAACiB,GAAZ,CAAgBJ,SAAS,CAACE,UAA1B,CAArB,CAEA,mCACKH,KADL,GAEE,CACEM,EAAE,CAAEL,SAAS,CAACE,UADhB,CAEEI,IAAI,CAAEH,YAAY,CAACG,IAFrB,CAGEC,OAAO,CAAEP,SAAS,CAACK,EAHrB,CAIEG,KAAK,CAAEnB,mBAAmB,CAACc,YAAD,CAJ5B,CAKEM,WAAW,CAAEnB,yBAAyB,CAACa,YAAD,CALxC,CAMEO,KAAK,CAAEP,YAAY,CAACO,KANtB,CAOEf,MAAM,CAAEgB,MAAM,CAACX,SAAS,CAACL,MAAX,CAPhB,CAFF,GAYD,CAnBM,CAmBJ,EAnBI,CAPsB,0DAAH,kBAAfC,CAAAA,eAAe,8CAArB","sourcesContent":["import { request, gql } from 'graphql-request'\r\nimport { campaignMap } from 'config/constants/campaigns'\r\nimport { GRAPH_API_PROFILE } from 'config/constants/endpoints'\r\nimport { Achievement } from 'state/types'\r\nimport { getAchievementTitle, getAchievementDescription } from 'utils/achievements'\r\n\r\ninterface UserPointIncreaseEvent {\r\n  campaignId: string\r\n  id: string // wallet address\r\n  points: string\r\n}\r\n\r\n/**\r\n * Gets all user point increase events on the profile filtered by wallet address\r\n */\r\nexport const getUserPointIncreaseEvents = async (account: string): Promise<UserPointIncreaseEvent[]> => {\r\n  try {\r\n    const { user } = await request(\r\n      GRAPH_API_PROFILE,\r\n      gql`\r\n        query getUserPointIncreaseEvents($account: ID!) {\r\n          user(id: $account) {\r\n            points {\r\n              id\r\n              campaignId\r\n              points\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      {\r\n        account: account.toLowerCase(),\r\n      },\r\n    )\r\n\r\n    return user.points\r\n  } catch (error) {\r\n    return null\r\n  }\r\n}\r\n\r\n/**\r\n * Gets all user point increase events and adds achievement meta\r\n */\r\nexport const getAchievements = async (account: string): Promise<Achievement[]> => {\r\n  const pointIncreaseEvents = await getUserPointIncreaseEvents(account)\r\n\r\n  if (!pointIncreaseEvents) {\r\n    return []\r\n  }\r\n\r\n  return pointIncreaseEvents.reduce((accum, userPoint) => {\r\n    if (!campaignMap.has(userPoint.campaignId)) {\r\n      return accum\r\n    }\r\n\r\n    const campaignMeta = campaignMap.get(userPoint.campaignId)\r\n\r\n    return [\r\n      ...accum,\r\n      {\r\n        id: userPoint.campaignId,\r\n        type: campaignMeta.type,\r\n        address: userPoint.id,\r\n        title: getAchievementTitle(campaignMeta),\r\n        description: getAchievementDescription(campaignMeta),\r\n        badge: campaignMeta.badge,\r\n        points: Number(userPoint.points),\r\n      },\r\n    ]\r\n  }, [])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}